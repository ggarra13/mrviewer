/**
 * @file   rgba.cg
 * @author gga
 * @date   Thu Jul  5 22:50:08 2007
 * 
 * @brief    simple rgba texture with 3D lut shader
 * @compile  cgc -profile fp30 rgba.cg -o rgba.fp30
 * 
 */

// #define USE_EVEN_TEXTURE

struct Out
{ 
  half4 pixel: COLOR; 
};

Out main( 
	 float2 tc: TEXCOORD0, 
	 uniform sampler2D fgImage: TEXUNIT0, 
	 uniform sampler3D lut:     TEXUNIT3,
	 uniform int    mask = 0,
	 uniform int    mask_value = 0,
         uniform int    height = 256,
         uniform int    width  = 256,
	 uniform half   gain  = 1.0,
	 uniform half   gamma = 0.45,
	 uniform int    channel = 0,
	 uniform bool   premult = 0,
	 uniform bool   unpremult = 0,
	 uniform bool   enableNormalization = 0,
	 uniform half   normMin = 0,
	 uniform half   normSpan  = 1,
	 uniform bool   enableLut = 0,
	 uniform bool   lutF = 0,
	 uniform half   lutMin, 
	 uniform half   lutMax,
         uniform half   scale = 1.0,
         uniform half   offset = 0,
	 uniform half   lutM, 
	 uniform half   lutT
	  )
{ 
  //
  // Sample RGBA texture. 
  //
  half4 c  = tex2D(fgImage, tc);

  //
  // Apply normalization
  //
  if (enableNormalization)
    {
      c.rgb = (c.rgb - normMin) / normSpan;
    }



  //
  // Apply 3D color lookup table (in log space).
  //
  if (enableLut)
    { 
      if ( lutF )
	{
	  //
	  // Texture hardware does not support
	  // interpolation between texture samples
	  // 
	  half3 i = lutF * half3( lutT + lutM *
				  log( clamp(c.rgb, lutMin, lutMax) ) );

	  half3 fi = floor(i);
	  half3 fj = fi + 1;
	  half3 s = i - fi;

	  fi = fi / lutF;
	  fj = fj / lutF;

	  half3 c0 = tex3D(lut, half3(fi.x, fi.y, fi.z)).rgb;
	  half3 c1 = tex3D(lut, half3(fj.x, fi.y, fi.z)).rgb;
	  half3 c2 = tex3D(lut, half3(fi.x, fj.y, fi.z)).rgb;
	  half3 c3 = tex3D(lut, half3(fj.x, fj.y, fi.z)).rgb;
	  half3 c4 = tex3D(lut, half3(fi.x, fi.y, fi.z)).rgb;
	  half3 c5 = tex3D(lut, half3(fj.x, fi.y, fj.z)).rgb;
	  half3 c6 = tex3D(lut, half3(fi.x, fj.y, fj.z)).rgb;
	  half3 c7 = tex3D(lut, half3(fj.x, fj.y, fj.z)).rgb;

	  c.rgb = ((c0 * (1-s.x) + c1 * s.x) * (1-s.y) +
		   (c2 * (1-s.x) + c3 * s.x) *  s.y) * (1-s.z) +
                  ((c4 * (1-s.x) + c5 * s.x) * (1-s.y) +
                   (c6 * (1-s.x) + c7 * s.x) *  s.y) * s.z;

	  c.rgb = exp(c.rgb);
	}
      else
      {
	c.rgb = lutT + lutM * log( clamp(c.rgb, lutMin, lutMax) );
      	c.rgb = exp( tex3D(lut, c.rgb * scale + offset ).rgb );
      }
    }

  if ( unpremult && c.a > 0.0001 )
  {
    c.rgb /= c.a;
  }

  //
  // Apply gain 
  //
  c.rgb *= gain;

  //
  // Apply video gamma correction.
  // 
  c.rgb = pow( c.rgb, gamma );

  //
  // Apply channel selection
  // 
  if ( channel == 1 )
    {
      c.rgb = c.rrr;
    }
  else if ( channel == 2 )
    {
      c.rgb = c.ggg;
    }
  else if ( channel == 3 )
    {
      c.rgb = c.bbb;
    }
  else if ( channel == 4 )
    {
      c.rgb = c.aaa;
    }
  else if ( channel == 5 )
    {
      c.r *= 0.5;
      c.r += c.a * 0.5;
    }
  else if ( channel == 6 )
    {
      c.rgb = (c.r + c.g + c.b) / 3.0;
    }

  int x = 1000;
  if ( mask == 1 )  // even odd rows
  {
      x = fmod( tc.y * height, 2 );
  }
  else if ( mask == 2 )
  {
      x = fmod( tc.x * width, 2 );
  }
  else if ( mask == 3 )
  {
      x = fmod( floor( tc.x * width ) + floor( tc.y * height ), 2 ) < 1;
  }

  if ( x == mask_value )
  {
      c.rgba = 0.0;
  }

  if ( premult )
  {
      c.rgb *= c.a;
  }


  Out output;
  output.pixel = c;
  return output;
} 
