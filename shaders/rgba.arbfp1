!!ARBfp1.0
# cgc version 3.1.0013, build date Apr 24 2012
# command line args: -I/media/Linux/code/applications/mrViewer-fltk1.3/shaders -profile arbfp1
# source file: rgba.cg
#vendor NVIDIA Corporation
#version 3.1.0.13
#profile arbfp1
#program main
#semantic main.fgImage : TEXUNIT0
#semantic main.lut : TEXUNIT3
#semantic main.mask
#semantic main.mask_value
#semantic main.height
#semantic main.width
#semantic main.gain
#semantic main.gamma
#semantic main.channel
#semantic main.premult
#semantic main.unpremult
#semantic main.enableNormalization
#semantic main.normMin
#semantic main.normSpan
#semantic main.enableLut
#semantic main.lutF
#semantic main.lutMin
#semantic main.lutMax
#semantic main.lutM
#semantic main.lutT
#var float2 tc : $vin.TEXCOORD0 : TEX0 : 0 : 1
#var sampler2D fgImage : TEXUNIT0 : texunit 0 : 1 : 1
#var sampler3D lut : TEXUNIT3 : texunit 3 : 2 : 1
#var int mask :  : c[0] : 3 : 1
#var int mask_value :  : c[1] : 4 : 1
#var int height :  : c[2] : 5 : 1
#var int width :  : c[3] : 6 : 1
#var half gain :  : c[4] : 7 : 1
#var half gamma :  : c[5] : 8 : 1
#var int channel :  : c[6] : 9 : 1
#var bool premult :  : c[7] : 10 : 1
#var bool unpremult :  : c[8] : 11 : 1
#var bool enableNormalization :  : c[9] : 12 : 1
#var half normMin :  : c[10] : 13 : 1
#var half normSpan :  : c[11] : 14 : 1
#var bool enableLut :  : c[12] : 15 : 1
#var bool lutF :  : c[13] : 16 : 1
#var half lutMin :  : c[14] : 17 : 1
#var half lutMax :  : c[15] : 18 : 1
#var half lutM :  : c[16] : 19 : 1
#var half lutT :  : c[17] : 20 : 1
#var float4 main.pixel : $vout.COLOR : COL : -1 : 1
#const c[18] = 0.5 0.33333334 1 0
#const c[19] = 2 3 1000 4
#const c[20] = 5 6 0.00010001659 2.718282
#const c[21] = 2.71875 0.69335938
#default mask = 0
#default mask_value = 0
#default height = 256
#default width = 256
#default gain = 1
#default gamma = 0.44995117
#default channel = 0
#default premult = 0
#default unpremult = 0
#default enableNormalization = 0
#default normMin = 0
#default normSpan = 1
#default enableLut = 0
#default lutF = 0
PARAM c[22] = { program.local[0..17],
		{ 0.5, 0.33333334, 1, 0 },
		{ 2, 3, 1000, 4 },
		{ 5, 6, 0.00010001659, 2.718282 },
		{ 2.71875, 0.69335938 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
TEX R0, fragment.texcoord[0], texture[0], 2D;
RCP R3.w, c[13].x;
RCP R1.w, c[11].x;
ADD R1.xyz, R0, -c[10].x;
MUL R1.xyz, R1, R1.w;
CMP R3.xyz, -c[9].x, R1, R0;
MIN R0.xyz, R3, c[15].x;
MAX R0.xyz, R0, c[14].x;
MOV R1.w, c[17].x;
LG2 R0.x, R0.x;
LG2 R0.y, R0.y;
LG2 R0.z, R0.z;
MUL R0.xyz, R0, c[16].x;
MAD R0.xyz, R0, c[21].y, R1.w;
MUL R1.xyz, R0, c[13].x;
FLR R0.xyz, R1;
ADD R4.xyz, -R0, R1;
ADD R2.xyz, R0, c[18].z;
MUL R7.xyz, R3.w, R2;
MUL R2.xyz, R0, R3.w;
TEX R1.xyz, R7, texture[3], 3D;
ADD R2.w, -R4.x, c[18].z;
ADD R3.w, -R4.y, c[18].z;
MUL R1.xyz, R4.x, R1;
MOV R0.x, R2;
MOV R0.yz, R7;
TEX R0.xyz, R0, texture[3], 3D;
MAD R1.xyz, R2.w, R0, R1;
MUL R5.xyz, R4.y, R1;
TEX R1.xyz, R2, texture[3], 3D;
MOV R0.y, R2;
MOV R0.xz, R7;
TEX R0.xyz, R0, texture[3], 3D;
MUL R0.xyz, R4.x, R0;
MAD R6.xyz, R2.w, R1, R0;
MAD R5.xyz, R6, R3.w, R5;
MOV R6.yz, R2;
MOV R6.x, R7;
MOV R0.z, R2;
MOV R0.xy, R7;
TEX R0.xyz, R0, texture[3], 3D;
MOV R2.y, R7;
MUL R0.xyz, R4.x, R0;
TEX R2.xyz, R2, texture[3], 3D;
MAD R0.xyz, R2, R2.w, R0;
TEX R6.xyz, R6, texture[3], 3D;
MUL R2.xyz, R4.x, R6;
MAD R1.xyz, R2.w, R1, R2;
MUL R0.xyz, R4.y, R0;
MAD R0.xyz, R1, R3.w, R0;
MUL R1.xyz, R4.z, R5;
ADD R2.y, -R4.z, c[18].z;
MAD R0.xyz, R0, R2.y, R1;
MOV R2.x, c[13];
MUL R1.x, R2, c[12];
CMP R2.xyz, -R1.x, R0, R3;
POW R0.x, c[21].x, R2.x;
POW R0.z, c[21].x, R2.z;
POW R0.y, c[21].x, R2.y;
CMP R0.xyz, -R1.x, R0, R2;
MIN R1.xyz, R0, c[15].x;
MAX R1.xyz, R1, c[14].x;
LG2 R1.x, R1.x;
LG2 R1.y, R1.y;
LG2 R1.z, R1.z;
MUL R3.xyz, R1, c[16].x;
ABS R2.x, c[13];
CMP R1.x, -R2, c[18].w, c[18].z;
MAD R2.xyz, R3, c[21].y, R1.w;
MUL R1.x, R1, c[12];
CMP R2.xyz, -R1.x, R2, R0;
TEX R0.xyz, R2, texture[3], 3D;
RCP R1.y, R0.w;
MOV R1.z, c[18];
POW R0.x, c[20].w, R0.x;
POW R0.z, c[20].w, R0.z;
POW R0.y, c[20].w, R0.y;
CMP R0.xyz, -R1.x, R0, R2;
SLT R1.x, c[20].z, R0.w;
MUL R2.xyz, R0, R1.y;
MUL R1.x, R1, c[8];
CMP R0.xyz, -R1.x, R2, R0;
MUL R0.xyz, R0, c[4].x;
MOV R2.xyz, c[19].xyww;
ADD R1.x, -R1.z, c[6];
ADD R1.y, -R2.x, c[6].x;
ABS R1.y, R1;
ADD R2.x, -R2, c[0];
ADD R1.z, -R1, c[0].x;
ABS R1.z, R1;
ABS R1.x, R1;
CMP R1.y, -R1, c[18].w, c[18].z;
ADD R2.z, -R2, c[6].x;
ABS R2.x, R2;
POW R0.y, R0.y, c[5].x;
POW R0.z, R0.z, c[5].x;
POW R0.x, R0.x, c[5].x;
CMP R0.xyz, -R1.x, R0, R0.x;
CMP R1.x, -R1, c[18].w, c[18].z;
ABS R1.x, R1;
CMP R1.x, -R1, c[18].w, c[18].z;
MUL R1.w, R1.x, R1.y;
CMP R0.xyz, -R1.w, R0.y, R0;
ADD R1.w, -R2.y, c[6].x;
ADD R2.y, -R2, c[0].x;
ABS R3.y, R2;
CMP R2.y, -R2.x, c[18].w, c[18].z;
CMP R3.w, -R3.y, c[18], c[18].z;
MUL R3.y, fragment.texcoord[0], c[2].x;
ABS R1.y, R1;
CMP R1.y, -R1, c[18].w, c[18].z;
ABS R1.w, R1;
MUL R1.x, R1, R1.y;
CMP R1.w, -R1, c[18], c[18].z;
MUL R1.y, R1.x, R1.w;
CMP R0.xyz, -R1.y, R0.z, R0;
ABS R1.y, R1.w;
ABS R1.w, R2.z;
CMP R1.y, -R1, c[18].w, c[18].z;
MUL R2.z, R1.x, R1.y;
CMP R1.w, -R1, c[18], c[18].z;
MUL R1.x, R2.z, R1.w;
CMP R0.xyz, -R1.x, R0.w, R0;
MOV R1.xy, c[20];
ADD R2.w, -R1.x, c[6].x;
ABS R1.x, R1.w;
ABS R1.w, R2;
CMP R1.x, -R1, c[18].w, c[18].z;
CMP R2.x, -R1.z, c[18].w, c[18].z;
FLR R4.y, R3;
MUL R3.x, R0, c[18];
CMP R1.w, -R1, c[18], c[18].z;
MUL R1.x, R2.z, R1;
MUL R2.z, R1.x, R1.w;
CMP R0.x, -R2.z, R3, R0;
MAD R2.w, R0, c[18].x, R0.x;
CMP R0.x, -R2.z, R2.w, R0;
ADD R2.z, R0.x, R0.y;
ADD R2.z, R2, R0;
ABS R3.x, R2.y;
ABS R2.w, R2.x;
CMP R2.w, -R2, c[18], c[18].z;
CMP R3.x, -R3, c[18].w, c[18].z;
MUL R3.z, R2.w, R3.x;
MUL R3.x, fragment.texcoord[0], c[3];
FLR R4.x, R3;
ADD R4.z, R4.x, R4.y;
MUL R3.z, R3, R3.w;
SLT R3.w, R4.x, -R4.y;
MUL R4.z, R4, c[18].x;
ABS R4.x, R4.z;
ABS R3.w, R3;
FRC R4.x, R4;
CMP R3.w, -R3, c[18], c[18].z;
MUL R2.y, R2.w, R2;
MUL R4.x, R4, c[19];
MUL R3.w, R3.z, R3;
CMP R3.w, -R3, R4.x, -R4.x;
SLT R4.x, R3, c[18].w;
ABS R2.w, R4.x;
SLT R4.x, R3.y, c[18].w;
CMP R2.w, -R2, c[18], c[18].z;
ABS R4.x, R4;
MUL R2.w, R2.y, R2;
CMP R4.x, -R4, c[18].w, c[18].z;
MUL R4.y, R3, c[18].x;
MUL R3.y, R2.x, R4.x;
MUL R2.x, R3, c[18];
ABS R4.x, R4.y;
FRC R3.x, R4;
ABS R2.x, R2;
MUL R3.x, R3, c[19];
CMP R3.x, -R3.y, R3, -R3;
ABS R3.y, R3.x;
FRC R2.x, R2;
MUL R2.x, R2, c[19];
CMP R2.x, -R2.w, R2, -R2;
SLT R2.w, R3.x, c[18];
FLR R3.y, R3;
CMP R3.x, -R2.w, -R3.y, R3.y;
ABS R2.w, R2.x;
CMP R3.x, -R1.z, c[19].z, R3;
SLT R1.z, R2.x, c[18].w;
FLR R2.w, R2;
CMP R1.z, -R1, -R2.w, R2.w;
CMP R2.x, -R2.y, R1.z, R3;
SLT R1.z, R3.w, c[18];
CMP R1.z, -R3, R1, R2.x;
ADD R2.x, -R1.y, c[6];
ABS R1.y, R1.w;
CMP R1.y, -R1, c[18].w, c[18].z;
ABS R1.w, R2.x;
MUL R1.x, R1, R1.y;
CMP R1.w, -R1, c[18], c[18].z;
MUL R1.x, R1, R1.w;
MUL R2.z, R2, c[18].y;
CMP R0.xyz, -R1.x, R2.z, R0;
ADD R1.x, R1.z, -c[1];
ABS R1.x, R1;
CMP R0, -R1.x, R0, c[18].w;
MUL R1.xyz, R0, R0.w;
CMP result.color.xyz, -c[7].x, R1, R0;
MOV result.color.w, R0;
END
# 203 instructions, 8 R-regs
