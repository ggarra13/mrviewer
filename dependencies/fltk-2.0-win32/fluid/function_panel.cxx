// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "function_panel.h"

fltk::Window *function_panel=(fltk::Window *)0;

fltk::CheckButton *f_public_button=(fltk::CheckButton *)0;

fltk::CheckButton *f_c_button=(fltk::CheckButton *)0;

fltk::Input *f_name_input=(fltk::Input *)0;

fltk::Input *f_attributes_input=(fltk::Input *)0;

fltk::Input *f_return_type_input=(fltk::Input *)0;

fltk::ReturnButton *f_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *f_panel_cancel=(fltk::Button *)0;

static void cb_static(fltk::Item*, void*) {
  f_attributes_input->value("static");
}

static void cb_virtual(fltk::Item*, void*) {
  f_attributes_input->value("virtual");
}

static void cb_const(fltk::Item*, void*) {
  f_attributes_input->value("const");
}

static void cb_inline(fltk::Item*, void*) {
  f_attributes_input->value("inline");
}

static void cb_export(fltk::Item*, void*) {
  f_attributes_input->value("export");
}

static void cb___declspec(fltk::Item*, void*) {
  f_attributes_input->value("__declspec(dllexport)");
}

static void cb___declspec1(fltk::Item*, void*) {
  f_attributes_input->value("__declspec(dllimport)");
}

static void cb___stdcall(fltk::Item*, void*) {
  f_attributes_input->value("__stdcall");
}

static void cb_Set(fltk::Button*, void*) {
  f_name_input->value("");
  f_attributes_input->value("");
  f_return_type_input->value("");
  f_public_button->value(1);
  f_c_button->value(0);
}

fltk::Window* make_function_panel() {
  fltk::Window* w;
   {fltk::Window* o = function_panel = new fltk::Window(400, 208, "function/method");
    w = o;
    o->shortcut(0xff1b);
    o->begin();
     {fltk::CheckButton* o = f_public_button = new fltk::CheckButton(13, 8, 95, 25, "public");
      o->when(fltk::WHEN_NEVER);
    }
    f_c_button = new fltk::CheckButton(129, 8, 133, 25, "C declaration");
     {fltk::Input* o = f_name_input = new fltk::Input(13, 55, 237, 22, "Name(args): (blank for main())");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = f_attributes_input = new fltk::Input(13, 99, 237, 22, "Attributes (virtual, static, __declspec, ...)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = f_return_type_input = new fltk::Input(13, 143, 377, 22, "Return Type: (blank to return outermost widget)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = f_panel_ok = new fltk::ReturnButton(220, 176, 80, 22, "OK");
      o->box(fltk::UP_BOX);
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = f_panel_cancel = new fltk::Button(310, 176, 80, 22, "Cancel");
      o->box(fltk::UP_BOX);
      o->buttonbox(fltk::NO_BOX);
      o->shortcut(0xff1b);
    }
     {fltk::Choice* o = new fltk::Choice(280, 99, 110, 22, "attr:");
      o->begin();
       {fltk::Item* o = new fltk::Item("static");
        o->callback((fltk::Callback*)cb_static);
      }
       {fltk::Item* o = new fltk::Item("virtual");
        o->callback((fltk::Callback*)cb_virtual);
      }
       {fltk::Item* o = new fltk::Item("const");
        o->callback((fltk::Callback*)cb_const);
      }
       {fltk::Item* o = new fltk::Item("inline");
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb_inline);
      }
       {fltk::Item* o = new fltk::Item("export");
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb_export);
      }
       {fltk::Item* o = new fltk::Item("__declspec(dllexport)");
        o->set_vertical();
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb___declspec);
      }
       {fltk::Item* o = new fltk::Item("__declspec(dllimport)");
        o->set_vertical();
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb___declspec1);
      }
       {fltk::Item* o = new fltk::Item("__stdcall");
        o->set_vertical();
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb___stdcall);
      }
      o->end();
    }
     {fltk::Button* o = new fltk::Button(280, 55, 110, 22, "Set main()");
      o->box(fltk::UP_BOX);
      o->buttonbox(fltk::DOWN_BOX);
      o->callback((fltk::Callback*)cb_Set);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window *code_panel=(fltk::Window *)0;

static void cb_code_panel(fltk::Window* o, void*) {
  o->resizable(code_input);
}

CodeEditor *code_input=(CodeEditor *)0;

fltk::ReturnButton *code_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *code_panel_cancel=(fltk::Button *)0;

fltk::Window* make_code_panel() {
  fltk::Window* w;
   {fltk::Window* o = code_panel = new fltk::Window(290, 175, "code");
    w = o;
    o->shortcut(0xff1b);
    o->callback((fltk::Callback*)cb_code_panel);
    o->begin();
     {CodeEditor* o = code_input = new CodeEditor(6, 5, 280, 138);
      o->type(4);
      o->align(fltk::ALIGN_CENTER);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::Group* o = new fltk::Group(6, 148, 279, 22);
      o->begin();
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 0, 99, 22);
        fltk::Group::current()->resizable(o);
      }
       {fltk::ReturnButton* o = code_panel_ok = new fltk::ReturnButton(109, 0, 80, 22, "OK");
        o->shortcut(0xff0d);
        ((fltk::Window*)(o->parent()->parent()))->hotspot(o);
      }
       {fltk::Button* o = code_panel_cancel = new fltk::Button(199, 0, 80, 22, "Cancel");
        o->shortcut(0xff1b);
      }
      o->end();
    }
    o->end();
    o->set_modal();
  }
  return  w;
}

fltk::Window *codeblock_panel=(fltk::Window *)0;

fltk::Input *code_before_input=(fltk::Input *)0;

fltk::Input *code_after_input=(fltk::Input *)0;

fltk::ReturnButton *codeblock_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *codeblock_panel_cancel=(fltk::Button *)0;

fltk::Window* make_codeblock_panel() {
  fltk::Window* w;
   {fltk::Window* o = codeblock_panel = new fltk::Window(290, 131, "codeblock");
    w = o;
    o->shortcut(0xff1b);
    o->begin();
     {fltk::Input* o = code_before_input = new fltk::Input(10, 22, 270, 22, "Conditional code block");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = code_after_input = new fltk::Input(10, 65, 270, 23, "\"{...child code...}\" is inserted here");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = codeblock_panel_ok = new fltk::ReturnButton(110, 99, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = codeblock_panel_cancel = new fltk::Button(200, 99, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window *declblock_panel=(fltk::Window *)0;

fltk::Input *decl_before_input=(fltk::Input *)0;

fltk::Input *decl_after_input=(fltk::Input *)0;

fltk::ReturnButton *declblock_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *declblock_panel_cancel=(fltk::Button *)0;

fltk::Window* make_declblock_panel() {
  fltk::Window* w;
   {fltk::Window* o = declblock_panel = new fltk::Window(290, 131, "declaration block");
    w = o;
    o->shortcut(0xff1b);
    o->begin();
     {fltk::Input* o = decl_before_input = new fltk::Input(10, 22, 270, 22, "Block start");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = decl_after_input = new fltk::Input(10, 66, 270, 22, "\"\\n...child code...\\n\" is inserted here");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = declblock_panel_ok = new fltk::ReturnButton(110, 99, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = declblock_panel_cancel = new fltk::Button(200, 99, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window *decl_panel=(fltk::Window *)0;

fltk::CheckButton *decl_public_button=(fltk::CheckButton *)0;

fltk::Input *decl_input=(fltk::Input *)0;

fltk::ReturnButton *decl_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *decl_panel_cancel=(fltk::Button *)0;

fltk::Window* make_decl_panel() {
  fltk::Window* w;
   {fltk::Window* o = decl_panel = new fltk::Window(290, 175, "declaration");
    w = o;
    o->shortcut(0xff1b);
    o->begin();
     {fltk::CheckButton* o = decl_public_button = new fltk::CheckButton(10, 11, 65, 22, "public");
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = decl_input = new fltk::Input(10, 44, 270, 22, "can be any declartion, like \"int x;\",\nan external symbol like \"extern int\
 foo();\",\na #directive like \"#include <foo.h>\",\nor a comment like \"//foo\
\" or \"/*foo*/\"");
      o->align(fltk::ALIGN_BOTTOM|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = decl_panel_ok = new fltk::ReturnButton(110, 143, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = decl_panel_cancel = new fltk::Button(200, 143, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->resizable(o);
  }
  return  w;
}

fltk::Window *class_panel=(fltk::Window *)0;

fltk::CheckButton *c_public_button=(fltk::CheckButton *)0;

fltk::Input *c_name_input=(fltk::Input *)0;

fltk::Input *c_subclass_input=(fltk::Input *)0;

fltk::ReturnButton *c_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *c_panel_cancel=(fltk::Button *)0;

fltk::Window* make_class_panel() {
  fltk::Window* w;
   {fltk::Window* o = class_panel = new fltk::Window(280, 164, "class");
    w = o;
    o->shortcut(0xff1b);
    o->begin();
     {fltk::CheckButton* o = c_public_button = new fltk::CheckButton(10, 11, 65, 22, "public");
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = c_name_input = new fltk::Input(10, 44, 260, 22, "name:");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = c_subclass_input = new fltk::Input(10, 89, 260, 21, "subclass of (text between : and {)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = c_panel_ok = new fltk::ReturnButton(100, 132, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = c_panel_cancel = new fltk::Button(190, 132, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window *namespace_panel=(fltk::Window *)0;

fltk::Input *namespace_input=(fltk::Input *)0;

fltk::ReturnButton *namespace_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *namespace_panel_cancel=(fltk::Button *)0;

fltk::Window* make_namespace_panel() {
  fltk::Window* w;
   {fltk::Window* o = namespace_panel = new fltk::Window(300, 120, "namespace");
    w = o;
    o->shortcut(0xff1b);
    o->begin();
     {fltk::Input* o = namespace_input = new fltk::Input(10, 21, 281, 20, "default is  \"fltk\", can be declared at the root or  imbricated into another\
 namespace");
      o->align(fltk::ALIGN_BOTTOM|fltk::ALIGN_LEFT|fltk::ALIGN_WRAP);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = namespace_panel_ok = new fltk::ReturnButton(120, 92, 80, 20, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = namespace_panel_cancel = new fltk::Button(210, 92, 80, 20, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->resizable(o);
  }
  return  w;
}

fltk::DoubleBufferWindow *comment_panel=(fltk::DoubleBufferWindow *)0;

static void cb_comment_panel(fltk::DoubleBufferWindow* o, void*) {
  o->hide();
}

fltk::MultiLineInput *comment_input=(fltk::MultiLineInput *)0;

fltk::ReturnButton *comment_panel_ok=(fltk::ReturnButton *)0;

fltk::Button *comment_panel_cancel=(fltk::Button *)0;

static void cb_comment_panel_cancel(fltk::Button*, void*) {
  comment_panel->hide();
}

fltk::LightButton *comment_in_source=(fltk::LightButton *)0;

fltk::LightButton *comment_in_header=(fltk::LightButton *)0;

fltk::PopupMenu *comment_predefined=(fltk::PopupMenu *)0;

fltk::Button *comment_load=(fltk::Button *)0;

fltk::DoubleBufferWindow* make_comment_panel() {
  fltk::DoubleBufferWindow* w;
   {fltk::DoubleBufferWindow* o = comment_panel = new fltk::DoubleBufferWindow(550, 318, "Comment Properties");
    w = o;
    o->type(241);
    o->labelsize(11);
    o->shortcut(0xff1b);
    o->callback((fltk::Callback*)cb_comment_panel);
    o->begin();
     {fltk::MultiLineInput* o = comment_input = new fltk::MultiLineInput(110, 10, 430, 265, "input");
      o->type(4);
      o->align(fltk::ALIGN_BOTTOM|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
      o->when(fltk::WHEN_ENTER_KEY_CHANGED|fltk::WHEN_RELEASE);
    }
     {fltk::Group* o = new fltk::Group(0, -1, 550, 318);
      o->labelsize(11);
      o->begin();
       {fltk::ReturnButton* o = comment_panel_ok = new fltk::ReturnButton(371, 286, 80, 21, "OK");
        o->shortcut(0xff0d);
        ((fltk::Window*)(o->parent()->parent()))->hotspot(o);
      }
       {fltk::Button* o = comment_panel_cancel = new fltk::Button(460, 286, 79, 21, "Cancel");
        o->shortcut(0xff1b);
        o->callback((fltk::Callback*)cb_comment_panel_cancel);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(110, 285, 244, 21);
        o->labelsize(11);
        fltk::Group::current()->resizable(o);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(7, 10, 103, 291);
      o->set_vertical();
      o->labelsize(11);
      o->begin();
       {fltk::LightButton* o = comment_in_source = new fltk::LightButton(0, 10, 90, 20, "In Source");
        o->labelsize(11);
        o->when(fltk::WHEN_NEVER);
        o->tooltip("Put the comment into the source (.cxx) file.");
      }
       {fltk::LightButton* o = comment_in_header = new fltk::LightButton(0, 40, 90, 20, "In Header");
        o->labelsize(11);
        o->when(fltk::WHEN_NEVER);
        o->tooltip("Put the comment into the header (.h) file.");
      }
       {fltk::PopupMenu* o = comment_predefined = new fltk::PopupMenu(0, 69, 90, 20, "Predefined");
        o->labelsize(11);
        o->textsize(11);
      }
       {fltk::Button* o = comment_load = new fltk::Button(0, 100, 90, 20, "Import...");
        o->labelsize(11);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 132, 93, 131);
        o->set_vertical();
        o->labelsize(11);
        fltk::Group::current()->resizable(o);
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
    o->end();
    o->size_range(320, 180);
    o->set_modal();
  }
  return  w;
}

fltk::DoubleBufferWindow *sourceview_panel=(fltk::DoubleBufferWindow *)0;

fltk::TabGroup *sv_tab=(fltk::TabGroup *)0;

CodeViewer *sv_source=(CodeViewer *)0;

CodeViewer *sv_header=(CodeViewer *)0;

fltk::LightButton *sv_autorefresh=(fltk::LightButton *)0;

fltk::LightButton *sv_autoposition=(fltk::LightButton *)0;

fltk::DoubleBufferWindow* make_sourceview() {
  fltk::DoubleBufferWindow* w;
   {fltk::DoubleBufferWindow* o = sourceview_panel = new fltk::DoubleBufferWindow(520, 483, "Code View");
    w = o;
    o->type(241);
    o->shortcut(0xff1b);
    o->callback((fltk::Callback*)toggle_sourceview_cb);
    o->begin();
     {fltk::TabGroup* o = sv_tab = new fltk::TabGroup(10, 10, 500, 433);
      o->selection_color((fltk::Color)4);
      o->labelcolor((fltk::Color)7);
      o->callback((fltk::Callback*)update_sourceview_position_cb);
      o->begin();
       {fltk::Group* o = new fltk::Group(0, 25, 500, 408, "Source");
        o->hide();
        o->begin();
         {CodeViewer* o = sv_source = new CodeViewer(10, 15, 480, 383);
          o->textfont(fltk::COURIER);
          o->textsize(11);
          fltk::Group::current()->resizable(o);
        }
        o->end();
        fltk::Group::current()->resizable(o);
      }
       {fltk::Group* o = new fltk::Group(0, 25, 500, 408, "Header");
        o->begin();
         {CodeViewer* o = sv_header = new CodeViewer(10, 15, 480, 383);
          o->textfont(fltk::COURIER);
          o->textsize(11);
          fltk::Group::current()->resizable(o);
        }
        o->end();
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
     {fltk::Group* o = new fltk::Group(10, 453, 500, 20);
      o->begin();
       {fltk::Button* o = new fltk::Button(0, 0, 61, 20, "Refresh");
        o->labelsize(11);
        o->callback((fltk::Callback*)update_sourceview_cb);
      }
       {fltk::LightButton* o = sv_autorefresh = new fltk::LightButton(66, 0, 91, 20, "Auto-Refresh");
        o->labelsize(11);
        o->callback((fltk::Callback*)update_sourceview_cb);
      }
       {fltk::LightButton* o = sv_autoposition = new fltk::LightButton(162, 0, 89, 20, "Auto-Position");
        o->labelsize(11);
      }
       {fltk::Button* o = new fltk::Button(450, 0, 50, 20, "Close");
        o->labelsize(11);
        o->callback((fltk::Callback*)toggle_sourceview_b_cb);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(255, 0, 190, 20);
        fltk::Group::current()->resizable(o);
      }
      o->end();
    }
    o->end();
  }
  return  w;
}
