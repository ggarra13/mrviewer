--------------------
./configure --prefix=/home/tonyo/projects/win_compile_3.5.5/packages/win32 --static
lun abr 28 14:42:37 ART 2014
=== ztest14575.c ===
extern int getchar();
int hello() {return getchar();}
===
i686-w64-mingw32-gcc -c ztest14575.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest14575.c ===
int foo() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 ztest14575.c

Building static library libz.a version 1.2.8 with i686-w64-mingw32-gcc.

=== ztest14575.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14575.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest14575.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
i686-w64-mingw32-gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest14575 ztest14575.c
Checking for strerror... Yes.

=== ztest14575.c ===
#include <unistd.h>
int main() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14575.c
Checking for unistd.h... Yes.

=== ztest14575.c ===
#include <stdarg.h>
int main() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14575.c
Checking for stdarg.h... Yes.

=== ztest14575.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14575.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest14575.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
i686-w64-mingw32-gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest14575 ztest14575.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest14575.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14575.c
Checking for return value of vsnprintf()... Yes.

=== ztest14575.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14575.c
ztest14575.c:6:1: warning: visibility attribute not supported in this configuration; ignored [-Wattributes]Checking for attribute(visibility) support... No.

ALL = static all64
AR = i686-w64-mingw32-ar
ARFLAGS = rc
CC = i686-w64-mingw32-gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1
CPP = i686-w64-mingw32-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = i686-w64-mingw32-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = i686-w64-mingw32-ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/tonyo/projects/win_compile_3.5.5/packages/win32
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/media/Linux/code/lib/x86-mingw32-build-1.0/ --shared
lun abr 28 14:43:41 ART 2014
=== ztest14766.c ===
extern int getchar();
int hello() {return getchar();}
===
i686-w64-mingw32-gcc -c ztest14766.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest14766.c ===
int foo() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 ztest14766.c

Checking for shared library support...
=== ztest14766.c ===
extern int getchar();
int hello() {return getchar();}
===
i686-w64-mingw32-gcc -w -c -O3 -fPIC ztest14766.c
i686-w64-mingw32-gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map -O3 -fPIC -o ztest14766.so ztest14766.o
Building shared library libz.so.1.2.8 with i686-w64-mingw32-gcc.

=== ztest14766.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14766.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest14766.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
i686-w64-mingw32-gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest14766 ztest14766.c
Checking for strerror... Yes.

=== ztest14766.c ===
#include <unistd.h>
int main() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14766.c
Checking for unistd.h... Yes.

=== ztest14766.c ===
#include <stdarg.h>
int main() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14766.c
Checking for stdarg.h... Yes.

=== ztest14766.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14766.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest14766.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
i686-w64-mingw32-gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest14766 ztest14766.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest14766.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14766.c
Checking for return value of vsnprintf()... Yes.

=== ztest14766.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest14766.c
ztest14766.c:6:1: warning: visibility attribute not supported in this configuration; ignored [-Wattributes]Checking for attribute(visibility) support... No.

ALL = static shared all64
AR = i686-w64-mingw32-ar
ARFLAGS = rc
CC = i686-w64-mingw32-gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1
CPP = i686-w64-mingw32-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = i686-w64-mingw32-gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = i686-w64-mingw32-ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.8
STATICLIB = libz.a
TEST = all teststatic testshared test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /media/Linux/code/lib/x86-mingw32-build-1.0/
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/media/Linux/code/lib/x86-mingw32-build-1.0/ --static
lun abr 28 14:44:13 ART 2014
=== ztest15047.c ===
extern int getchar();
int hello() {return getchar();}
===
i686-w64-mingw32-gcc -c ztest15047.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest15047.c ===
int foo() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 ztest15047.c

Building static library libz.a version 1.2.8 with i686-w64-mingw32-gcc.

=== ztest15047.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15047.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest15047.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
i686-w64-mingw32-gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest15047 ztest15047.c
Checking for strerror... Yes.

=== ztest15047.c ===
#include <unistd.h>
int main() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15047.c
Checking for unistd.h... Yes.

=== ztest15047.c ===
#include <stdarg.h>
int main() { return 0; }
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15047.c
Checking for stdarg.h... Yes.

=== ztest15047.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15047.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest15047.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
i686-w64-mingw32-gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest15047 ztest15047.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest15047.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15047.c
Checking for return value of vsnprintf()... Yes.

=== ztest15047.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
i686-w64-mingw32-gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15047.c
ztest15047.c:6:1: warning: visibility attribute not supported in this configuration; ignored [-Wattributes]Checking for attribute(visibility) support... No.

ALL = static all64
AR = i686-w64-mingw32-ar
ARFLAGS = rc
CC = i686-w64-mingw32-gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1
CPP = i686-w64-mingw32-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = i686-w64-mingw32-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = i686-w64-mingw32-ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /media/Linux/code/lib/x86-mingw32-build-1.0/
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure
sáb oct 18 14:45:58 ART 2014
Checking for gcc...
=== ztest8928.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest8928.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest8928.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest8928.c

Checking for shared library support...
=== ztest8928.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest8928.c
gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map -O3 -fPIC -o ztest8928.so ztest8928.o
Building shared library libz.so.1.2.8 with gcc.

=== ztest8928.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8928.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest8928.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest8928 ztest8928.c
Checking for strerror... Yes.

=== ztest8928.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8928.c
Checking for unistd.h... Yes.

=== ztest8928.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8928.c
Checking for stdarg.h... Yes.

=== ztest8928.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8928.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest8928.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest8928 ztest8928.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest8928.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8928.c
Checking for return value of vsnprintf()... Yes.

=== ztest8928.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8928.c
Checking for attribute(visibility) support... Yes.

ALL = static shared all64
AR = ar
ARFLAGS = rc
CC = gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.8
STATICLIB = libz.a
TEST = all teststatic testshared test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --enable-shared
sáb oct 18 14:46:04 ART 2014
Checking for gcc...
=== ztest9038.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest9038.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest9038.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest9038.c

Checking for shared library support...
=== ztest9038.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest9038.c
gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map -O3 -fPIC -o ztest9038.so ztest9038.o
Building shared library libz.so.1.2.8 with gcc.

=== ztest9038.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9038.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest9038.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest9038 ztest9038.c
Checking for strerror... Yes.

=== ztest9038.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9038.c
Checking for unistd.h... Yes.

=== ztest9038.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9038.c
Checking for stdarg.h... Yes.

=== ztest9038.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9038.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest9038.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest9038 ztest9038.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest9038.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9038.c
Checking for return value of vsnprintf()... Yes.

=== ztest9038.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9038.c
Checking for attribute(visibility) support... Yes.

ALL = static shared all64
AR = ar
ARFLAGS = rc
CC = gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.8
STATICLIB = libz.a
TEST = all teststatic testshared test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Linux
--------------------


