
#include <string>
#include <vector>

#include <tinyxml2.h>

namespace ACES {

enum TransformStatus
{
kPreview,
kApplied,
kLastStatus
};

/** 
 * Transform:  A class to store the name of a transform and its status
 * 
 */
class Transform
{
  public:
    Transform() : name(""), status( kLastStatus ) {}

    Transform( std::string n, TransformStatus t) :
    name( n ),
    status( t )
    {}

    ~Transform() {}

    Transform( const Transform& b ) :
    name( b.name ),
    status( b.status )
    {
    }

  public:
    std::string     name;
    TransformStatus status;
};


/**
 * ACESclip:  class encompasing an ACESclip.xml file
 *
 */

class ACESclipWriter
{
    using namespace tinyxml2;

  protected:
/**
 * Look Modification Transforms is a list
 */
    typedef std::vector< Transform > LMTransforms;

  protected:
    std::string date_time( const time_t& t ) const;
    void set_id();
    void set_status( TransformStatus s );

  public:
    ACESclipWriter();

    void info( std::string application = "ACESclipLib",
               std::string version = kLibVersion,
               std::string comment = "" );

    void clip_id( std::string clip_name,
                  std::string media_id,
                  time_t clip_date = time(0) );

    void config( time_t xml_date = time(0) );

    void ITL_start();

    void add_IDT( const std::string name, 
                  TransformStatus status = kPreview );

    void ITL_end( const std::string it = "inputTransformID" );

    void PTL_start();

    void add_LMT( const std::string name, 
                  TransformStatus status = kPreview );

    void add_RRT( const std::string name, 
                  TransformStatus status = kPreview );

    void add_ODT( const std::string name, 
                  TransformStatus status = kPreview );

    void PTL_end( const std::string t = "CombinedLMT_RRT_ODT" );

    bool save( const char* filename );

  protected:
    XMLDocument doc;
    XMLElement* element;
    XMLNode* root, *root2, *root3;
    LMTransforms LMT;
    Transform IDT, RRT, ODT;
    unsigned id;
};


}  // namespace ACES


