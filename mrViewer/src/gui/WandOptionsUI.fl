# data file for the Fltk User Interface Designer (fluid)
version 1,0400
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {\#include <iostream>} {private local
}

decl {\#include <core/mrvI8N.h>} {public local
}

decl {\#include <gui/mrvChoice.h>} {public local
}

decl {\#include <gui/mrvIO.h>} {public local
}

decl {\#include <core/mrvImageOpts.h>} {public local
}

decl {\#include <gui/mrvMainWindow.h>} {public local
}

decl {\#include <MagickWand/MagickWand.h>} {public local
}

decl {\#include <string>} {public local
}

decl {\#include <mrViewer.h>} {public local
}

class WandOptionsUI {open : {public mrv::WandOpts}
} {
  decl {std::string pixel_type;} {public local
  }
  Function {make_window(bool ocio, bool aces, bool all_layers)} {open
  } {
    Fl_Window uiMain {
      label {ImageMagick Saving} open
      xywh {193 251 340 330} type Double resizable modal noborder visible
    } {
      Fl_Group {} {open
        xywh {0 0 340 330} box UP_BOX
      } {
        Fl_Group {} {
          label {Image Options} open
          xywh {35 29 272 249} box UP_BOX
        } {
          Fl_Choice uiPixelType {
            label {Pixel Format}
            callback {pixel_type = o->child(o->value())->label();}
            xywh {175 230 90 25} down_box BORDER_BOX
            class {mrv::Choice}
          } {
            MenuItem {} {
              label Char
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Short
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Integer
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Float
              xywh {5 5 100 20}
            }
          }
          Fl_Light_Button uiAllLayers {
            label {All Layers}
            xywh {86 116 155 35}
            code0 {o->value( all_layers );}
          }
          Fl_Light_Button uiACESmetadata {
            label {ACES metadata}
            xywh {86 61 155 35}
            code0 {o->value( aces );}
          }
          Fl_Light_Button uiOCIOColorSpace {
            label {OCIO Color Space}
            tooltip {Saves out OCIO's input color space in the metadata of the image.} xywh {85 170 155 35}
            code0 {o->value( ocio );}
          }
        }
        Fl_Button {} {
          label OK
          user_data this user_data_type {WandOptionsUI*}
          callback {v->active(true);
v->uiMain->hide();}
          xywh {85 288 75 27}
        }
        Fl_Button {} {
          label Cancel
          user_data this user_data_type {WandOptionsUI*}
          callback {v->active( false );
v->uiMain->hide();}
          xywh {165 288 80 27}
        }
      }
    }
  }
  Function {convert()} {open
  } {
    code {if ( pixel_type == "" || pixel_type == _("Char") ) _pixel_type = CharPixel;
else if ( pixel_type == _("Float") ) _pixel_type = FloatPixel;
else if ( pixel_type == _("Short") ) _pixel_type = ShortPixel;
else if ( pixel_type == _("Integer") ) _pixel_type = LongPixel;
_ACESmetadata = uiACESmetadata->value();
_OCIOColorSpace = uiOCIOColorSpace->value();
_all_layers = uiAllLayers->value();} {}
  }
  Function {WandOptionsUI(const ViewerUI* main, bool ocio, bool aces, bool all_layers) : mrv::WandOpts(ocio, aces, all_layers)} {open
  } {
    code {Fl_Window* w = make_window(ocio, aces, all_layers);
      w->set_modal();
      w->show();
      while ( w->visible() )
      {
	Fl::check();
      }
      if ( w->active() ) convert();} {selected
    }
  }
}
