# data file for the FLTK User Interface Designer (FLUID)
version 1.04
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
decl {\#include "gui/mrvIO.h"} {public
} 

decl {\#include "core/mrvI8N.h"} {public
} 

decl {\#include "gui/mrvImageView.h"} {public
} 

decl {\#include "gui/mrvMainWindow.h"} { public
}

decl {\#include "gui/mrvStereoWindow.h"} {selected public
} 

decl {\#include "mrViewer.h"} {public
} 

class StereoUI {open
  } {
    decl {ViewerUI* main_;} {}
    Function {main()} {return_type {ViewerUI*}
    } {
      code {return main_;} {}
    }
    Function {make_window( ViewerUI* main )} {open
    } {
      {Fl_Window} uiMain {
        label {3D Stereo Options}
        user_data this user_data_type {StereoUI*}
        callback {v->main()->uiView->send_network( "StereoOptions 0" );
o->hide();}
        xywh {757 727 280 160} resizable
        extra_code {main_ = main;
o->main( main );}
        class {mrv::StereoWindow} visible
      } {
        {Fl_Choice} uiStereoInput {
          label Input
          user_data main user_data_type {ViewerUI*}
          callback {int x = o->value(); 
mrv::CMedia::StereoInput in = mrv::CMedia::to_stereo_input( x ); 
v->uiView->stereo_input( in );}
          tooltip {Select how stereo is encoded in the image.  It can be as separate layers (using a letter or view prefix), as Top/Bottom in the same image or as Left/Right in the same image.}
          xywh {80 60 175 25}
          extra_code {mrv::media fg = main->uiView->foreground();

if ( fg )
{
mrv::CMedia* img = fg->image();
mrv::CMedia::StereoInput in = img->stereo_input();
int x = mrv::CMedia::from_stereo_input( in );
o->value( x ); 
}}
        } {
          {MenuItem} {} {
            label {Separate layers}
            }
          {MenuItem} {} {
            label {Top/bottom}
            }
          {MenuItem} {} {
            label {Left/right}
            }
        }
        {Fl_Choice} uiStereoOutput {
          label Output
          user_data main user_data_type {ViewerUI*}
          callback {int x = o->value(); 
mrv::CMedia::StereoOutput out = mrv::CMedia::to_stereo_output( x ); 
v->uiView->stereo_output( out );}
          tooltip {Select how to view the stereo images.  You can select no stereo viewing, a view of the stereo pair, top/bottom (and viceversa), left/right (and viceversa), interlaced rows or columns, checkerboard pattern, red/cyan glasses (and viceversa). }
          xywh {80 100 175 25}
          extra_code {mrv::media fg = main->uiView->foreground();

if ( fg )
{
mrv::CMedia* img = fg->image();
mrv::CMedia::StereoOutput out = img->stereo_output();
int x = mrv::CMedia::from_stereo_output( out );
o->value( x ); 
}}
        } {
          {MenuItem} {} {
            label {No Stereo Output}
            }
          {MenuItem} {} {
            label {Left view}
            }
          {MenuItem} {} {
            label {Right view}
            }
          {MenuItem} uiStereoOpenGL {
            label {Stereo OpenGL}
            
            extra_code {if ( main->uiView->can_do( FL_STEREO ) )
  uiStereoOpenGL->activate();
else
  uiStereoOpenGL->deactivate();}
          }
          {MenuItem} {} {
            label {Top/bottom}
            }
          {MenuItem} {} {
            label {Bottom/top}
            }
          {MenuItem} {} {
            label {Left/right}
            }
          {MenuItem} {} {
            label {Right/left}
            }
          {MenuItem} {} {
            label {Even/odd rows}
            }
          {MenuItem} {} {
            label {Even/odd columns}
            }
          {MenuItem} {} {
            label {Checkerboard pattern}
            }
          {MenuItem} {} {
            label {Red/cyan glasses}
            }
          {MenuItem} {} {
            label {Cyan/red glasses}
            }
        }
        {Fl_Light_Button} uiVR360Sphere {
          label {VR 360 Sphere}
          user_data main user_data_type {ViewerUI*}
          callback {mrv::ImageView::VRType t = mrv::ImageView::kNoVR;
if ( o->value() ) {
  t = mrv::ImageView::kVRSphericalMap;
  uiVR360Cube->value(0);
}
v->uiView->vr( t );
v->uiView->redraw();}
          tooltip {Toggle VR 360 (Panoramic) view of the image.   The image is wrapped around a sphere when this is active.}
          xywh {10 20 135 30}
        }
        {Fl_Light_Button} uiVR360Cube {
          label {VR 360 Cube}
          user_data main user_data_type {ViewerUI*}
          callback {mrv::ImageView::VRType t = mrv::ImageView::kNoVR;
if ( o->value() ) {
  t = mrv::ImageView::kVRCubeMap;
  uiVR360Sphere->value(0);
}
v->uiView->vr( t );
v->uiView->redraw();}
          tooltip {Toggle VR 360 (Panoramic) view of the image.   The image, which should be composed of 6 images, is wrapped around a cube when this is active.}
          xywh {150 20 105 30}
        }
      }
    }
    Function {StereoUI( ViewerUI* main )} {open
    } {
      code {
      Fl_Group::current( main->uiMain );
      make_window(main);
      Fl_Group::current(0);} {}
    }
    Function {~StereoUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {refresh()} {open
    } {
      code {ViewerUI* m = main();

if ( m && m->uiView )
{
	mrv::media fg = m->uiView->foreground();

	if ( fg )
	{
		mrv::CMedia* img = fg->image();
		mrv::CMedia::StereoInput in = img->stereo_input();
		int x = mrv::CMedia::from_stereo_input( in );
		uiStereoInput->value( x ); 

		mrv::CMedia::StereoOutput out = img->stereo_output();
		x = mrv::CMedia::from_stereo_output( out );
		uiStereoOutput->value( x );
	}

}} {}
    }
}

