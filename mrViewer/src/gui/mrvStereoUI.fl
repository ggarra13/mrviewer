# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cxx}
decl {\#include "core/mrvFrame.h"} {public local
}

decl {\#include "gui/mrvIO.h"} {public local
}

decl {\#include "core/mrvI8N.h"} {public local
}

decl {\#include "gui/mrvImageView.h"} {public local
}

decl {\#include "gui/mrvMainWindow.h"} {public local
}

decl {\#include "gui/mrvStereoWindow.h"} {public local
}

decl {\#include "mrViewer.h"} {public local
}

class StereoUI {open
} {
  decl {ViewerUI* main_;} {private local
  }
  Function {main()} {return_type {ViewerUI*}
  } {
    code {return main_;} {}
  }
  Function {make_window( ViewerUI* main )} {open
  } {
    Fl_Window uiMain {
      label {3D Stereo Options}
      user_data this user_data_type {StereoUI*}
      callback {v->main()->uiView->send_network( "StereoOptions 0" );
o->hide();} open
      xywh {866 456 280 160} type Double resizable
      code0 {main_ = main;
o->main( main );}
      class {mrv::StereoWindow} non_modal visible
    } {
      Fl_Group {} {open selected
        xywh {0 0 280 160} box UP_BOX
      } {
        Fl_Choice uiStereoInput {
          label Input
          user_data main user_data_type {ViewerUI*}
          callback {int x = o->value(); 
mrv::CMedia::StereoInput in = mrv::CMedia::to_stereo_input( x ); 
v->uiView->stereo_input( in );} open
          tooltip {Select how stereo is encoded in the image.  It can be as separate layers (using a letter or view prefix), as Top/Bottom in the same image or as Left/Right in the same image.} xywh {80 60 175 25} down_box BORDER_BOX
          code0 {mrv::media fg = main->uiView->foreground();

if ( fg )
{
mrv::CMedia* img = fg->image();
mrv::CMedia::StereoInput in = img->stereo_input();
int x = mrv::CMedia::from_stereo_input( in );
o->value( x ); 
}}
        } {
          MenuItem {} {
            label {Separate layers}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Top/bottom}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Left/right}
            xywh {0 0 100 20}
          }
        }
        Fl_Choice uiStereoOutput {
          label Output
          user_data main user_data_type {ViewerUI*}
          callback {int x = o->value(); 
mrv::CMedia::StereoOutput out = mrv::CMedia::to_stereo_output( x ); 
v->uiView->stereo_output( out );} open
          tooltip {Select how to view the stereo images.  You can select no stereo viewing, a view of the stereo pair, top/bottom (and viceversa), left/right (and viceversa), interlaced rows or columns, checkerboard pattern, red/cyan glasses (and viceversa).} xywh {80 100 175 30} down_box BORDER_BOX
          code0 {mrv::media fg = main->uiView->foreground();

if ( fg )
{
mrv::CMedia* img = fg->image();
mrv::CMedia::StereoOutput out = img->stereo_output();
int x = mrv::CMedia::from_stereo_output( out );
o->value( x ); 
}}
        } {
          MenuItem {} {
            label {No Stereo Output}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Left view}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Right view}
            xywh {0 0 100 20}
          }
          MenuItem uiStereoOpenGL {
            label {Stereo OpenGL}
            xywh {0 0 100 20}
            code0 {if ( main->uiView->can_do( FL_STEREO ) )
  uiStereoOpenGL->activate();
else
  uiStereoOpenGL->deactivate();}
          }
          MenuItem {} {
            label {Top/bottom}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Bottom/top}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Left/right}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Right/left}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Even/odd rows}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Even/odd columns}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Checkerboard pattern}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Red/cyan glasses}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Cyan/red glasses}
            xywh {0 0 100 20}
          }
        }
        Fl_Light_Button uiVR360Sphere {
          label {VR 360 Sphere}
          user_data main user_data_type {ViewerUI*}
          callback {mrv::ImageView::VRType t = mrv::ImageView::kNoVR;
if ( o->value() ) {
  t = mrv::ImageView::kVRSphericalMap;
  uiVR360Cube->value(0);
}
v->uiView->vr( t );
v->uiView->redraw();}
          tooltip {Toggle VR 360 (Panoramic) view of the image.   The image is wrapped around a sphere when this is active.} xywh {15 15 135 40}
        }
        Fl_Light_Button uiVR360Cube {
          label {VR 360 Cube}
          user_data main user_data_type {ViewerUI*}
          callback {mrv::ImageView::VRType t = mrv::ImageView::kNoVR;
if ( o->value() ) {
  t = mrv::ImageView::kVRCubeMap;
  uiVR360Sphere->value(0);
}
v->uiView->vr( t );
v->uiView->redraw();}
          tooltip {Toggle VR 360 (Panoramic) view of the image.   The image, which should be composed of 6 images, is wrapped around a cube when this is active.} xywh {155 15 110 40}
        }
      }
    }
  }
  Function {StereoUI( ViewerUI* main )} {open
  } {
    code {Fl_Group::current( main->uiMain );
      make_window(main);
      Fl_Group::current(0);} {}
  }
  Function {~StereoUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
  Function {refresh()} {open
  } {
    code {ViewerUI* m = main();

if ( m && m->uiView )
{
	mrv::media fg = m->uiView->foreground();

	if ( fg )
	{
		mrv::CMedia* img = fg->image();
		mrv::CMedia::StereoInput in = img->stereo_input();
		int x = mrv::CMedia::from_stereo_input( in );
		uiStereoInput->value( x ); 

		mrv::CMedia::StereoOutput out = img->stereo_output();
		x = mrv::CMedia::from_stereo_output( out );
		uiStereoOutput->value( x );
	}

}} {}
  }
}
