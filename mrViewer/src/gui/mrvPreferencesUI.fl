# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cxx}
decl {\#include "string"} {public local
}

decl {\#include "core/mrvI8N.h"} {private local
}

decl {\#include "gui/mrvPreferences.h"} {selected public global
}

decl {\#include "core/mrvAudioEngine.h"} {private local
}

decl {\#include "core/mrvMath.h"} {private local
}

decl {\#include "core/exrImage.h"} {private local
}

decl {\#include "core/aviImage.h"} {private local
}

decl {\#include "core/mrvColorOps.h"} {public local
}

decl {\#include "gui/mrvMainWindow.h"} {private local
}

decl {\#include "gui/mrvActionWindow.h"} {public global
}

decl {\#include "gui/mrvImageView.h"} {private local
}

decl {\#include "gui/mrvBrowser.h"} {private local
}

decl {\#include "gui/mrvPreferencesBrowser.h"} {private local
}

decl {\#include "gui/mrvOCIOBrowser.h"} {public global
}

decl {\#include "gui/mrvFileRequester.h"} {private local
}

decl {\#include "gui/mrvPopupMenu.h"} {public local
}

decl {\#include "gui/mrvColorOps.h"} {private local
}

decl {\#include "gui/mrvValueInput.h"} {public local
}

decl {\#include "gui/mrvLogDisplay.h"} {private local
}

decl {\#include "icons/icons.c"} {private local
}

decl {\#include "make_ocio_chooser.h"} {public global
}

decl {\#include "mrViewer.h"} {public global
}

decl {\#include "FL/Fl_Color_Chooser.H"} {private local
}

decl {\#include "FL/fl_ask.H"} {private local
}

decl {\#include "FL/Fl.H"} {private local
}

declblock {\#ifdef _WIN32} {after {\#endif}
} {
  decl {\#define unsetenv} {public local
  }
}

class PreferencesUI {open
} {
  Function {make_window(ViewerUI* m)} {open private
  } {
    Fl_Window uiMain {
      label Preferences open
      xywh {1219 333 700 450} type Double resizable
      code0 {o->main(m);}
      class {mrv::ActionWindow} visible
    } {
      Fl_Wizard uiWizard {
        label Settings
        xywh {218 24 450 389}
      } {
        Fl_Group {} {
          label {User Interface} open
          xywh {13 22 423 350} box EMBOSSED_BOX align 5
        } {
          Fl_Group {} {
            label {Window Behavior} open
            xywh {9 44 410 100} box ROUNDED_BOX
          } {
            Fl_Check_Button uiPrefsAlwaysOnTop {
              label {Always on Top}
              tooltip {When selected, mrViewer's window will always show up on top of other windows on the desktop.} xywh {24 14 19 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsSingleInstance {
              label {Single Instance}
              tooltip {When selected, only a single mrViewer instance is allowed.
If you try to open several mrViewers with different images, all these images will be sent to the already open mrViewer.} xywh {24 40 20 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsAutoFitImage {
              label {Auto Refit Image}
              tooltip {When selected, mrViewer will apply a fit image operation on each video played.  This effectly means the video will be resized automatically based on the size of the window.} xywh {24 67 20 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Group uiPrefsOpenMode {
              xywh {197 9 150 81} box UP_BOX
            } {
              Fl_Round_Button {} {
                label Normal
                tooltip {When selected, mrViewer will resize its window to the first image.} xywh {8 6 19 20} box ROUND_UP_BOX down_box ROUND_DOWN_BOX value 1 align 8
              }
              Fl_Round_Button {} {
                label Fullscreen
                tooltip {When selected, mrViewer will start in full screen mode.} xywh {8 31 19 20} box ROUND_UP_BOX down_box ROUND_DOWN_BOX align 8
              }
              Fl_Round_Button {} {
                label Presentation
                tooltip {When selected, mrViewer will start in presentation mode.} xywh {8 56 19 20} box ROUND_UP_BOX down_box ROUND_DOWN_BOX align 8
              }
            }
          }
          Fl_Group {} {
            label {UI Elements} open
            xywh {9 164 410 155} box ROUNDED_BOX
          } {
            Fl_Check_Button uiPrefsTopbar {
              label Topbar
              tooltip {When selected, mrViewer will start with its channel, gain, gamma toolbar visible.} xywh {5 5 25 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsPixelToolbar {
              label {Pixel Toolbar}
              tooltip {When selected, mrViewer will start with the pixel toolbar shown.} xywh {5 35 25 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsTimeline {
              label Timeline
              tooltip {When selected, mrViewer will start with the timeline shown.} xywh {5 64 25 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsReelList {
              label {Reel List}
              tooltip {When selected, mrViewer will start with the reel list already open.} xywh {140 5 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHistogram {
              label Histogram
              tooltip {When selected, mrViewer will start with the histogram already open.} xywh {280 35 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsVectorscope {
              label Vectorscope
              tooltip {When selected, mrViewer will start with the vectorscope already open.} xywh {280 64 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsImageInfo {
              label {Media Info}
              tooltip {When selected, mrViewer will start with the media information window already open.} xywh {140 35 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsColorArea {
              label {Color Area}
              tooltip {When selected, mrViewer will start with the color area window already open.} xywh {140 64 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsEDLEdit {
              label {EDL Edit}
              tooltip {When selected, mrViewer will start with the EDL Edit window already open.} xywh {280 8 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsStereoOptions {
              label {Stereo 3D Options}
              tooltip {When selected, mrViewer will start with the stereo options window already open.} xywh {6 92 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsPaintTools {
              label {Action Tools}
              tooltip {When selected, mrViewer will start with the action tools already showing.} xywh {6 120 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsWaveform {
              label Waveform
              tooltip {When selected, mrViewer will start with the waveform already open.} xywh {280 90 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
          }
        }
        Fl_Group {} {
          label {View Window}
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Defaults
            xywh {13 32 394 135} box ROUNDED_BOX
          } {
            Fl_Value_Input uiPrefsViewGain {
              label Gain
              tooltip {Sets the default gain when mrViewer starts.} xywh {90 10 80 25} minimum 0.001 maximum 64 step 0.01 value 1
            }
            Fl_Value_Input uiPrefsViewGamma {
              label Gamma
              tooltip {Sets the default gamma when mrViewer starts.} xywh {280 10 60 25} minimum 0.01 maximum 4 step 0.01 value 1
            }
            Fl_Choice uiPrefsCropArea {
              label Crop
              user_data this user_data_type {PreferencesUI*}
              tooltip {Allows you to select a standard cropping area around image.} xywh {15 58 155 25} box THIN_DOWN_BOX down_box BORDER_BOX align 1
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {0.00 None}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.00 Square}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.19 Movietone}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.37 Academy (Full Frame)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.50 Still Photo}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.56 STV - HDTV (14:9)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.66 European Widescreen}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.77 HDTV (16:9)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1.85 Widescreen (3-perf)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {2.10 VistaVision}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {2.20 70mm}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {2.35 CinemaScope (old 2.35)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {2.39 Panavision (new 2.35)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {4.00 Polyvision}
                xywh {0 0 100 20}
              }
            }
            Fl_Check_Button uiPrefsViewPixelRatio {
              label {Compensate Pixel Ratio}
              tooltip {When mrViewer starts, the pixel aspect ratio compensation will be active by default.} xywh {198 55 20 22} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsViewLut {
              label {Lut Active}
              user_data this user_data_type {PreferencesUI*}
              tooltip {When mrViewer starts, the 3D Lut will be active.} xywh {198 80 20 22} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsSafeAreas {
              label {Safe Areas}
              user_data this user_data_type {PreferencesUI*}
              tooltip {When mrViewer starts, the safe area display will be active by default.} xywh {198 107 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsViewDisplayWindow {
              label {Display Window}
              tooltip {When mrViewer starts, the display window will be shown when appropiate.} xywh {20 88 20 22} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsViewDataWindow {
              label {Data Window}
              tooltip {When mrViewer starts, the data window will be shown when appropiate as a dotted line.} xywh {20 108 20 22} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
          }
          Fl_Group uiPrefsHud {
            label HUD
            user_data this user_data_type {PreferencesUI*}
            tooltip {This area specifies which elements should be shown as a HUD overlay on the view screen.} xywh {15 187 397 122} box UP_BOX
          } {
            Fl_Check_Button uiPrefsHudFilename {
              label Filename
              user_data this user_data_type {PreferencesUI*}
              xywh {152 87 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudDirectory {
              label Directory
              user_data this user_data_type {PreferencesUI*}
              xywh {152 61 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudFrame {
              label Frame
              user_data this user_data_type {PreferencesUI*}
              xywh {16 35 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudFrameRange {
              label {Frame Range}
              user_data this user_data_type {PreferencesUI*}
              xywh {15 62 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudResolution {
              label Resolution
              user_data this user_data_type {PreferencesUI*}
              xywh {152 10 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudFPS {
              label FPS
              user_data this user_data_type {PreferencesUI*}
              xywh {16 10 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudAttributes {
              label Attributes
              user_data this user_data_type {PreferencesUI*}
              xywh {272 11 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudAVDifference {
              label {VA Difference}
              user_data this user_data_type {PreferencesUI*}
              xywh {152 35 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudTimecode {
              label Timecode
              user_data this user_data_type {PreferencesUI*}
              xywh {15 87 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudWipeMode {
              label {Wipe Mode}
              user_data this user_data_type {PreferencesUI*}
              xywh {273 36 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
            Fl_Check_Button uiPrefsHudMemory {
              label Memory
              user_data this user_data_type {PreferencesUI*}
              xywh {273 62 20 20} box UP_BOX down_box DOWN_BOX align 8
            }
          }
        }
        Fl_Group {} {
          label Colors
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label UI open
            xywh {12 24 383 108} box ROUNDED_BOX
          } {
            Fl_Button uiPrefsUIBG {
              label Background
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Background Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();}
              tooltip {Selects the background of UI.} xywh {141 18 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
            Fl_Button uiPrefsUIText {
              label Text
              user_data this user_data_type {PreferencesUI*}
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();
v->refresh();}
              tooltip {Selects the color of text in widgets.} xywh {141 63 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
            Fl_Button uiPrefsUISelection {
              label Selection
              user_data this user_data_type {PreferencesUI*}
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Selection Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();
v->refresh();}
              tooltip {Selects the color of the selection rectangle in widgets.} xywh {256 18 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
            Fl_Button uiPrefsUISelectionText {
              label {Selected Text}
              user_data this user_data_type {PreferencesUI*}
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();
v->refresh();}
              tooltip {Selects the color of text in widgets.} xywh {256 63 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
          }
          Fl_Group {} {
            label View
            xywh {12 174 383 108} box ROUNDED_BOX
          } {
            Fl_Button uiPrefsViewBG {
              label Background
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Background Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();}
              tooltip {Selects the background color of areas outside the current image.} xywh {163 30 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
            Fl_Button uiPrefsViewTextOverlay {
              label {Text Overlay}
              user_data this user_data_type {PreferencesUI*}
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();
v->refresh();}
              tooltip {Selects the color of text overlays printed over the current image.} xywh {163 60 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
            Fl_Button uiPrefsViewSelection {
              label Selection
              user_data this user_data_type {PreferencesUI*}
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick View Selection Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();
v->refresh();}
              tooltip {Selects the color of the selection rectangle over the current image.} xywh {278 30 25 25} box EMBOSSED_BOX labelsize 11 align 4
            }
            Fl_Button uiPrefsViewHud {
              label HUD
              user_data this user_data_type {PreferencesUI*}
              callback {uchar r, g, b;
Fl::get_color(o->color(),r,g,b);
if (!fl_color_chooser("Pick HUD Color", r,g,b)) return;
o->color( mrv::set_color( r, g, b ) );
o->redraw();
v->refresh();}
              tooltip {Selects the color of HUD overlays.} xywh {278 60 25 25} box EMBOSSED_BOX align 4
            }
          }
        }
        Fl_Group {} {
          label {File Requester}
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Check_Button uiPrefsFileReqFolder {
            label {Single Click to Travel Drawers}
            xywh {60 35 25 25} box UP_BOX down_box DOWN_BOX
          }
          Fl_Check_Button uiPrefsFileReqThumbnails {
            label {Thumbnails Active}
            xywh {61 59 25 25} box UP_BOX down_box DOWN_BOX
          }
          Fl_Check_Button uiPrefsNativeFileChooser {
            label {Use Native File Chooser on Windows}
            tooltip {On Windows, if selected, the native file chooser will be used.  If unselected, mrViewer's standard file chooser will be used.} xywh {61 117 25 25} box UP_BOX down_box DOWN_BOX
          }
        }
        Fl_Group {} {
          label Positioning
          xywh {13 22 423 350} box EMBOSSED_BOX hide
        } {
          Fl_Group {} {open
            xywh {22 36 355 40} box ROUNDED_BOX
          } {
            Fl_Check_Button uiWindowFixedPosition {
              label {Fixed Position}
              tooltip {When this option is set, mrViewer will open in the position you set here (except if the window goes out of the Desktop).} xywh {25 15 100 20} box UP_BOX down_box DOWN_BOX
            }
            Fl_Value_Input uiWindowXPosition {
              label {X:}
              xywh {185 10 60 25}
            }
            Fl_Value_Input uiWindowYPosition {
              label {Y:}
              xywh {265 10 60 25}
            }
          }
          Fl_Group {} {open
            xywh {20 106 355 45} box ROUNDED_BOX
          } {
            Fl_Check_Button uiWindowFixedSize {
              label {Fixed Size}
              tooltip {When this option is on, mrViewer will always open to the size you set in W and H.} xywh {30 15 100 20} box UP_BOX down_box DOWN_BOX
            }
            Fl_Value_Input uiWindowXSize {
              label {W:}
              xywh {190 10 60 25} minimum 640 maximum 4096 step 1 value 640
            }
            Fl_Value_Input uiWindowYSize {
              label {H:}
              xywh {270 10 60 25} minimum 480 maximum 3680 step 1 value 480
            }
          }
          Fl_Button {} {
            label {Take Current Window Values}
            user_data m user_data_type {ViewerUI*}
            callback {uiWindowXPosition->value( v->uiMain->x() );
uiWindowYPosition->value( v->uiMain->y() );
uiWindowXSize->value( v->uiMain->w() );
uiWindowYSize->value( v->uiMain->h() );}
            xywh {20 176 355 40}
          }
        }
        Fl_Group Playback {
          label Playback
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Defaults open
            xywh {44 25 315 200} box ROUNDED_BOX align 5
          } {
            Fl_Check_Button uiPrefsAutoPlayback {
              label {Auto Playback}
              tooltip {Start Playback when opening files.} xywh {115 20 20 25} box UP_BOX down_box DOWN_BOX align 4
            }
            Fl_Group {} {open
              xywh {20 55 270 100} box ROUNDED_BOX
            } {
              Fl_Check_Button uiPrefsOverrideFPS {
                label {Override FPS}
                tooltip {Override playback fps when loading sequences.} xywh {167 5 20 25} box UP_BOX down_box DOWN_BOX align 4
              }
              Fl_Group {} {open
                xywh {85 34 182 26}
              } {
                Fl_Value_Input uiPrefsFPS {
                  label Speed
                  xywh {30 1 75 25} color -1733777408 selection_color 0 minimum 0.001 maximum 120 step 0.01 value 24
                }
                Fl_Menu_Button {} {
                  label FPS
                  callback {float g = (float) atof( o->child( o->value() )->label() );
uiPrefsFPS->value( g );}
                  xywh {107 1 75 25}
                  class {mrv::PopupMenu}
                } {
                  MenuItem {} {
                    label 60
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {59.94}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label 50
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label 30
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {29.97}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label 25
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label 24
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {14.985}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {12.5}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label 12
                    xywh {0 0 100 20}
                  }
                }
              }
              Fl_Choice uiPrefsLoopMode {
                label {Looping Mode} open
                tooltip {Select default looping mode in timeline.} xywh {115 65 90 25} box THIN_DOWN_BOX down_box BORDER_BOX
                class {mrv::Choice}
              } {
                MenuItem {} {
                  label Stop
                  xywh {0 0 100 20}
                }
                MenuItem {} {
                  label Loop
                  xywh {0 0 100 20}
                }
                MenuItem {} {
                  label {Ping Pong}
                  xywh {0 0 100 20}
                }
              }
            }
            Fl_Value_Input uiPrefsScrubbingSensitivity {
              label {Scrub Sensitivity}
              tooltip {This setting controls the sensitivity of scrubbing (SHIFT and then the mouse right and left).  Smaller values make the mouse move jump more frames while higher values does the opposite.} xywh {230 160 60 25} minimum 2 maximum 50 step 1 value 5
            }
            Fl_Check_Button uiPrefsPlayAllFrames {
              label {Play All Frames}
              tooltip {Play All frames without skipping even if frame rate suffers.} xywh {267 19 20 25} box UP_BOX down_box DOWN_BOX align 4
            }
          }
          Fl_Group {} {
            label Timeline open
            xywh {47 250 317 94} box ROUNDED_BOX
          } {
            Fl_Choice uiPrefsTimelineDisplay {
              label Display
              tooltip {How to display timeline by default.} xywh {100 14 190 25} box THIN_DOWN_BOX down_box BORDER_BOX
              code0 {o->value(0);}
            } {
              MenuItem {} {
                label Frames
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label Seconds
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label Time
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Non-Drop Frame Timecode}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Drop Frame Timecode}
                xywh {0 0 100 20}
              }
            }
            Fl_Choice uiPrefsTimelineSelectionDisplay {
              label Selection open
              tooltip {How to display timeline selection by default.} xywh {100 54 190 25} box THIN_DOWN_BOX down_box BORDER_BOX
              code0 {o->value(0);}
            } {
              MenuItem {} {
                label {Hilited in Full Timeline}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Shortened to Timeline}
                xywh {0 0 100 20}
              }
            }
          }
        }
        Fl_Group {} {
          label {Pixel Toolbar}
          xywh {14 23 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {open
            xywh {178 50 190 228}
          } {
            Fl_Choice uiPrefsPixelRGBA {
              label {RGBA Display}
              xywh {0 0 190 25} down_box BORDER_BOX
            } {
              MenuItem {} {
                label {Float Values}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Hex Values}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {8-bit Values}
                xywh {0 0 100 20}
              }
            }
            Fl_Choice uiPrefsPixelValues {
              label {Pixel Values}
              xywh {0 68 190 25} down_box BORDER_BOX
            } {
              MenuItem {} {
                label {Full Lut and Gamma and Gain}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Lut with Gain but without Gamma}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Original without Gamma, Gain or Lut}
                xywh {0 0 100 20}
              }
            }
            Fl_Choice uiPrefsPixelHSV {
              label {Secondary Display}
              xywh {0 143 190 25} down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label HSV
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label HSL
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {CIE XYZ}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {CIE xyY}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Lab CIELAB (L*a*b*)}
                xywh {0 0 100 20} align 172
              }
              MenuItem {} {
                label {Luv CIELUV (L*u*v*)}
                xywh {0 0 100 20} align 172
              }
              MenuItem {} {
                label {YUV (Analog PAL)}
                xywh {0 0 100 20} align 172
              }
              MenuItem {} {
                label {YDbDr (Analog SECAM/PAL-N)}
                xywh {0 0 100 20} align 172
              }
              MenuItem {} {
                label {YIQ (Analog NTSC)}
                xywh {0 0 100 20} align 172
              }
              MenuItem {} {
                label {ITU-601 (Digital PAL/NTSC YCbCr)}
                xywh {0 0 100 20} align 172
              }
              MenuItem {} {
                label {ITU-709 (Digital HDTV YCbCr)}
                xywh {0 0 100 20} align 172
              }
            }
            Fl_Choice uiPrefsPixelLumma {
              label Luminance open
              xywh {0 203 190 25} down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {Y (Luminance)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Y' (Lumma)}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {L (Lightness)}
                xywh {0 0 100 20}
              }
            }
          }
        }
        Fl_Group {} {
          label Actions
          xywh {14 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label {Default Action} open
            xywh {57 35 317 200} box ROUNDED_BOX align 5
          } {
            Fl_Round_Button uiScrub {
              label { Scrub}
              xywh {31 14 20 25} down_box ROUND_DOWN_BOX
            }
            Fl_Round_Button uiMovePicture {
              label { Move Picture}
              xywh {31 39 20 25} down_box ROUND_DOWN_BOX
            }
            Fl_Round_Button uiSelection {
              label { Color Area Selection}
              xywh {31 64 20 25} down_box ROUND_DOWN_BOX
            }
            Fl_Round_Button uiDraw {
              label { Pencil}
              xywh {31 94 20 25} down_box ROUND_DOWN_BOX
            }
            Fl_Round_Button uiText {
              label { Text}
              xywh {31 124 20 25} down_box ROUND_DOWN_BOX
            }
            Fl_Round_Button uiErase {
              label { Eraser}
              xywh {31 154 20 25} down_box ROUND_DOWN_BOX
            }
          }
        }
        Fl_Group {} {
          label Caches
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Check_Button uiPrefsCacheActive {
            label {Cache Active}
            tooltip {Image sequences will be cached in memory.  If this setting is off, images will be loaded on demand but fluid playback may not be possible.} xywh {39 30 20 25} box UP_BOX down_box DOWN_BOX align 8
          }
          Fl_Check_Button uiPrefs8BitCaches {
            label {8 bit Caches}
            tooltip {Image sequences will be cached as 8-bit pictures, instead of being cached as the original depth of the sequence.
This setting thus allows caching more pictures in memory for float and half pictures.} xywh {39 69 20 25} box UP_BOX down_box DOWN_BOX align 8
          }
          Fl_Check_Button uiPrefsPreloadCache {
            label {Preload Cache}
            tooltip {When this option is on and a sequence is loaded, the frames of the cache will begin loading in the background.  Note however, that this may make the GUI less responsive.} xywh {239 29 20 25} box UP_BOX down_box DOWN_BOX align 8
          }
          Fl_Choice uiPrefsCacheScale {
            label Scale
            tooltip {Scale of images stored.  Smaller scale allows more images to be stored at the expense of pixelization.} xywh {74 114 120 25} box THIN_DOWN_BOX down_box BORDER_BOX
            class {mrv::Choice}
          } {
            MenuItem {} {
              label {1:1}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {1:2}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {1:4}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {1:8}
              xywh {0 0 100 20}
            }
          }
          Fl_Group {} {
            label {Cache Size} open
            xywh {39 189 336 45} box ROUNDED_BOX
          } {
            Fl_Value_Slider uiPrefsCacheSize {
              tooltip {Size in frames of the video and audio cache.} xywh {13 11 261 27} align 1 minimum 30 maximum 200 step 1 value 60
              code0 {o->deactivate();}
            }
            Fl_Light_Button uiPrefsCacheFPS {
              label FPS
              user_data uiPrefsCacheSize user_data_type {Fl_Value_Slider*}
              callback {if ( v->active() ) v->deactivate();
	               else v->activate();}
              tooltip {When selected, cache is set to twice the frames per second of the movie.} xywh {271 8 60 30}
            }
          }
          Fl_Group {} {
            label {Image Cache Size} open
            xywh {40 271 336 48} box ROUNDED_BOX
          } {
            Fl_Value_Input uiPrefsCacheMemory {
              label Memory
              xywh {134 13 75 25} minimum 0.5 maximum 100 step 0.5 value 1
            }
            Fl_Box {} {
              label Gb
              xywh {209 13 45 25}
            }
          }
        }
        Fl_Group {} {
          label {3D Luts}
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Algorithm
            tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT) and for your rendering transform of your images (RT).  These settings prioritizes choosing one over the other.} xywh {40 96 343 95} box ROUNDED_BOX
          } {
            Fl_Choice ODT_algorithm {
              label ODT
              user_data this user_data_type {PreferencesUI*}
              callback {mrv::Preferences::LutAlgorithm x = (mrv::Preferences::LutAlgorithm) o->value();
uiODT_CTL->activate();
uiODT_ICC->activate();
if ( x == mrv::Preferences::kLutOnlyCTL )
    uiODT_ICC->deactivate();
if ( x == mrv::Preferences::kLutOnlyICC )
    uiODT_CTL->deactivate();
v->refresh();} open
              tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT).  This setting prioritizes choosing one over the other.
When mixing a CTL ODT script with an ICC profile in an image as rendering transform (RT), it is necessary that the CTL ODT reads data in XYZ_OCES space (ICC v4 relative colorimetric).  Also, note that ICC uses D50 white points while HDTV and CTL use D65 white points.
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).} xywh {95 20 195 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {Prefer CTL}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always CTL}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Prefer ICC}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always ICC}
                xywh {0 0 100 20}
              }
            }
            Fl_Choice RT_algorithm {
              label RT
              user_data this user_data_type {PreferencesUI*}
              callback {mrv::Preferences::LutAlgorithm x = (mrv::Preferences::LutAlgorithm) o->value();
uiRT_CTL->activate();
uiRT_ICC->activate();
if ( x == mrv::Preferences::kLutOnlyCTL )
    uiRT_ICC->deactivate();
if ( x == mrv::Preferences::kLutOnlyICC )
    uiRT_CTL->deactivate();
v->refresh();}
              tooltip {mrViewer supports either ICC profiles or a CTL script for the render transform (RT) of your images.  This setting prioritizes choosing one over the other.
When mixing a CTL RT script with an ICC profile for your output device transform (ODT) like your monitor profile, it is necessary that the CTL RT script passes data in XYZ_OCES space (ICC v4 relative colorimetric).
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).} xywh {95 55 195 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {Prefer CTL}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always CTL}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Prefer ICC}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always ICC}
                xywh {0 0 100 20}
              }
            }
          }
          Fl_Group {} {
            label Quality open
            tooltip {mrViewer supports CTL scripts and ICC profiles baked into 3D Luts.  These settings control the quality of the 3D Lut.} xywh {44 269 339 76} box ROUNDED_BOX
          } {
            Fl_Choice uiLUT_quality {
              label Resolution
              user_data this user_data_type {PreferencesUI*}
              callback {v->refresh();}
              tooltip {With modern graphics cards, mrViewer emulates color transforms by baking them into a 3D Lut.  This setting controls how accurate the 3D lut is.  The bigger the lut, the longer it takes to calculate but the more accurate it is.
Note that large 3D Luts can use quite a lot of memory.

Size     Memory    Max. Error
32        1/2 Mb     12.5%
64          4 Mb      1.6%
128      32 Mb      0.7%
192      110.5 Mb      0.5%
256       262 Mb      0.2%

It is recommended this setting is left at 64x64x64 or 128x128x128.} xywh {120 14 170 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {No Lut}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label 32x32x32
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label 64x64x64
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label 96x96x96
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label 128x128x128
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label 192x192x192
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label 256x256x256
                xywh {0 0 100 20}
              }
            }
            Fl_Value_Input uiPrefsNumStops {
              label {Number of Fstops}
              tooltip {Number of FStops the LUT will cover.  Higher numbers show more detail in the black levels, while it makes the midrange be less defined.} xywh {224 45 65 25} minimum 1 maximum 20 step 1 value 10
            }
          }
          Fl_Group {} {
            label {Rendering Intent} open
            xywh {43 209 340 45} box ROUNDED_BOX
          } {
            Fl_Choice uiICC_intent {
              label ICC
              user_data this user_data_type {PreferencesUI*}
              callback {v->refresh();}
              tooltip {When using luts with ICC profiles, this setting allows you to select the ICC rendering intent.   Rendering intents are mostly used for printing to film or paper to emulate or proof the output of the output device (ODT), particularly when it does not have the same gamut (color/white range) as the linear RGB/XYZ space.} xywh {120 10 170 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label Perceptual
                tooltip xxxx xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Relative Colorimetric}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Absolute Colorimetric}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label Saturation
                xywh {0 0 100 20}
              }
            }
          }
          Fl_Group {} {open
            xywh {29 4 380 75}
          } {
            Fl_Check_Button uiPrefsUseOcio {
              label {Use OCIO}
              callback {mrv::Preferences::use_ocio = o->value();}
              tooltip {Use OCIO or revert to CTL/ICC.} xywh {5 5 25 25} box UP_BOX down_box DOWN_BOX
            }
            Fl_Group {} {open
              xywh {5 44 375 31}
            } {
              Fl_Input uiPrefsOCIOConfig {
                label {OCIO Config File}
                tooltip {This is the path to your config.ocio file.  It can be set with the environment variable OCIO, which takes precedence over any saved setting.} xywh {0 0 320 30} align 1
              }
              Fl_Button {} {
                label Pick
                user_data m user_data_type {ViewerUI*}
                callback {PreferencesUI* uiPrefs = v->uiPrefs;
std::string r = mrv::open_ocio_config( uiPrefs->uiPrefsOCIOConfig->value() );
if ( r.empty() ) return;

char buf[] = "OCIO=";
putenv( buf );
unsetenv( "OCIO" );
uiPrefs->uiPrefsOCIOConfig->value( r.c_str() );
uiPrefs->run(v);}
                tooltip {Pick a config.ocio file from disk.} xywh {320 0 55 31}
              }
            }
            Fl_Check_Button uiPrefsSaveOcio {
              label {Save Ocio Config File}
              tooltip {Save OCIO config in preferences file or leave it empty so that environment variables can be used.} xywh {90 5 25 25} box UP_BOX down_box DOWN_BOX
            }
          }
        }
        Fl_Group {} {
          label OCIO
          xywh {13 22 423 355} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group uiOCIO_ICS {
            label {Input Color Space}
            xywh {30 90 375 154} box ROUNDED_BOX
          } {
            Fl_Group {} {open
              xywh {78 19 270 45}
            } {
              Fl_Input uiOCIO_8bits_ics {
                label {8-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::ocio_8bits_ics = o->value();
v->refresh();}
                tooltip {The name of the OCIO default image color space for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_OCIO_8bits_ICS)} xywh {8 5 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ocio_chooser(uiOCIO_8bits_ics->value(), mrv::OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_8bits_ics->value(c.c_str());
uiOCIO_8bits_ics->do_callback();}
                xywh {205 5 65 25}
              }
            }
            Fl_Group {} {open
              xywh {78 49 270 45}
            } {
              Fl_Input uiOCIO_16bits_ics {
                label {16-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::ocio_16bits_ics = o->value();
v->refresh();}
                tooltip {The name of the OCIO default image color space for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_OCIO_16bits_ICS)} xywh {8 5 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ocio_chooser(uiOCIO_16bits_ics->value(), mrv::OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_16bits_ics->value(c.c_str());
uiOCIO_16bits_ics->do_callback();}
                xywh {205 5 65 25}
              }
            }
            Fl_Group {} {open
              xywh {78 79 270 45}
            } {
              Fl_Input uiOCIO_32bits_ics {
                label {32-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::ocio_32bits_ics = o->value();
v->refresh();}
                tooltip {The name of the OCIO default image color space for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_OCIO_32bits_ICS)} xywh {8 5 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ocio_chooser(uiOCIO_32bits_ics->value(), mrv::OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_32bits_ics->value(c.c_str());
uiOCIO_32bits_ics->do_callback();}
                xywh {205 5 65 25}
              }
            }
            Fl_Group {} {open
              xywh {78 109 270 45}
            } {
              Fl_Input uiOCIO_float_ics {
                label float
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::ocio_float_ics = o->value();
v->refresh();}
                tooltip {The name of the OCIO default image color space for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_OCIO_float_ICS)} xywh {8 5 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ocio_chooser(uiOCIO_float_ics->value(), mrv::OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_float_ics->value(c.c_str());
uiOCIO_float_ics->do_callback();}
                xywh {205 5 65 25}
              }
            }
          }
        }
        Fl_Group {} {
          label {CTL Paths}
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Browser uiPrefsCTLModulePath {
            label CTL_MODULE_PATH
            xywh {13 76 380 83}
          }
          Fl_Browser uiPrefsCTLScripts {
            label {CTL scripts}
            xywh {13 189 380 156}
          }
          Fl_Button {} {
            label Pick
            xywh {339 23 55 31}
          }
        }
        Fl_Group {} {
          label {Default Output Device Transform (ODT)}
          xywh {13 22 423 354} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Display
            xywh {13 22 370 327} box ROUNDED_BOX
          } {
            Fl_Group uiODT_CTL {
              xywh {104 10 255 265}
            } {
              Fl_Group {} {
                xywh {0 0 255 35}
              } {
                Fl_Input uiODT_CTL_transform {
                  label Transform
                  user_data this user_data_type {PreferencesUI*}
                  callback {mrv::Preferences::ODT_CTL_transform = o->value();
v->refresh();}
                  tooltip {The name of the CTL display transform
(Environment variable: MRV_ODT_CTL_TRANSFORM)} xywh {15 5 185 25} box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Pick
                  callback {std::string c = make_ctl_browser(uiODT_CTL_transform->value(), "ODT");
if (c.empty()) return;
uiODT_CTL_transform->value(c.c_str());
uiODT_CTL_transform->do_callback();}
                  xywh {200 5 55 25}
                }
              }
              Fl_Group {} {
                label {Chromaticities (CIE)}
                tooltip {The CIE x,y coordinates of the primaries and white point of the display
(like Rec. ITU-R BT.709-3)

(Environment variable: MRV_ODT_CTL_CHROMATICITIES)} xywh {5 35 250 155} box ENGRAVED_BOX align 132
              } {
                Fl_Box {} {
                  label X
                  xywh {100 8 25 25}
                }
                Fl_Box {} {
                  label Y
                  xywh {175 8 25 25}
                }
                Fl_Group {} {
                  label Red
                  xywh {45 23 190 35} labelsize 11 align 4
                } {
                  Fl_Value_Input uiODT_CTL_chromaticities_red_x {
                    callback {mrv::Preferences::ODT_CTL_chromaticities.red.x = (float) o->value();}
                    tooltip {The Red CIE X coordinate of the display} xywh {10 10 85 25} step 0.0001 value 0.64
                  }
                  Fl_Value_Input uiODT_CTL_chromaticities_red_y {
                    callback {mrv::Preferences::ODT_CTL_chromaticities.red.y = (float) o->value();}
                    tooltip {The Red CIE Y coordinate of the display} xywh {105 10 85 25} step 0.0001 value 0.33
                  }
                }
                Fl_Group {} {
                  label Green
                  xywh {45 53 190 35} labelsize 11 align 4
                } {
                  Fl_Value_Input uiODT_CTL_chromaticities_green_x {
                    callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                    tooltip {The Green CIE X coordinate of the display} xywh {10 10 85 25} step 0.0001 value 0.3
                  }
                  Fl_Value_Input uiODT_CTL_chromaticities_green_y {
                    callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                    tooltip {The Green CIE Y coordinate of the display} xywh {105 10 85 25} step 0.0001 value 0.6
                  }
                }
                Fl_Group {} {
                  label Blue
                  xywh {45 83 190 35} labelsize 11 align 4
                } {
                  Fl_Value_Input uiODT_CTL_chromaticities_blue_x {
                    user_data this user_data_type {PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                    tooltip {The Blue CIE X coordinate of the display} xywh {10 10 85 25} step 0.0001 value 0.15
                  }
                  Fl_Value_Input uiODT_CTL_chromaticities_blue_y {
                    user_data this user_data_type {PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                    tooltip {The Blue CIE Y coordinate of the display} xywh {105 10 85 25} step 0.0001 value 0.06
                  }
                }
                Fl_Group {} {
                  label White
                  xywh {45 113 190 35} labelsize 11 align 4
                } {
                  Fl_Value_Input uiODT_CTL_chromaticities_white_x {
                    user_data this user_data_type {PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                    tooltip {The White CIE X coordinate of the display} xywh {10 10 85 25} step 0.0001 value 0.3127
                  }
                  Fl_Value_Input uiODT_CTL_chromaticities_white_y {
                    user_data this user_data_type {PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_chromaticities.white.y = (float) o->value();
v->refresh();}
                    tooltip {The White CIE Y coordinate of the display} xywh {105 10 85 25} step 0.0001 value 0.329
                  }
                }
              }
              Fl_Group {} {
                label {White Luminance}
                xywh {115 200 130 35} labelsize 11 align 132
              } {
                Fl_Value_Input uiODT_CTL_white_luminance {
                  label {cd/m2}
                  user_data this user_data_type {PreferencesUI*}
                  callback {mrv::Preferences::ODT_CTL_white_luminance = (float) o->value();
v->refresh();}
                  tooltip {The luminance, in cd/m2, of the display.

(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)} xywh {10 5 90 25} align 136 maximum 500 step 0.1 value 120
                }
              }
              Fl_Group {} {
                label {Surround Luminance}
                tooltip {(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)} xywh {125 230 120 35} labelsize 11 align 132
              } {
                Fl_Value_Input uiODT_CTL_surround_luminance {
                  label {cd/m2}
                  user_data this user_data_type {PreferencesUI*}
                  callback {mrv::Preferences::ODT_CTL_surround_luminance = (float) o->value();
v->refresh();}
                  tooltip {The luminance, in cd/m2, of the background that surrounds the display.

(Environment variable:
MRV_ODT_CTL_SURROUND_LUMINANCE)} xywh {0 10 90 25} align 136 maximum 500 step 0.1 value 12
                }
              }
            }
            Fl_Group uiODT_ICC {
              xywh {35 277 312 45}
            } {
              Fl_Input uiODT_ICC_profile {
                label {ICC profile}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::Preferences::ODT_ICC_profile = o->value();
v->refresh();}
                tooltip {The name of the default ICC profile for your ODT (monitor)
(Environment variable: MRV_ODT_ICC_PROFILE)} xywh {55 15 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Load
                user_data this user_data_type {PreferencesUI*}
                callback {const char* c = mrv::open_icc_profile(uiODT_ICC_profile->value());
uiODT_ICC_profile->value(c);
uiODT_ICC_profile->do_callback();}
                xywh {245 15 55 25}
              }
            }
          }
        }
        Fl_Group {} {
          label {Default Rendering Transform (RT)}
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group uiRT_CTL {
            label {Render Transforms}
            xywh {15 24 375 135} box ROUNDED_BOX
          } {
            Fl_Group {} {open
              xywh {100 9 255 30}
            } {
              Fl_Input uiCTL_8bits_load_transform {
                label {8-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::rendering_transform_8bits = o->value();
v->refresh();}
                tooltip {The name of the CTL default image transform for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_CTL_RT_8bits)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ctl_browser(uiCTL_8bits_load_transform->value(), "RRT");
if (c.empty()) return;
uiCTL_8bits_load_transform->value(c.c_str());
uiCTL_8bits_load_transform->do_callback();}
                xywh {190 0 55 25}
              }
            }
            Fl_Group {} {open
              xywh {100 39 255 30}
            } {
              Fl_Input uiCTL_16bits_load_transform {
                label {16-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::rendering_transform_16bits = o->value();
v->refresh();}
                tooltip {The name of the CTL default image transform for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_CTL_RT_16bits)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->value(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->value(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                xywh {190 0 55 25}
              }
            }
            Fl_Group {} {open
              xywh {100 69 255 30}
            } {
              Fl_Input uiCTL_32bits_load_transform {
                label {32-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::rendering_transform_32bits = o->value();
v->refresh();}
                tooltip {The name of the CTL default image transform for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_CTL_RT_32bits)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->value(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->value(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                xywh {190 0 55 25}
              }
            }
            Fl_Group {} {open
              xywh {100 99 255 30}
            } {
              Fl_Input uiCTL_float_load_transform {
                label float
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::rendering_transform_float = o->value();
v->refresh();}
                tooltip {The name of the CTL default image transform for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_CTL_RT_float)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Pick
                user_data this user_data_type {PreferencesUI*}
                callback {std::string c = make_ctl_browser(uiCTL_float_load_transform->value(), "RRT");
if (c.empty()) return;
uiCTL_float_load_transform->value(c.c_str());
uiCTL_float_load_transform->do_callback();}
                xywh {190 0 55 25}
              }
            }
          }
          Fl_Group uiRT_ICC {
            label {ICC Profiles}
            xywh {15 204 375 135} box ROUNDED_BOX
          } {
            Fl_Group {} {
              xywh {100 10 255 30}
            } {
              Fl_Input uiICC_8bits_profile {
                label {8-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::icc_profile_8bits = o->value();
v->refresh();}
                tooltip {The name of the default ICC profile for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_ICC_RT_8bits)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Load
                user_data this user_data_type {PreferencesUI*}
                callback {const char* c = mrv::open_icc_profile(uiICC_8bits_profile->value());
uiICC_8bits_profile->value(c);
uiICC_8bits_profile->do_callback();}
                xywh {190 0 55 25}
              }
            }
            Fl_Group {} {
              xywh {100 40 255 30}
            } {
              Fl_Input uiICC_16bits_profile {
                label {16-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::icc_profile_16bits = o->value();
v->refresh();}
                tooltip {The name of the default ICC profile for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_ICC_RT_16bits)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Load
                user_data this user_data_type {PreferencesUI*}
                callback {const char* c = mrv::open_icc_profile(uiICC_16bits_profile->value());
uiICC_16bits_profile->value(c);
uiICC_16bits_profile->do_callback();}
                xywh {190 0 55 25}
              }
            }
            Fl_Group {} {
              xywh {100 70 255 30}
            } {
              Fl_Input uiICC_32bits_profile {
                label {32-bits}
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::icc_profile_32bits = o->value();
v->refresh();}
                tooltip {The name of the default ICC profile for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_ICC_RT_32bits)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Load
                user_data this user_data_type {PreferencesUI*}
                callback {const char* c = mrv::open_icc_profile(uiICC_32bits_profile->value());
uiICC_32bits_profile->value(c);
uiICC_32bits_profile->do_callback();}
                xywh {190 0 55 25}
              }
            }
            Fl_Group {} {
              xywh {100 100 255 30}
            } {
              Fl_Input uiICC_float_profile {
                label float
                user_data this user_data_type {PreferencesUI*}
                callback {mrv::CMedia::icc_profile_float = o->value();
v->refresh();}
                tooltip {The name of the default ICC profile for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_ICC_RT_float)} xywh {0 0 190 25} box THIN_DOWN_BOX labelsize 11 align 132
              }
              Fl_Button {} {
                label Load
                user_data this user_data_type {PreferencesUI*}
                callback {const char* c = mrv::open_icc_profile(uiICC_float_profile->value());
uiICC_float_profile->value(c);
uiICC_float_profile->do_callback();}
                xywh {190 0 55 25}
              }
            }
          }
        }
        Fl_Group {} {
          label Loading
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {open
            xywh {14 5 400 209} box ROUNDED_BOX
          } {
            Fl_Choice uiPrefsLoadLibrary {
              label {JPG/PNG/DPX Load Library}
              tooltip {When loading a sequence, mrViewer will usually use OIIO loaders which give a good compromise between speed and quality.  OIIO loaders allow precaching and gaps in the sequence.  FFMPEG loaders are multithreaded JPG, DPX and PNG and can usually play in real time except when the resolution is too high.  In that case, the loaders will need one pass to cache all images as they don't allow precaching.  The FFMPEG loaders also cannot have gaps in the sequence.  Finally, ImageMagick loaders are not as fast but share the similar features of OIIO.} xywh {200 14 165 25} box UP_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label FFMPEG
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label OIIO
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label ImageMagick
                xywh {0 0 100 20}
              }
            }
            Fl_Choice uiPrefsMissingFrames {
              label {Missing Frames} open
              tooltip {When loading a sequence, and a frame is not found, mrViewer can either show a black frame or repeat the previous frame.} xywh {200 49 165 25} box UP_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {Black Frame}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Repeat Frame}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Scratched Repeat Frame}
                xywh {0 0 100 20}
              }
            }
            Fl_Check_Button uiPrefsLoadSequence {
              label {Load Sequence on Drag&&Drop}
              tooltip {When dragging and dropping a frame from a sequence, make mrViewer load the full sequence.   Otherwise it loads the frame only.} xywh {20 80 25 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsLoadSequenceOnAssoc {
              label {Load Sequence on File Association & CommandLine}
              tooltip {When loading a frame from a sequence from a file association or command-line, make mrViewer load the full sequence.   Otherwise it loads the frame only.} xywh {20 113 25 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsAutoLoadImages {
              label {Auto load images as they change on disk}
              tooltip {When this option is active and an image changes on disk, mrViewer reloads it automatically.} xywh {20 146 25 25} box UP_BOX down_box DOWN_BOX value 1 align 8
            }
            Fl_Check_Button uiPrefsUses16Bits {
              label {Read 16 bit movies when possible}
              tooltip {Movie files will be read as 16bit pictures, instead of being loaded and cached as 8 bits.
This setting thus allows caching less pictures in memory but at an improved quality.} xywh {20 176 25 25} box UP_BOX down_box DOWN_BOX align 8
            }
          }
          Fl_Group {} {open
            xywh {19 224 395 115} box ROUNDED_BOX
          } {
            Fl_Input uiPrefsImageVersionPrefix {
              label {Versioning Prefix}
              tooltip {Prefix used to detect version numbers.  The default finds images like:
  gizmo_v003.001.exr
(version 3, frame 1).} xywh {230 30 94 25}
              code0 {o->value( "_v" );}
            }
            Fl_Value_Input uiPrefsMaxImagesApart {
              label {Max. Images Apart}
              tooltip {Maximum number of images apart that the versions might be on disk.  If you have v1, and this is set to 5, only up to a gap with v6 would be found.  v7 would not get found as the gap would be too big.} xywh {275 65 50 25} minimum 1 maximum 100 step 1 value 10
            }
          }
        }
        Fl_Group {} {
          label Saving open
          xywh {14 23 424 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Reels open
            xywh {8 22 406 188} box ROUNDED_BOX
          } {
            Fl_Check_Button uiPrefsRelativePaths {
              label {Use Relative Paths in Reel Content}
              tooltip {With this option, the content of the reel (the reel images/movies) are saved with relative paths to the location of the reel.} xywh {25 81 25 25} box UP_BOX down_box DOWN_BOX
            }
            Fl_Check_Button uiPrefsImagePathReelPath {
              label {Use Image Path to Set Default Reel Saving Path}
              tooltip {With this option on, saving of a reel will default to the path of the first image loaded.} xywh {25 36 25 25} box UP_BOX down_box DOWN_BOX value 1
            }
          }
          Fl_Group {} {
            xywh {13 218 400 115} box ROUNDED_BOX
          } {}
        }
        Fl_Group {} {
          label Video
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Choice VideoDriver {
            label Driver
            xywh {78 37 290 25} box THIN_DOWN_BOX down_box BORDER_BOX
            class {mrv::Choice}
          } {
            MenuItem {} {
              label OpenGL
              xywh {0 0 100 20}
            }
          }
          Fl_Group {} {
            label Loading open
            xywh {48 89 318 90} box ROUNDED_BOX
          } {
            Fl_Value_Input uiPrefsVideoThreadCount {
              label {Video Thread Count}
              tooltip {This setting effects the number of threads used in decoding your video.  A value of 0 means to use as many threads as possible.  Note that currently this setting is in beta, as some movies decode with artifacts when setting is 3 or higher (0 too).} xywh {236 10 55 25} maximum 64 step 1
            }
            Fl_Choice uiPrefsYUVConversion {
              label {YUV Conversion}
              user_data uiMain user_data_type {ViewerUI*}
              callback {int idx = o->value();

switch(idx)
{
case 0:
idx = 0; break;
case 1:
idx = 1; break;
case 2:
idx = 2; break;
case 3:
default:
idx = 5; break;
}
mrv::CMedia::colorspace_override = idx;}
              tooltip {Controls the YUV Conversion of the movie in the shader to emulate different tv standards.
Use File YUV Hint will take the value from the movie being loaded if the data is present.
BT709 is a Rec.709 emulation (HDTV) and has black levels in the 16 range of 255.
Unspecified is your standard computer translation of YUV.
BT470BG/SMPTE170M emulate ITU-R BT 601-6 625 (PAL/SECAM).} xywh {130 45 167 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label {Use File YUV Hint}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always use BT709}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always use Unspecified}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Always use BT470BG / SMPTE170M}
                xywh {0 0 100 20}
              }
            }
          }
          Fl_Group {} {
            label Saving open
            xywh {48 219 318 65} box ROUNDED_BOX
          } {
            Fl_Choice uiPrefsVideoCodec {
              label {Video Codec}
              user_data uiMain user_data_type {ViewerUI*}
              tooltip {Controls the codec used by default in saving a movie file.} xywh {135 17 167 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label hevc
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label h264
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label mpeg4
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label prores_ks
                xywh {0 0 100 20}
              }
            }
          }
        }
        Fl_Group {} {
          label Compositing
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {open
            xywh {58 172 320 65} box ROUNDED_BOX
          } {
            Fl_Choice uiPrefsBlendMode {
              label {Blend Mode}
              user_data m user_data_type {ViewerUI*}
              callback {v->uiView->redraw();} open
              tooltip {OpenGL blend compositing mode.
Traditional:
SC x SA + DC x ( 1 - SA)
Premult:
SC + DC x ( 1 - SA )
where SC is source color, SA is source alpha, and DC is destination color.} xywh {142 20 167 25} box THIN_DOWN_BOX down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label Traditional
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label Premult
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Traditional No Gamma}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Premult No Gamma}
                xywh {0 0 100 20}
              }
            }
          }
          Fl_Group {} {open
            xywh {57 97 321 65} box ROUNDED_BOX
          } {
            Fl_Light_Button uiPrefsResizeBackground {
              label {Resize Background to Match Foreground}
              xywh {25 20 275 30}
            }
          }
        }
        Fl_Group {} {
          label Audio
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Choice uiPrefsAudioDevice {
            label Device
            callback {unsigned idx = o->value();
mrv::AudioEngine::device( idx );}
            xywh {99 22 275 25} box THIN_DOWN_BOX down_box BORDER_BOX
            code0 {//
// Initialize an audio engine to get devices
//
mrv::AudioEngine* engine = mrv::AudioEngine::factory();
delete engine;

const mrv::AudioEngine::DeviceList& devices = mrv::AudioEngine::devices();
mrv::AudioEngine::DeviceList::const_iterator i = devices.begin();
mrv::AudioEngine::DeviceList::const_iterator e = devices.end();
for ( ; i != e; ++i )
   {
      o->add( (*i).description.c_str() );
   }}
            class {mrv::Choice}
          } {}
          Fl_Group {} {open
            xywh {64 189 300 60} box ROUND_DOWN_BOX
          } {
            Fl_Slider uiPrefsAudioVolume {
              label {Default Volume}
              tooltip {Default audio at opening mrViewer.} xywh {79 20 161 25} align 1 step 0.01 value 1
            }
            Fl_Button uiPrefsAudioMute {
              label Mute
              user_data uiPrefsAudioVolume user_data_type {Fl_Slider*}
              callback {o->value( !o->value() );
if ( o->value() )
   v->deactivate();
else
   v->activate();}
              xywh {40 20 40 25}
            }
          }
          Fl_Light_Button uiPrefsOverrideAudio {
            label {Override Audio}
            xywh {149 144 135 35}
          }
        }
        Fl_Group {} {
          label Subtitles open
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Choice uiPrefsSubtitleFont {
            label Font
            user_data m user_data_type {ViewerUI*}
            callback {int idx = o->value();
const char* font = o->child(idx)->label();
mrv::media m = v->uiView->foreground();
if (!m) return;
mrv::CMedia* img = m->image();
mrv::aviImage* avi = dynamic_cast< mrv::aviImage* >( img );
if (!avi) return;
avi->subtitle_font( font );
mrv::CMedia::default_subtitle_font( font );
v->uiView->redraw();}
            xywh {114 37 275 31} box THIN_DOWN_BOX down_box BORDER_BOX
            code0 {std::cerr << "setfonts" << std::endl; unsigned num = Fl::set_fonts( "*" ); std::cerr << "setfonts2" << std::endl; int t; for (int i = 0; i < num; i++)
{
	const char* name =  Fl::get_font_name((Fl_Font)i,&t);
	o->add(name);
       if ( strcmp( name, "Arial" ) == 0 )
	   o->value(i);
}}
            class {mrv::Choice}
          } {}
          Fl_Choice uiPrefsSubtitleEncodingChoices {
            user_data m user_data_type {ViewerUI*}
            callback {int i = o->value();
uiPrefsSubtitleEncoding->value( o->child(i)->label() );
uiPrefsSubtitleEncoding->do_callback();} open
            xywh {239 88 150 31} box THIN_DOWN_BOX down_box BORDER_BOX
            class {mrv::Choice}
          } {
            MenuItem {} {
              label {ISO-8859-1}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {ISO-8859-2}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {UTF-8}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {UTF-16}
              xywh {0 0 100 20}
            }
          }
          Fl_Input uiPrefsSubtitleEncoding {
            label Encoding
            user_data m user_data_type {ViewerUI*}
            callback {const char* enc = o->value();
mrv::media m = v->uiView->foreground();
if (!m) return;
mrv::CMedia* img = m->image();
mrv::aviImage* avi = dynamic_cast< mrv::aviImage* >( img );
if (!avi) return;
avi->subtitle_encoding( enc );
mrv::CMedia::default_subtitle_encoding( enc );
v->uiView->redraw();}
            xywh {114 89 120 30}
          }
        }
        Fl_Group {} {
          label Errors
          xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {open
            xywh {43 32 355 227} box ENGRAVED_BOX
          } {
            Fl_Choice uiPrefsRaiseLogWindowOnError {
              label {Raise Log Window on Error} open
              xywh {240 25 110 25} down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label Never
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label Once
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label Always
                xywh {0 0 100 20}
              }
            }
          }
        }
        Fl_Group {} {
          label Images
          tooltip {Options controlling the OpenEXR reader/writer} xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Saving open
            xywh {54 78 330 130} box ROUNDED_BOX labelsize 15
          } {
            Fl_Light_Button uiPrefsACESClipMetadata {
              label {ACES Clip Metadata}
              tooltip {Whether to save ACES clip metadata in a sidecar.} xywh {60 20 210 30}
            }
            Fl_Light_Button uiPrefsAllLayers {
              label {All Layers}
              tooltip {Whether to save all layers in image file if there are several.} xywh {60 70 210 30}
            }
          }
        }
        Fl_Group {} {
          label OpenEXR
          tooltip {Options controlling the OpenEXR reader/writer} xywh {13 22 423 350} box EMBOSSED_BOX align 5 hide
        } {
          Fl_Group {} {
            label Loading
            xywh {44 33 325 130} box ROUNDED_BOX labelsize 15
          } {
            Fl_Value_Input uiPrefsOpenEXRThreadCount {
              label {Thread Count}
              tooltip {Use multiple threads when loading a frame.} xywh {155 22 51 28} minimum 1 maximum 16 step 1 value 4
            }
            Fl_Value_Input uiPrefsOpenEXRGamma {
              label Gamma
              tooltip {Gamma to use when loading an exr and OCIO is off.} xywh {160 82 51 28} minimum 0.1 maximum 16 step 0.1 value 2.2
            }
          }
          Fl_Group {} {
            label Saving open
            xywh {44 203 330 130} box ROUNDED_BOX labelsize 15
          } {
            Fl_Choice uiPrefsOpenEXRCompression {
              label Compression
              user_data this user_data_type {PreferencesUI*}
              callback {std::string compression = o->child(o->value())->label();
if ( compression == "DWAA" ||
     compression == "DWAB" )
{
v->uiPrefsOpenEXRDWACompression->activate();
}
else
{
v->uiPrefsOpenEXRDWACompression->deactivate();
}}
              tooltip {Compression to use when saving an exr.} xywh {100 20 180 25} down_box BORDER_BOX
              class {mrv::Choice}
            } {
              MenuItem {} {
                label None
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label RLE
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {ZIP SCANLINE}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label ZIP
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label PIZ
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label PXR24
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label B44
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label B44A
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label DWAA
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label DWAB
                xywh {0 0 100 20}
              }
            }
            Fl_Value_Slider uiPrefsOpenEXRDWACompression {
              label {DWA Compression}
              tooltip {DWA/DWB compression to use when saving an exr with that compression scheme.} xywh {130 61 138 34} align 4 minimum 1 maximum 250 step 10 value 45 deactivate
            }
          }
        }
      }
      Fl_Group {} {open
        xywh {5 5 207 430}
      } {
        Fl_Choice {} {
          label Module
          user_data this user_data_type {PreferencesUI*}
          callback {uiWizard->value( uiWizard->child( o->value() ) );} open
          xywh {0 20 195 410} down_box BORDER_BOX
          class {mrv::Choice}
        } {
          Submenu {} {
            label {User Interface}
            xywh {0 0 100 20}
          } {
            Submenu {} {
              label {View Window}
              xywh {0 0 100 20}
            } {
              MenuItem {} {
                label Colors
                xywh {0 0 100 20}
              }
            }
            MenuItem {} {
              label {File Requester}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Positioning
              xywh {0 0 100 20}
            }
          }
          MenuItem {} {
            label Playback
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Pixel Toolbar}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Actions
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Caches
            xywh {0 0 100 20}
          }
          Submenu {} {
            label {3D Luts}
            xywh {0 0 100 20}
          } {
            MenuItem {} {
              label OCIO
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Paths
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Default ODT}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Default RT}
              xywh {0 0 100 20}
            }
          }
          MenuItem {} {
            label Loading
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Saving
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Video
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Compositing
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Audio
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Subtitle
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Errors
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Images
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label OpenEXR
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Group {} {
        xywh {223 419 423 31}
      } {
        Fl_Button {} {
          label Revert
          user_data this user_data_type {PreferencesUI*}
          callback {// reload preferences
mrv::Preferences prefs(v);}
          tooltip {Revert settings to last saved preferences.} xywh {0 3 132 27}
        }
        Fl_Button {} {
          label Save
          callback {mrv::Preferences::save();}
          tooltip {Save preferences to disk as a default.} xywh {135 3 132 27}
        }
        Fl_Button {} {
          label OK
          user_data m user_data_type {ViewerUI*}
          callback {v->uiPrefs->uiMain->hide();
v->uiPrefs->run(v);}
          tooltip {Accept settings but don't save.} xywh {270 3 132 27}
        }
      }
    }
  }
  Function {PreferencesUI(ViewerUI* m)} {open
  } {
    code {make_window(m);} {}
  }
  Function {~PreferencesUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
  Function {refresh()} {} {
    code {//@TODO: fltk1.4 redraw all windows} {}
  }
  Function {run(ViewerUI* m)} {open
  } {
    code {mrv::Preferences::run( m );} {}
  }
}
