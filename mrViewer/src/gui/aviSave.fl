# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cxx}
decl {\#include <iostream>} {public global
} 

decl {\#include <gui/mrvIO.h>} {private global
} 

decl {\#include <gui/mrvDoubleWindow.h>} {public global
} 

decl {\#include <mrViewer.h>} {public
} 

decl {\#include "gui/mrvImageView.h"} {public
} 

decl {\#include <string>} {public
} 

class AviSaveUI {open
} {
  decl {std::string video_codec;} {public local
  }
  decl {std::string video_color;} {public local
  }
  decl {int video_bitrate;} {public local
  }
  decl {std::string audio_codec;} {public local
  }
  decl {int audio_bitrate;} {public local
  }
  Function {make_window()} {open
  } {
    Fl_Window uiMain {
      label {Movie Saving Preferences} open selected
      xywh {818 155 320 505} type Double resizable
      class mrvDoubleWindow modal visible
    } {
      Fl_Group {} {
        label {Video Options} open
        xywh {55 40 190 145} box UP_BOX
      } {
        Fl_Choice uiVideoCodec {
          label Codec
          xywh {125 71 85 25} down_box BORDER_BOX
        } {
          MenuItem {} {
            label H264
            xywh {0 0 36 21}
          }
          MenuItem {} {
            label MPEG4
            xywh {10 10 36 21}
          }
        }
        Fl_Choice uiVideoColor {
          label Color
          xywh {125 105 85 20} down_box BORDER_BOX
        } {
          MenuItem {} {
            label YUV420
            xywh {0 0 36 21}
          }
          MenuItem {} {
            label YUV422
            xywh {20 20 36 21}
	  }
	 }	
    decl {std::string video_codec;} {public
    }
    decl {std::string video_color;} {public
    }
    decl {unsigned video_bitrate;} {public
    }
    decl {unsigned video_profile;} {public
    }
    decl {unsigned yuv_hint;} {public
    }
    decl {double fps;} {public
    }
    decl {std::string audio_codec;} {public
    }
    decl {int audio_bitrate;} {public
    }
    Function {make_window()} {open
    } {
      {fltk::Window} uiMain {
        label {Movie Saving Preferences} open
        xywh {510 73 300 495} horizontal resizable modal noborder visible
      } {
        {fltk::Group} {} {
          label {Video Options} open
          xywh {50 46 185 279} box UP_BOX
        } {
          {fltk::Choice} uiVideoCodec {
            label Codec
            user_data this user_data_type {AviSaveUI*}
            callback {fltk::Choice* c = v->uiVideoColor;
fltk::Choice* p = v->uiVideoProfile;

if ( o->value() == 0)
{
fltk::Widget* item = c->child(0);
item->activate();
item = c->child(1);
item->activate();
item = c->child(2);
item->activate();
  for ( int i = 0; i < 5; ++i )
  {
    item = p->child(i);
    item->activate();
  }
p->value(4);
}
else if ( o->value() == 1 )
{
fltk::Widget* item = c->child(1);
item->deactivate();
item = c->child(0);
item->activate();
item = c->child(2);
item->activate();
c->value(0);
  for ( int i = 0; i < 5; ++i )
  {
    item = p->child(i);
    item->activate();
  }
p->value(4);
}
else if ( o->value() == 2 )
{
fltk::Widget* item = c->child(1);
item->activate();
item = c->child(0);
item->deactivate();
item = c->child(2);
item->activate();
c->value(1);
  for ( int i = 0; i < 4; ++i )
  {
    item = p->child(i);
    item->activate();
  }
item = p->child(4);
item->deactivate();
p->value(3);
}}
            tooltip {Codec (encoder) used to encode the movie.  h264 is the preferred codec in terms of quality/compression.  mpeg4 is an encoder for DVD and prores is a good codec for editing jobs.}
            xywh {75 15 91 26}
            extra_code {video_codec = "h264";}
          } {
            {fltk::Item} {} {
              label h264
              }
            {fltk::Item} {} {
              label mpeg4
              }
            {fltk::Item} {} {
              label prores_ks
              }
          }
          {fltk::Choice} uiVideoColor {
            label Color
            tooltip {This setting controls the YUV color subsampling of the movie.  YUV444 is the best, with no subsampling, just 3 bytes per pixel.  YUV422 uses 4 bytes per 2 pixels, and YUV420 uses 6 bytes per 4 pixels.}
            xywh {75 46 90 25}
            extra_code {video_color = "YUV420";}
          } {
            {fltk::Item} {} {
              label YUV420
              }
            {fltk::Item} {} {
              label YUV422
              }
            {fltk::Item} {} {
              label YUV444
              }
          }
          {fltk::ValueInput} uiVideoBitrate {
            label Bitrate
            tooltip {This setting controls the quality of the movie file.  A smaller bitrate has more compression and artifacts.}
            xywh {75 76 90 25} selection_color 0xffff0000 minimum 10000 maximum 8e+06 step 1000 value 6.2208e+06
          }
          {fltk::Choice} uiVideoProfile {
            label Profile
            tooltip {The profile controls the characteristics and quality of the codec.  If in doubt, set it to the highest setting.}
            xywh {75 119 90 25}
            extra_code {o->value(4);}
          } {
            {fltk::Item} {} {
              label Baseline
              }
            {fltk::Item} {} {
              label Simple
              }
            {fltk::Item} {} {
              label Core
              }
            {fltk::Item} {} {
              label Main
              }
            {fltk::Item} {} {
              label High
              }
          }
          {fltk::Choice} uiYUVHint {
            label {YUV Hint}
            tooltip {This setting controls how the YUV->RGB conversion is done once the movie is decoded.  It is a hint to the viewer program and does not effect the colors saved in the movie file.}
            xywh {75 164 90 25}
            extra_code {o->value(2);}
          } {
            {fltk::Item} {} {
              label RGB
              }
            {fltk::Item} {} {
              label BT709
              }
            {fltk::Item} {} {
              label Unspecified
              }
            {fltk::Item} {} {
              label Reserved
              }
            {fltk::Item} {} {
              label FCC
              }
            {fltk::Item} {} {
              label BT470BG
              }
            {fltk::Item} {} {
              label SMPTE170M
              }
            {fltk::Item} {} {
              label SMPTE240M
              }
            {fltk::Item} {} {
              label YCOCG
              }
            {fltk::Item} {} {
              label BT2020_NCL
              }
            {fltk::Item} {} {
              label BT2020_CL
              }
          }
          {FL_Check_Button} uiOverrideFPS {
            label {Override FPS} selected
            tooltip {When this setting is on, Media Information Window's FPS setting is not taken into account, but the setting from this GUI is.}
            xywh {55 199 20 25}
          }
          {Fl_Value_Input} uiFPS {
            label FPS
            tooltip {When Override FPS is on, this setting controls the FPS of all movie files saved, instead of relying in Media Information->FPS.}
            xywh {75 229 90 25} selection_color 0xffff0000 minimum 0.1 maximum 180 step 0.001 linesize 10 value 24
          }
          MenuItem {} {
            label YUV444
            xywh {10 10 36 21}
          }
        }
        Fl_Value_Input uiVideoBitrate {
          label Bitrate
          xywh {125 135 83 25} minimum 1000 maximum 1e+06 step 1000 value 100000
        }
      }
      Fl_Group {} {
        label {Audio Options} open
        xywh {55 255 190 130} box UP_BOX
      } {
        Fl_Choice uiAudioCodec {
          label Codec open
          xywh {130 281 85 25} down_box BORDER_BOX
        } {
          MenuItem {} {
            label AC3
            xywh {15 15 36 21}
          }
          MenuItem {} {
            label AAC
            xywh {25 25 36 21}
          }
          MenuItem {} {
            label MP3
            xywh {35 35 36 21}
          }
          MenuItem {} {
            label NONE
            xywh {45 45 36 21}
          }
        }
        Fl_Value_Input uiAudioBitrate {
          label Bitrate
          xywh {130 320 83 25} minimum 1000 maximum 1e+06 step 1000 value 128000
        }
      }
      Fl_Button {} {
        label OK
        user_data this user_data_type {AviSaveUI*}
        callback {video_codec = v->uiVideoCodec->text( v->uiVideoCodec->value() );
video_color = v->uiVideoColor->text( v->uiVideoColor->value() );
video_bitrate = (unsigned)v->uiVideoBitrate->value();
yuv_hint = (unsigned) v->uiYUVHint->value();
fps = -1.0;
if ( v->uiOverrideFPS->value() )
{
  fps = v->uiFPS->value();
}
audio_codec = v->uiAudioCodec->text( v->uiAudioCodec->value() );
audio_bitrate = (unsigned)v->uiAudioBitrate->value();

this->uiMain->make_exec_return(true);}
        xywh {70 425 75 30}
      }
      Fl_Button {} {
          label Cancel
          user_data this user_data_type {AviSaveUI*}
          callback {video_bitrate = 0;
video_codec = "";
video_color = "";
yuv_hint = 0;
fps = -1.0;

audio_codec = "";
audio_bitrate = 0;

v->uiMain->make_exec_return(false);}
        xywh {160 425 75 30}
      }
    }
  }
    Function {AviSaveUI(const mrv::ViewerUI* main)} {} {
      code {fltk::Window* w = make_window();
uiFPS->value( main->uiFPS->value() );
w->exec();} {}
  }
} 
