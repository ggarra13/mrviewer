# data file for the Fltk User Interface Designer (fluid)
version 1.03
header_name {.h}
code_name {.cxx}
decl {\#include <cstring>} {public local
}

decl {\#include <string>} {public local
}

decl {\#include "core/mrvFrame.h" } { public local
}

decl {\#include <algorithm>} {private local
}

decl {\#include "core/mrvI8N.h"} {private local
}

decl {\#include "IccProfile.h"} {private local
}

decl {\#include "IccUtil.h"} {private local
}

decl {\#include "gui/mrvBrowser.h"} {public local
}

decl {\#include "gui/mrvMainWindow.h"} {public local
}

decl {\#include "core/mrvColorProfile.h"} {private local
}

decl {\#include "mrViewer.h"} {private local
}

decl {class CIccProfile;} {public local
}

decl {class ViewerUI;} {public local
}

class ICCProfileUI {open
} {
  decl {Fl_Text_Buffer* uiText;} {private local
  }
  decl {CIccProfile* _profile;} {private local
  }
  Function {ICCProfileUI()} {} {
    code {_profile = NULL;
make_window();} {}
  }
  Function {~ICCProfileUI()} {open
  } {}
  Function {make_window()} {open
  } {
    Fl_Window uiMain {open
      xywh {627 276 650 485} type Double resizable visible
    } {
      Fl_Pack {} {open
	xywh {0 0 637 485}
      } {
	Fl_Group {} {open
	  xywh {0 0 623 161}
	} {
	  Fl_Browser uiTags {
	    label Tags
	    user_data this user_data_type {ICCProfileUI*}
	    callback {v->fill_text();}
	    xywh {0 6 623 155}
	    code0 {static const int widths[] = { -1, 120, 80,  80, 0 };
static const char* labels[] = { "ID", "Tag", "Offset", "Size", NULL };

o->column_widths( widths );
o->column_labels( labels );}
	    class {mrv::Browser}
	  }
	}
	Fl_Group {} {open
	  xywh {0 0 625 461}
	} {
	  Fl_Wizard uiWizard {open
	    xywh {0 0 625 295}
	    code0 {o->value(0);}
	  } {
	    Fl_Text_Display uiTextDisplay {selected
	      xywh {5 10 620 285} hide
	      code0 {uiText = new Fl_Text_Buffer;}
	    }
	    Fl_Group {} {open
	      xywh {0 0 623 290}
	    } {
	      Fl_Box uiDrawing {
		xywh {0 0 620 285}
	      }
	    }
	  }
	}
      }
    }
  }
  Function {replace( const std::string& name )} {open
  } {
    code {_profile = mrv::colorProfile::get( name.c_str() );
if (_profile) fill( name );
uiMain->show();} {}
  }
  Function {fill( const std::string& name )} {open private
  } {
    code {uiMain->copy_label( name.c_str() );
uiText->text(N_(""));
uiTags->clear();

if (!_profile) return;

uiTags->add("Header");
uiTags->value(0);

CIccInfo Fmt;
TagEntryList::iterator i = _profile->m_Tags->begin();
TagEntryList::iterator e = _profile->m_Tags->end();
char buf[256];
char sig[64];
for ( ; i != e; ++i )
{
  sprintf( buf, "%s\\t%s\\t%8d\\t%8d",
	   Fmt.GetTagSigName(i->TagInfo.sig),
	   icGetSig(sig, i->TagInfo.sig, false),
	   i->TagInfo.offset, i->TagInfo.size);
  uiTags->add( strdup(buf) );
}

uiTags->redraw();

fill_text();} {}
  }
  Function {fill_text()} {open
  } {
    code {uiText->text(N_(""));
if (!_profile) return;

int idx = uiTags->value();
if ( idx < 0 ) return;

if ( idx == 0 ) {
  uiText->text( mrv::colorProfile::header( _profile ).c_str() );
  return;
}

TagEntryList::iterator i = _profile->m_Tags->begin();
std::advance( i, idx-1 );
IccTagEntry& entry = *i;
uiText->text( mrv::colorProfile::dump_tag( _profile, entry.TagInfo.sig ).c_str() );
uiTextDisplay->redraw();} {}
  }
}

class ICCProfileListUI {} {
  decl {ICCProfileUI* _info;} {private local
  }
  Function {make_window()} {open
  } {
    Fl_Window uiMain {
      label {ICC Profiles Inspector} open
      xywh {414 58 630 460} type Double hide resizable
    } {
      Fl_Pack {} {open
	xywh {0 14 625 431} box UP_BOX
      } {
	Fl_Group {} {open
	  xywh {2 0 623 381}
	} {
	  Fl_Browser uiProfiles {
	    label {ICC Profiles}
	    xywh {8 26 605 335}
	  }
	}
	Fl_Group {} {open
	  xywh {10 371 605 50}
	} {
	  Fl_Button {} {
	    label Info
	    user_data this user_data_type {ICCProfileListUI*}
	    callback {v->show_info();}
	    xywh {480 5 110 35}
	  }
	}
      }
    }
    code {_info = new ICCProfileUI();} {}
  }
  Function {ICCProfileListUI( ViewerUI* main )} {} {
    code {Fl_Group::current( main->uiMain );
      uiMain = make_window();
      Fl_Group::current(0);
      fill();} {}
  }
  Function {~ICCProfileListUI()} {open
  } {
    code {delete uiMain; uiMain = NULL;} {}
  }
  Function {fill()} {open
  } {
    code {uiProfiles->clear();
const stringArray& profiles = mrv::colorProfile::list();
stringArray::const_iterator i = profiles.begin();
stringArray::const_iterator e = profiles.end();
for ( ; i != e; ++i )
  uiProfiles->add( (*i).c_str() );
uiProfiles->redraw();} {}
  }
  Function {show_info()} {open
  } {
    code {int idx = uiProfiles->value();
if ( idx < 0 ) return;
Fl_Widget* w = uiProfiles->child(idx);
if (!w) return;
const char* label = w->label();
if (!label) return;
if (!_info) return;
_info->replace( label );} {}
  }
}
