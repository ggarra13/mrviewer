// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include <string.h>
#include <iostream>

#include "fltk/Window.h"
#include "fltk/Button.h"
#include "fltk/Browser.h"
#include "fltk/TextEditor.h"
#include "fltk/Font.h"
#include "fltk/draw.h"

#include "gui/mrvFontsWindowUI.h"

class FontDisplay : public fltk::TextEditor {
   public:
     FontDisplay(fltk::Box* B, int X, int Y, int W, int H, const char* L = 0) :
     fltk::TextEditor(X,Y,W,H,L) {box(B);}
};


namespace mrv {

fltk::Font* font_current = NULL;
unsigned    font_size = 32;
std::string font_text;

}


fltk::DoubleBufferWindow *uiMain=(fltk::DoubleBufferWindow *)0;
fltk::ValueSlider* uiFontSize = NULL;
FontDisplay *uiText=(FontDisplay *)0;
fltk::Browser * encobj;
fltk::Widget* id_box;

void encoding_cb(fltk::Widget *, long) {
  int i = encobj->value();
  if (i < 0)
     return;
  // uiText->encoding = encobj->child(i)->label();
  uiText->redraw();
}



static fltk::Font** fonts;

void new_text( fltk::Widget* w, void* data )
{
   mrv::font_text = uiText->text();
}

void new_font( fltk::Widget* w, void* data )
{
   fltk::Choice* c = (fltk::Choice*) w;
   int i = c->value();
   if ( i < 0 ) i = 0;

   mrv::font_text = uiText->text();
   mrv::font_current = fonts[i];
   uiText->textfont( fonts[i] );
   uiText->redraw();
}

void new_size( fltk::Widget* w, void* data )
{
   fltk::ValueSlider* s = (fltk::ValueSlider*) w;
   mrv::font_size = s->value();
   uiText->textsize( s->value() );
   uiText->redraw();
}

static void cb_Accept(fltk::Button*, fltk::Window* v) {
  v->make_exec_return(true);
}

static void cb_Cancel(fltk::Button*, fltk::Window* v) {
  v->make_exec_return(false);
}


namespace mrv {

bool make_window() {
  fltk::DoubleBufferWindow* w;
   {fltk::DoubleBufferWindow* o = uiMain = new fltk::DoubleBufferWindow(405, 260);
    w = o;
    o->type(241);
    o->shortcut(0xff1b);
    o->begin();
     {fltk::Group* o = new fltk::Group(5, 5, 405, 235);
      o->begin();

      uiText = new FontDisplay(fltk::ENGRAVED_BOX, 0, 0, 400, 100);
       {fltk::Choice* o = new fltk::Choice(40, 120, 360, 25, "Font");
        int numfonts = fltk::list_fonts(fonts);
        for (int i = 0; i < numfonts; ++i)
            o->add(fonts[i]->name());
        mrv::font_current = fonts[numfonts-1];
        uiText->textfont( mrv::font_current );
        mrv::font_text = "Type here";
        uiText->text( mrv::font_text.c_str() );
        uiText->textsize( mrv::font_size );
        uiText->callback( new_text );
        o->callback( new_font );
      }
       {fltk::ValueSlider* o = uiFontSize = new fltk::ValueSlider(70, 160, 325, 25, "Font Size");
        o->minimum(8);
        o->maximum(100);
        o->step(1);
        o->value(32);
        o->align(fltk::ALIGN_LEFT);
        o->callback( new_size );
      }
       o->end();

       {fltk::Group* g = new fltk::Group( 0, 200, 405, 55 );
          g->begin();
          {fltk::Button* o = new fltk::Button( 270, 5, 50, 25, "OK" );
             o->callback((fltk::Callback*)cb_Accept, (void*)(w));
          }
          {fltk::Button* o = new fltk::Button( 325, 5, 50, 25, "Cancel" );
             o->callback((fltk::Callback*)cb_Cancel, (void*)(w));
          }
          g->end();
       }

       fltk::Group::current()->resizable(o);
    }
     
    o->end();
    o->set_modal();
  }

   return w->exec();
}

} // namespace mrv
