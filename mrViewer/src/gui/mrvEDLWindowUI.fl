# data file for the FLTK User Interface Designer (FLUID)
version 1.03
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
decl {\#include "mrvEDLGroup.h"} {public
} 

decl {\#include "mrViewer.h"} {public
} 

decl {\#include "FL/fl_ask.H"} {} 

decl {\#include "core/mrvI8N.h"} {} 

decl {\#include "gui/mrvTimeline.h"} {} 

decl {\#include "gui/mrvImageBrowser.h"} {} 

decl {\#include "gui/mrvChoice.h"} {}

decl {\#include "gui/mrvMainWindow.h"} {} 

decl {\#include "mrvReelUI.h"} {}

decl {\#include "gui/mrvImageView.h"} {} 

decl {\#include "icons/icons.c"} {} 

  class EDLWindowUI {open
  } {
    Function {make_window( ViewerUI* main )} {open
    } {
      {Fl_Window} uiMain {
        label {EDL Window} open
        xywh {175 234 1015 260} resizable non_modal visible
      } {
        {Fl_Group} uiEDLRedraw {open
          xywh {0 0 1015 260}
        } {
          {Fl_Group} {} {open
            xywh {105 4 131 26}
          } {
            {Fl_Button} {} {
              user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
              callback {const char* name = fl_input("Reel Name", "reel" );
if ( name == NULL ) return;
v->new_reel(name);}
              tooltip {Create a new reel or EDL track}
              xywh {0 1 25 25} 
              extra_code {o->image( reel_new_24 );}
            }
            {Fl_Button} {} {
              user_data main user_data_type {ViewerUI*}
              callback {v->uiEDLWindow->uiEDLGroup->cut( v->uiTimeline->value() );}
              tooltip {Cut Clip at current location}
              xywh {30 1 25 25} 
              extra_code {o->image( scissors );}
            }
            {Fl_Button} {} {
              user_data main user_data_type {ViewerUI*}
              callback {v->uiEDLWindow->uiEDLGroup->merge( v->uiTimeline->value() );}
              tooltip {Merge two clips near current location.  Clips must be of the same movie or sequence and the left clip must end where the right clip begins.}
              xywh {60 1 25 25} 
              extra_code {o->image( merge_tool );}
            }
            {Fl_Button} uiBGButton {
              label BG
              user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
              callback {v->change_background();}
              tooltip {Set selected reel images as background.}
              xywh {105 0 26 26} box UP_BOX labelfont 1
            }
          }
          {Fl_Slider} uiTimeline {
            user_data main user_data_type {ViewerUI*}
            callback {int64_t frame = (int64_t) o->value();
v->uiView->seek( frame );
v->uiEDLWindow->uiEDLGroup->redraw();} selected
            xywh {95 41 920 32} type TICK_ABOVE textfont 1 textcolor 0x2020200 textsize 12 minimum 1 maximum 100 step 1 value 1 slider_size 10
            extra_code {o->main( main ); 
o->draw_cache( false );}
            class {mrv::Timeline}
          }
          {Fl_Group} uiEDLGroup {
            xywh {95 75 920 185}
            extra_code {o->timeline( uiTimeline ); o->main( main );}
            class {mrv::EDLGroup}
          } {}
          {Fl_Group} {} {open
            xywh {5 72 95 175}
          } {
            {Fl_Group} {} {
              xywh {10 5 85 68}
            } {
              {Fl_Group} {} {open
                xywh {0 0 85 30}
              } {
                {Fl_Button} {} {
                  user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
                  callback {v->open();
int idx = uiEDLChoiceOne->children()-1;
uiEDLChoiceOne->value( idx );}
                  tooltip {Open a new reel}
                  xywh {0 0 25 25} 
                  extra_code {o->image( reel_24 );}
                }
                {Fl_Button} {} {
                  user_data main user_data_type {ViewerUI*}
                  callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceTwo;
if ( c->value() < 0 ) return;

b->reel( c->value() );
b->save_reel();}
                  tooltip {Save current reel
}
                  xywh {25 0 25 25} 
                  extra_code {o->image( reel_save_24 );}
                }
                {Fl_Button} {} {
                  user_data main user_data_type {ViewerUI*}
                  callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceOne;

int sel = c->value();
if ( sel < 0 ) return;

b->reel( sel );
b->remove_reel();}
                  tooltip {Delete current reel}
                  xywh {50 0 25 25} 
                  extra_code {o->image( reel_delete_24 );}
                }
              }
              {Fl_Choice} uiEDLChoiceOne {
                label {Track \#0}
		class mrv::Choice
                user_data uiEDLGroup user_data_type {mrv::EDLGroup*}
                callback {if ( o->value() >= 0 && v->media_track(0) )
{
   v->media_track(0)->reel( o->value() );
   v->redraw();
}
else
{
   o->value(-1);
}} open
                xywh {0 43 75 25} align 5
              } {}
            }
            {Fl_Group} {} {
              xywh {10 98 85 67}
            } {
              {Fl_Group} {} {
                xywh {0 0 85 32}
              } {
                {Fl_Button} {} {
                  user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
                  callback {v->open();
int idx = uiEDLChoiceTwo->children()-1;
uiEDLChoiceTwo->value( idx );}
                  tooltip {Open a new reel}
                  xywh {0 0 25 25} 
                  extra_code {o->image( reel_24 );}
                }
                {Fl_Button} {} {
                  user_data main user_data_type {ViewerUI*}
                  callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceTwo;
if ( c->value() < 0 ) return;

b->reel( c->value() );
b->save_reel();}
                  tooltip {Save current reel
}
                  xywh {25 0 25 25} 
                  extra_code {o->image( reel_save_24 );}
                }
                {Fl_Button} {} {
                  user_data main user_data_type {ViewerUI*}
                  callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceTwo;

int sel = c->value();
if ( sel < 0 ) return;

b->reel( sel );
b->remove_reel();}
                  tooltip {Delete current reel}
                  xywh {50 0 25 25} 
                  extra_code {o->image( reel_delete_24 );}
                }
              }
              {Fl_Choice} uiEDLChoiceTwo {
                label {Track \#1}
		class mrv::Choice
                user_data uiEDLGroup user_data_type {mrv::EDLGroup*}
                callback {if (o->value() >= 0 && v->media_track(1) )
{
  v->media_track(1)->reel( o->value() );
  v->redraw();
}
else
{
  o->value(-1);
}} open
                xywh {0 42 75 25} align 5
                extra_code {o->value( -1 );}
              } {}
            }
          }
        }
      }
    }
    Function {EDLWindowUI( ViewerUI* m )} {} {
      code {Fl_Group::current( m->uiMain );
      make_window(m);
     } {}
    }
    Function {~EDLWindowUI()} {} {
      code {delete uiEDLGroup; uiEDLGroup = NULL;
delete uiMain; uiMain = NULL;} {}
    }
  }
