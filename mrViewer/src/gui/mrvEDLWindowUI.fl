# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cxx}
decl {\#include "mrvEDLGroup.h"} {public local
}

decl {\#include "mrViewer.h"} {public local
}

decl {\#include "FL/fl_ask.H"} {private local
}

decl {\#include "core/mrvI8N.h"} {private local
}

decl {\#include "gui/mrvTimeline.h"} {private local
}

decl {\#include "gui/mrvImageBrowser.h"} {private local
}

decl {\#include "gui/mrvChoice.h"} {private local
}

decl {\#include "mrvReelUI.h"} {private local
}

decl {\#include "gui/mrvImageView.h"} {private local
}

decl {\#include "icons/icons.c"} {private local
}

class EDLWindowUI {open
} {
  Function {make_window( ViewerUI* main )} {open
  } {
    Fl_Window uiMain {
      label {EDL Window} open
      xywh {473 429 1015 265} type Double resizable non_modal size_range {1015 265 1015 265} visible
    } {
      Fl_Group uiEDLRedraw {open
        xywh {0 0 1020 266} box UP_BOX
      } {
        Fl_Slider uiTimeline {
          user_data main user_data_type {ViewerUI*}
          callback {int64_t frame = (int64_t) o->value();
v->uiView->seek( frame );
v->uiEDLWindow->uiEDLGroup->redraw();}
          xywh {90 39 925 21} type Horizontal minimum 1 maximum 50 step 1 value 1
          code0 {o->main( main );
o->draw_cache( false );}
          class {mrv::Timeline}
        }
        Fl_Group {} {open
          xywh {25 25 995 241}
        } {
          Fl_Scrollbar {} {selected
            xywh {995 60 20 206}
          }
          Fl_Group uiEDLGroup {open
            xywh {90 60 925 190} resizable
            code0 {o->timeline( uiTimeline ); o->main( main );}
            class {mrv::EDLGroup}
          } {}
        }
        Fl_Group {} {
          xywh {0 63 95 177}
        } {
          Fl_Group {} {open
            xywh {5 63 80 77}
          } {
            Fl_Button {} {
              user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
              callback {v->open();
int idx = uiEDLChoiceOne->children()-1;
uiEDLChoiceOne->value( idx );}
              tooltip {Open a new reel} image {../../icons/reel_24.xpm} xywh {5 63 28 26}
            }
            Fl_Button {} {
              user_data main user_data_type {ViewerUI*}
              callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceOne;
if ( c->value() < 0 ) return;

b->reel( c->value() );
b->save_reel();}
              tooltip {Save current reel} image {../../icons/reel_save_24.xpm} xywh {32 63 28 26}
            }
            Fl_Button {} {
              user_data main user_data_type {ViewerUI*}
              callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceOne;

int sel = c->value();
if ( sel < 0 ) return;

b->reel( sel );
b->remove_reel();}
              tooltip {Delete current reel} image {../../icons/reel_delete_24.xpm} xywh {59 63 26 26}
            }
            Fl_Choice uiEDLChoiceOne {
              label {Track \#1}
              user_data uiEDLGroup user_data_type {mrv::EDLGroup*}
              callback {if ( o->value() >= 0 && v->media_track(0) )
{
   v->media_track(0)->reel( (int) o->value() );
   v->redraw();
}
else
{
   o->value(-1);
}}
              xywh {5 107 80 28} down_box BORDER_BOX align 5
              class {mrv::Choice}
            } {}
          }
          Fl_Group {} {open
            xywh {5 168 90 72}
          } {
            Fl_Group {} {open
              xywh {6 168 80 31}
            } {
              Fl_Button {} {
                user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
                callback {v->open();
int idx = uiEDLChoiceOne->children()-1;
uiEDLChoiceOne->value( idx );}
                tooltip {Open a new reel} image {../../icons/reel_24.xpm} xywh {6 168 28 26}
              }
              Fl_Button {} {
                user_data main user_data_type {ViewerUI*}
                callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceTwo;
if ( c->value() < 0 ) return;

b->reel( c->value() );
b->save_reel();}
                tooltip {Save current reel} image {../../icons/reel_save_24.xpm} xywh {33 168 28 26}
              }
              Fl_Button {} {
                user_data main user_data_type {ViewerUI*}
                callback {mrv::ImageBrowser* b = v->uiReelWindow->uiBrowser;
mrv::Choice* c = v->uiEDLWindow->uiEDLChoiceTwo;

int sel = c->value();
if ( sel < 0 ) return;

b->reel( sel );
b->remove_reel();}
                tooltip {Delete current reel} image {../../icons/reel_delete_24.xpm} xywh {60 168 26 26}
              }
            }
            Fl_Choice uiEDLChoiceTwo {
              label {Track \#2}
              user_data uiEDLGroup user_data_type {mrv::EDLGroup*}
              callback {if ( o->value() >= 0 && v->media_track(1) )
{
   v->media_track(1)->reel( (int) o->value() );
   v->redraw();
}
else
{
   o->value(-1);
}}
              xywh {6 212 80 28} down_box BORDER_BOX align 5
              class {mrv::Choice}
            } {}
          }
        }
        Fl_Group {} {
          xywh {110 2 255 39}
        } {
          Fl_Button {} {
            label new
            user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
            callback {const char* name = fl_input("Reel Name", "reel" );
if ( name == NULL ) return;
v->new_reel(name);}
            tooltip {Create a new reel or EDL track} image {../../icons/reel_24.xpm} xywh {110 6 40 29} labeltype EMBOSSED_LABEL labelcolor 135 align 535
          }
          Fl_Button {} {
            user_data main user_data_type {ViewerUI*}
            callback {v->uiEDLWindow->uiEDLGroup->cut( v->uiTimeline->value() );}
            tooltip {Cut Clip at current location} image {../../icons/scissors.xpm} xywh {150 6 25 30}
          }
          Fl_Button {} {
            user_data main user_data_type {ViewerUI*}
            callback {v->uiEDLWindow->uiEDLGroup->merge( v->uiTimeline->value() );}
            tooltip {Merge two clips near current location.  Clips must be of the same movie or sequence and the left clip must end where the right clip begins.} image {../../icons/merge_tool.xpm} xywh {175 6 25 30}
          }
          Fl_Button FadeIn {
            label {Fade In}
            user_data uiEDLGroup user_data_type {mrv::EDLGroup*}
            callback {v->fade_in();
o->value(1);}
            tooltip {Fade In a clip} xywh {201 6 60 30} down_box DOWN_BOX
          }
          Fl_Button FadeOut {
            label {Fade Out}
            user_data uiEDLGroup user_data_type {mrv::EDLGroup*}
            callback {v->fade_out();
o->value(1);}
            tooltip {Fade Out a clip} xywh {261 6 75 30} down_box DOWN_BOX
          }
          Fl_Button uiBGButton {
            label BG
            user_data {main->uiReelWindow->uiBrowser} user_data_type {mrv::ImageBrowser*}
            callback {v->change_background();}
            tooltip {Set selected reel images as background.} xywh {336 6 26 30} labelfont 1
          }
        }
      }
    }
  }
  Function {EDLWindowUI( ViewerUI* main )} {open
  } {
    code {make_window( main );} {}
  }
  Function {~EDLWindowUI()} {open
  } {
    code {delete uiMain; uiMain = NULL;} {}
  }
}
