# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {\#include "core/mrvACES.h"} {public local
}

decl {\#include "gui/mrvMedia.h"} {public local
}

decl {\#include "gui/mrvImageView.h"} {public local
}

decl {\#include "gui/mrvMainWindow.h"} {public local
}

class SopNode {open
} {
  decl {mrv::media m;} {private local
  }
  Function {make_window(mrv::ImageView* view)} {open
  } {
    Fl_Window uiMain {open
      xywh {969 670 560 325} type Double resizable non_modal visible
    } {
      Fl_Group {} {open
        xywh {0 0 560 325} box FLAT_BOX
      } {
        Fl_Group {} {
          label Slope selected
          xywh {61 26 210 134} box ROUNDED_BOX
        } {
          Fl_Value_Slider SlopeRUI {
            label R
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.slope( 0, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {93 43 160 25} type Horizontal align 4 when 4 maximum 10 value 1
          }
          Fl_Value_Slider SlopeGUI {
            label G
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.slope( 1, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {93 77 160 25} type Horizontal align 4 when 4 maximum 10 value 1
          }
          Fl_Value_Slider SlopeBUI {
            label B
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.slope( 2, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {93 110 160 25} type Horizontal align 4 when 4 maximum 10 value 1
          }
        }
        Fl_Group {} {
          label Power selected
          xywh {61 186 210 134} box ROUNDED_BOX
        } {
          Fl_Value_Slider PowerRUI {
            label R
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.power( 0, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {86 204 160 25} type Horizontal align 4 when 4 maximum 10 value 1
          }
          Fl_Value_Slider PowerGUI {
            label G
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.power( 1, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {85 238 160 25} type Horizontal align 4 when 4 maximum 10 value 1
          }
          Fl_Value_Slider PowerBUI {
            label B
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.power( 2, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {85 271 160 25} type Horizontal align 4 when 4 maximum 10 value 1
          }
        }
        Fl_Group {} {
          label Offset selected
          xywh {295 26 210 134} box ROUNDED_BOX
        } {
          Fl_Value_Slider OffsetRUI {
            label R
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.offset( 0, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {321 45 169 25} type Horizontal align 4 when 4 maximum 10
          }
          Fl_Value_Slider OffsetGUI {
            label G
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.offset( 1, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {320 79 170 25} type Horizontal align 4 when 4 maximum 10
          }
          Fl_Value_Slider OffsetBUI {
            label B
            user_data view user_data_type {mrv::ImageView*}
            callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.offset( 2, o->value() );
send_sop( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
            xywh {320 112 170 25} type Horizontal align 4 when 4 maximum 10
          }
        }
        Fl_Value_Slider SaturationUI {
          label Saturation
          user_data view user_data_type {mrv::ImageView*}
          callback {mrv::media m = v->foreground();
if (! m ) return;

mrv::CMedia* img = m->image();

ACES::ASC_CDL& a = img->asc_cdl();
a.saturation( o->value() );
send_sat( img, v );
img->image_damage( img->image_damage() | mrv::CMedia::kDamageLut );
v->redraw();} selected
          xywh {370 220 135 25} type Horizontal align 4 when 4 value 1
        }
      }
    }
    code {refresh();} {}
    code {uiMain->show();} {}
  }
  Function {SopNode( mrv::ImageView* view )} {open
  } {
    code {m = view->foreground();
Fl_Group::current( view->fltk_main() );
make_window(view);
Fl_Group::current( 0 );} {}
  }
  Function {~SopNode()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
  Function {refresh()} {} {
    code {if (!m) return;
mrv::CMedia* img = m->image();
const ACES::ASC_CDL& cdl = img->asc_cdl();
SaturationUI->value( cdl.saturation() );
SlopeRUI->value( cdl.slope(0) );
SlopeGUI->value( cdl.slope(1) );
SlopeBUI->value( cdl.slope(2) );
OffsetRUI->value( cdl.offset(0) );
OffsetGUI->value( cdl.offset(1) );
OffsetBUI->value( cdl.offset(2) );
PowerRUI->value( cdl.power(0) );
PowerGUI->value( cdl.power(1) );
PowerBUI->value( cdl.power(2) );} {}
  }
  Function {media( const mrv::media fg )} {open
  } {
    code {m = fg;
refresh();} {}
  }
  Function {send_sop( mrv::CMedia* img, mrv::ImageView* v )} {open
  } {
    code {char buf[1024];
const ACES::ASC_CDL& a = img->asc_cdl();
sprintf( buf, "LMT.SOPNode %g %g %g "
               "%g %g %g "
               "%g %g %g",
               a.slope(0),
               a.slope(1),
               a.slope(2),
               a.offset(0),
               a.offset(1),
               a.offset(2),
               a.power(0),
               a.power(1),
               a.power(2) );

v->send_network( buf );} {}
  }
  Function {send_sat( mrv::CMedia* img, mrv::ImageView* v )} {open
  } {
    code {char buf[1024];
const ACES::ASC_CDL& a = img->asc_cdl();
sprintf( buf, "LMT.SatNode %g",
               a.saturation() );

v->send_network( buf );} {}
  }
}
