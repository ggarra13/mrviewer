# data file for the Fltk User Interface Designer (fluid)
version 1.04
header_name {.h}
code_name {.cxx}

decl {\#include <core/mrvFrame.h>} {public local
}

decl {\#include <string>} {public local
}


decl {\#include <iostream>} {private local
}

decl {\#include <ImfCompression.h>} {public local
}

decl {\#include <ImfPixelType.h>} {public local
}

decl {\#include <FL/Fl.H>} {private local
}

decl {\#include <gui/mrvPreferences.h>} {public local
}

decl {\#include <gui/mrvMainWindow.h>} {public local
}

decl {\#include <gui/mrvIO.h>} {public local
}

decl {\#include <gui/mrvChoice.h>} {public local
}

decl {\#include <core/exrImage.h>} {public local
}

decl {\#include <core/mrvImageOpts.h>} {public local
}

decl {\#include <mrViewer.h>} {public local
}

class EXROptionsUI {open selected : {public mrv::EXROpts}
} {
  decl {std::string compression;} {public local
  }
  decl {std::string pixel_type;} {public local
  }
  Function {make_window(bool aces, bool all_layers, bool deep_data)} {open
  } {
    Fl_Window uiMain {
      label {OpenEXR Saving} open
      xywh {536 152 465 445} type Double resizable modal noborder visible
    } {
      Fl_Group {} {
        label {OpenEXR Options} open
        xywh {46 48 372 315} box UP_BOX
      } {
        Fl_Choice uiCompression {
          label Compression
          user_data this user_data_type {EXROptionsUI*}
	  class mrv::Choice
          callback {compression = o->child(o->value())->label();
if ( compression == "DWAA" ||
     compression == "DWAB" )
{
v->uiDWACompression->activate();
}
else
{
v->uiDWACompression->deactivate();
}}
          tooltip {EXR compression algorithm.} xywh {170 84 91 26} down_box BORDER_BOX align 1
          code0 {o->value(mrv::exrImage::_default_compression);}
        } {
          MenuItem {} {
            label None
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label RLE
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {ZIP SCANLINE}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label ZIP
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label PIZ
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label PXR24
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label B44
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label B44A
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label DWAA
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label DWAB
            xywh {0 0 100 20}
          }
        }
        Fl_Choice uiPixelFormat {
          label {Pixel Format}
          callback {pixel_type = o->child(o->value())->label();}
	  class mrv::Choice
          tooltip {Pixel Format to save image.   Usually Half.} xywh {170 140 90 25} down_box BORDER_BOX align 1
        } {
          MenuItem {} {
            label Half
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Float
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label UInt
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Value_Slider uiDWACompression {
        label {DWA Compression}
        tooltip {DWA/DWB compression} xywh {215 181 138 34} type Horizontal align 4 minimum 1 maximum 250 step 10 value 45 deactivate
        code0 {o->value( mrv::exrImage::_default_dwa_compression );}
      }
      Fl_Light_Button uiACESmetadata {
        label {ACES metadata}
        tooltip {Saves out ACES clip metadata (CTL transforms) into an ACESclip file.} xywh {140 317 185 38}
        code0 {o->value( aces );}
      }
      Fl_Light_Button uiAllLayers {
        label {All Layers}
        xywh {139 236 186 34}
        code0 {o->value( all_layers );}
      }
      Fl_Light_Button uiDeepData {
        label {Deep Data}
        tooltip {With this option, you can save all the deep data of the image.  Note that this copies the original image onto a new image.  If you save over the same image, you will corrupt it.} xywh {139 276 186 34}
        code0 {o->value( deep_data );
if (!deep_data) 
{
o->deactivate();
}}
      }
      Fl_Button {} {
        label OK
        user_data this user_data_type {EXROptionsUI*}
        callback {v->active( true );
v->uiMain->hide(); }
        xywh {115 386 86 41}
      }
      Fl_Button {} {
        label Cancel
        user_data this user_data_type {EXROptionsUI*}
        callback {v->active( false );
v->uiMain->hide(); }
        xywh {224 386 93 41}
      }
      }
  }
  Function {convert()} {open
  } {
    code {_compression = (Imf::Compression) uiCompression->value();
_dwa_compression_level = (float) uiDWACompression->value();
_ACESmetadata = uiACESmetadata->value();
_all_layers = uiAllLayers->value();
_save_deep_data = uiDeepData->value();} {}
    code {if ( pixel_type == "Half" ) _pixel_type = Imf::HALF;
else if ( pixel_type == "Float" ) _pixel_type = Imf::FLOAT;
else if ( pixel_type == "UInt" ) _pixel_type = Imf::UINT;} {}
  }
  Function {EXROptionsUI(const ViewerUI* main, bool aces = false, bool all_layers = false, bool has_deep_data = false) : mrv::EXROpts(aces, all_layers)} {open
  } {
    code {Fl_Window* w = make_window(aces, all_layers, has_deep_data);
      mrv::MainWindow* m = main->uiMain;
      int x = m->x() + ( m->w() - w->w() ) / 2;
      int y = m->y() + ( m->h() - w->h() ) / 2;
      w->set_modal();
      w->show();
      while ( w->visible() )
         Fl::check();
       convert();} {}
  }
}
