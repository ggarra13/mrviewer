# data file for the FLTK User Interface Designer (FLUID)
version 2.1000 
images_dir fltk::Button 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
decl {\#include <iostream>} {} 

decl {\#include <fltk/run.h>} {} 

decl {\#include <gui/mrvPreferences.h>} {public
} 
decl {\#include <gui/mrvIO.h>} {public
} 

decl {\#include <core/exrImage.h>} {public
} 

decl {\#include <core/mrvImageOpts.h>} {public
} 

decl {\#include <ImfCompression.h>} {public
} 

decl {\#include <ImfPixelType.h>} {public
} 

decl {\#include <string>} {public
} 

namespace mrv {open
} {
  class EXROptionsUI {open : {public EXROpts}
  } {
    decl {std::string compression;} {public
    }
    decl {std::string pixel_type;} {public
    }
    Function {make_window(bool aces)} {open
    } {
      {fltk::Window} uiMain {
        label {OpenEXR Saving} open
        xywh {228 149 465 445} resizable modal noborder visible
      } {
        {fltk::Group} {} {
          label {OpenEXR Options}
          xywh {46 48 372 315} box UP_BOX
        } {
          {fltk::Choice} uiCompression {
            label Compression
            user_data this user_data_type {EXROptionsUI*}
            callback {compression = o->child(o->value())->label();
if ( compression == "DWAA" ||
     compression == "DWAB" )
{
v->uiDWACompression->activate();
}
else
{
v->uiDWACompression->deactivate();
}}
            tooltip {EXR compression algorithm.}
            xywh {138 30 91 26} align 1
            extra_code {o->value(exrImage::_default_compression);}
          } {
            {fltk::Item} {} {
              label None
              }
            {fltk::Item} {} {
              label RLE
              }
            {fltk::Item} {} {
              label {ZIP SCANLINE}
              }
            {fltk::Item} {} {
              label ZIP
              }
            {fltk::Item} {} {
              label PIZ
              }
            {fltk::Item} {} {
              label PXR24
              }
            {fltk::Item} {} {
              label B44
              }
            {fltk::Item} {} {
              label B44A
              }
            {fltk::Item} {} {
              label DWAA
              }
            {fltk::Item} {} {
              label DWAB
              }
          }
          {fltk::Choice} uiPixelFormat {
            label {Pixel Format}
            callback {pixel_type = o->child(o->value())->label();}
            tooltip {Pixel Format to save image.   Usually Half.}
            xywh {138 86 90 25} align 1
          } {
            {fltk::Item} {} {
              label Half
              }
            {fltk::Item} {} {
              label Float
              }
            {fltk::Item} {} {
              label UInt
              }
          }
        }
        {fltk::ValueSlider} uiDWACompression {
          label {DWA Compression}
          tooltip {DWA/DWB compression}
          xywh {215 181 138 34} align 4 deactivate minimum 1 maximum 250 step 10 value 45
        }
        {fltk::LightButton} uiACESmetadata {
          label {ACES metadata}
          tooltip {Saves out ACES clip metadata (CTL transforms) into an ACESclip file.}
          xywh {140 282 185 38}
          extra_code {o->value( aces );}
        }
        {fltk::LightButton} uiAllLayers {
          label {All Layers}
          xywh {139 236 186 34}
        }
        {fltk::Button} {} {
          label OK
          user_data this user_data_type {EXROptionsUI*}
          callback {v->active( true );
v->uiMain->make_exec_return(true);}
          xywh {115 386 86 41}
        }
        {fltk::Button} {} {
          label Cancel
          user_data this user_data_type {EXROptionsUI*}
          callback {v->active( false );
v->uiMain->make_exec_return(false);}
          xywh {224 386 93 41}
        }
      }
    }
    Function {convert()} {open
    } {
      code {_compression = (Imf::Compression) uiCompression->value();
_dwa_compression_level = (float) uiDWACompression->value();
_ACESmetadata = uiACESmetadata->value();
_all_layers = uiAllLayers->value();} {selected
      }
      code {if ( pixel_type == "Half" ) _pixel_type = Imf::HALF;
else if ( pixel_type == "Float" ) _pixel_type = Imf::FLOAT;
else if ( pixel_type == "UInt" ) _pixel_type = Imf::UINT;} {}
    }
    Function {EXROptionsUI(bool aces = false) : EXROpts(aces)} {open
    } {
      code {fltk::Window* w = make_window(aces);
if ( w->exec() ) {
	w->hide();
	fltk::check();
	convert();
}} {}
    }
  }
} 
