# data file for the FLTK User Interface Designer (FLUID)
version 2.1000 
images_dir fltk::Button 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
decl {\#include "string"} {public
} 

decl {\#include "core/mrvI8N.h"} {} 

decl {\#include "core/mrvAudioEngine.h"} {} 

decl {\#include "core/mrvMath.h"} {} 

decl {\#include "core/exrImage.h"} {} 

decl {\#include "core/aviImage.h"} {} 

decl {\#include "core/stubImage.h"} {} 

decl {\#include "core/mrvColorSpaces.h"} {} 

decl {\#include "core/mrvServer.h"} {} 

decl {\#include "core/mrvClient.h"} {} 

decl {\#include "gui/mrvMainWindow.h"} {} 

decl {\#include "gui/mrvImageView.h"} {} 

decl {\#include "gui/mrvImageBrowser.h"} {} 

decl {\#include "gui/mrvBrowser.h"} {} 

decl {\#include "gui/mrvPreferencesBrowser.h"} {} 

decl {\#include "gui/mrvCTLBrowser.h"} {public
} 

decl {\#include "mrvFileRequester.h"} {} 

decl {\#include "gui/mrvPopupMenu.h"} {public
} 

decl {\#include "gui/mrvTimecode.h"} {} 

decl {\#include "gui/mrvTimeline.h"} {} 

decl {\#include "gui/mrvColorOps.h"} {} 

decl {\#include "gui/mrvHistogram.h"} {} 

decl {\#include "gui/mrvValueInput.h"} {public
} 

decl {\#include "gui/mrvActionWindow.h"} {public
} 

decl {\#include "gui/mrvVectorscope.h"} {} 

decl {\#include "gui/mrvImageInformation.h"} {} 

decl {\#include "gui/mrvOCIOBrowser.h"} {public
} 

decl {\#include "gui/mrvPreferences.h"} {} 

decl {\#include "gui/mrvLogDisplay.h"} {} 

decl {\#include "gui/mrvGlWindow3d.h"} {public
} 

decl {\#include "gui/mrvHotkey.h"} {} 

decl {\#include "mrvSOPNode.h"} {} 

decl {\#include "mrvPlayback.h"} {} 

decl {\#include "mrvVersion.h"} {} 

decl {\#include "mrvStereoUI.h"} {public
} 

decl {\#include "mrvIccProfileUI.h"} {} 

decl {\#include "mrvColorAreaUI.h"} {} 

decl {\#include "mrvEDLWindowUI.h"} {} 

decl {\#include "icons/icons.c"} {} 

decl {\#include "fltk/ColorChooser.h"} {} 

decl {\#include "fltk/ask.h"} {} 

decl {\#include "fltk/run.h"} {} 

Function {make_ctl_browser(std::string ctl, const char* prefix)} {open return_type {std::string}
} {
  code {std::string orig = ctl;} {}
  {fltk::Window} {} {
    label {CTL Browser}
    xywh {312 387 395 447} horizontal hide resizable hotspot modal
  } {
    {fltk::Group} {} {open
      xywh {10 26 375 411}
    } {
      {fltk::Browser} browser {
        label {Select a CTL script}
        user_data {&ctl} user_data_type {std::string*}
        callback {int elem = o->value();
if ( elem < 0 || elem >= o->children() ) { v->clear(); return; }
*v = o->child(elem)->label();}
        xywh {0 0 375 365}
        extra_code {o->set_prefix(prefix);
o->value(-1);
if ( !ctl.empty() )
{
  fltk::Widget* elem = o->find( ctl.c_str() );

  for (int i = 0; i < o->children(); ++i )
  {
    if ( o->child(i) == elem ) {
      o->value(i); break;
    }
  }
}}
        class {mrv::CTLBrowser}
      } {}
      {fltk::Button} {} {
        label Empty
        user_data w user_data_type {fltk::Window*}
        callback {browser->clear();
browser->deselect();
browser->value(-1);
browser->do_callback();
v->make_exec_return(true);}
        tooltip {Accept an empty CTL file.  This clears the CTL selection and sends an okay.}
        xywh {5 375 85 25}
      }
      {fltk::Button} {} {
        label Accept
        user_data w user_data_type {fltk::Window*}
        callback {v->make_exec_return(true);}
        tooltip {Accept the selected CTL file.}
        xywh {195 375 85 25}
      }
      {fltk::Button} {} {
        label Cancel
        user_data w user_data_type {fltk::Window*}
        callback {v->make_exec_return(false);}
        tooltip {Cancel the CTL selection and don't change anything.}
        xywh {290 375 80 25}
      }
    }
  }
  code {if (!w->exec())
        return orig;
return ctl;} {}
} 

namespace mrv {open
} {
  decl {class Browser;} {public
  }
  decl {class Histogram;} {public
  }
  decl {class ImageBrowser;} {public
  }
  decl {class ImageInformation;} {public
  }
  decl {class ImageView;} {public
  }
  decl {class LogDisplay;} {public
  }
  decl {class MainWindow;} {public
  }
  decl {class PreferencesBrowser;} {public
  }
  decl {class Timecode;} {public
  }
  decl {class Timeline;} {public
  }
  decl {class Vectorscope;} {public
  }
  decl {class SopNode;} {public
  }
  decl {class ViewerUI;} {public
  }
  decl {class ICCProfileListUI;} {public
  }
  decl {class StereoUI;} {public
  }
  decl {class ColorAreaUI;} {public
  }
  decl {class GL3dViewUI;} {public
  }
  decl {class HotkeyUI;} {public
  }
  decl {class PaintUI;} {public
  }
  decl {class ConnectionUI;} {public
  }
  decl {class EDLWindowUI;} {public
  }
  class ReelUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label {Reel List} open
        xywh {463 411 405 350} hide resizable
        extra_code {o->size_range(350,320);
// Make the window transient
o->child_of( main->uiMain );}
      } {
        {fltk::Browser} uiBrowser {
          xywh {0 32 405 318} box UP_BOX
          extra_code {o->main( main );
o->scrollbar.buttoncolor( mrv::lighter( o->color(), 0x20 ) );
o->hscrollbar.buttoncolor( mrv::lighter( o->color(), 0x20 ));
o->scrollbar.color( o->buttoncolor() );
o->hscrollbar.color( o->buttoncolor() );}
          class {mrv::ImageBrowser}
        } {}
        {fltk::Group} {} {open
          xywh {0 0 405 32} box UP_BOX
        } {
          {fltk::Choice} {} {
            user_data uiBrowser user_data_type {mrv::ImageBrowser*}
            callback {v->reel(o->value());} open
            xywh {5 5 120 20} align 36 box THIN_DOWN_BOX
            extra_code {uiBrowser->reel_choice(o);}
          } {}
          {fltk::Group} uiReelOps {
            xywh {130 3 81 26}
          } {
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {const char* name = fltk::input("Reel Name", "reel" );
if ( name == NULL ) return;
v->new_reel(name);}
              tooltip {Create a new reel}
              xywh {0 0 26 26} box UP_BOX shortcut 0x4006e
              extra_code {o->image( reel_new_24 );}
            }
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->save_reel();}
              tooltip {Save current reel}
              xywh {26 0 26 26} box UP_BOX
              extra_code {o->image( reel_save_24 );}
            }
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->remove_reel();}
              tooltip {Delete current reel}
              xywh {52 0 26 26} box UP_BOX
              extra_code {o->image( reel_delete_24 );}
            }
          }
          {fltk::Group} uiImageOps {open
            xywh {216 3 105 26}
          } {
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->open();}
              tooltip {Open new image, sequence or movie}
              xywh {1 0 26 26} box UP_BOX shortcut 0x4006f
              extra_code {o->image(file_open_24);}
            }
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->save_sequence();}
              tooltip {Save sequence or movie.}
              xywh {27 0 26 26} box UP_BOX shortcut 0x40073
              extra_code {o->image(file_save_24);}
            }
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->clone_current();}
              tooltip {Clone image}
              xywh {53 0 26 26} box UP_BOX shortcut 0x40063
              extra_code {o->image(file_clone_24);}
            }
            {fltk::Button} {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->remove_current();}
              tooltip {Remove current image from reel.}
              xywh {79 0 26 26} box UP_BOX shortcut 0xffff
              extra_code {o->image(file_delete_24);}
            }
          }
          {fltk::Group} uiViewerOps {open
            xywh {324 3 79 26}
          } {
            {fltk::Button} {} {
              label CTL
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->attach_ctl_script();}
              tooltip {Set image CTL script}
              xywh {0 0 26 26} box UP_BOX labelfont 1
            }
            {fltk::Button} uiBGButton {
              label BG
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->change_background();}
              tooltip {Set reel images as background (needs EDL).}
              xywh {26 0 26 26} box UP_BOX labelfont 1
            }
            {fltk::Button} uiEDLButton {
              label EDL
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->toggle_edl();}
              tooltip {Toggle Reel in Timeline}
              xywh {52 0 26 26} box UP_BOX labelfont 1 labelsize 11
            }
          }
        }
      }
    }
    Function {ReelUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~ReelUI()} {open
    } {
      code {delete uiBrowser; uiBrowser = NULL;
delete uiMain; uiMain = NULL;} {}
    }
  }
  class ImageInfoUI {} {
    decl {ViewerUI* main_;} {}
    Function {make_window(ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label {Media Information}
        user_data this user_data_type {ImageInfoUI*}
        callback {//v->main()->uiView->send_network( "MediaInfoWindow 0" );
o->hide();}
        xywh {374 107 505 530} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );
main_ = main;}
      } {
        {fltk::Group} uiInfoText {
          user_data uiInfoText user_data_type {mrv::ImageInformation*} open
          xywh {2 2 498 526}
          extra_code {o->main( main );}
          class {mrv::ImageInformation}
        } {}
      }
    }
    Function {ImageInfoUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~ImageInfoUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {open return_type {ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class AboutUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label {About mrViewer} open
        xywh {24 65 445 395} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );} modal
      } {
        {fltk::TabGroup} {} {
          user_data main user_data_type {mrv::ViewerUI*}
          callback {v->uiAbout->uiGPUInfo->clear();
v->uiAbout->uiGPUInfo->add( mrv::gpu_information( v ).c_str() );} open
          xywh {4 4 441 391}
        } {
          {fltk::Group} {} {
            label mrViewer open
            xywh {0 20 440 371}
          } {
            {fltk::TextDisplay} {} {
              xywh {15 15 415 345} textsize 14
              extra_code {o->text( mrv::about_message().c_str() );}
            }
          }
          {fltk::Group} {} {
            label HW open
            xywh {0 20 440 371} hide
          } {
            {fltk::TextDisplay} uiCPUInfo {
              label {CPU Information}
              xywh {15 30 415 96} align 1 textsize 14
              extra_code {o->text( mrv::cpu_information().c_str() );}
            }
            {fltk::Browser} uiGPUInfo {
              label {GPU Information} open
              xywh {16 151 415 205}
              extra_code {static int widths[] = {
160,
o->w()-160,
0
};
o->column_widths( widths );
o->value(-1);}
              class {mrv::Browser}
            } {}
          }
          {fltk::Group} {} {
            label Formats open
            xywh {0 20 445 370} hide
          } {
            {fltk::Browser} {} {
              xywh {15 15 415 345}
              extra_code {static const char* col_labels[] = {
"",
"",
"",
"Extension",
"Handler",
"Format Name",
0
};

static int col_widths[] = {
20,
20,
20,
120,
120,
300,
0
};
o->column_labels( col_labels );
o->column_widths( col_widths );


ffmpeg_formats(*o);
o->value(-1);}
            } {}
          }
          {fltk::Group} {} {
            label Codecs open
            xywh {0 20 445 375} vertical hide
          } {
            {fltk::Browser} {} {
              label Video
              xywh {15 20 410 150}
              extra_code {ffmpeg_video_codecs(*o);
o->value(-1);}
            } {}
            {fltk::Browser} {} {
              label Audio open
              xywh {15 190 415 110}
              extra_code {ffmpeg_audio_codecs(*o);
o->value(-1);}
            } {}
            {fltk::Browser} {} {
              label Subtitles open
              xywh {15 315 415 55}
              extra_code {ffmpeg_subtitle_codecs(*o);
o->value(-1);}
            } {}
          }
          {fltk::Group} {} {
            label Protocols open
            xywh {0 20 445 370} vertical hide deactivate
          } {
            {fltk::Browser} {} {
              xywh {15 15 415 345}
              extra_code {o->add( ffmpeg_protocols().c_str() );
o->value(-1);}
            } {}
          }
          {fltk::Group} {} {
            label {Motion Estimation Methods} open
            xywh {0 20 445 370} vertical hide
          } {
            {fltk::Browser} {} {
              xywh {15 15 415 345}
              extra_code {static int col_widths[] = {
120,
300,
0
};
o->column_widths( col_widths );
o->add( ffmpeg_motion_estimation_methods().c_str() );
o->value(-1);}
            } {}
          }
        }
      }
    }
    Function {AboutUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~AboutUI()} {open
    } {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class GL3dViewUI {} {
    decl {mrv::ViewerUI* main_;} {}
    Function {make_window(ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label {3d View}
        user_data this user_data_type {GL3dViewUI*}
        callback {v->main()->uiView->send_network( "GL3dView 0" );
o->hide();}
        xywh {158 641 325 240} set_xy hide resizable
        extra_code {// Make the window transient
main_ = main;
o->child_of( main->uiMain );}
        class {mrv::GlWindow3d}
      } {}
    }
    Function {GL3dViewUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~GL3dViewUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {return_type {mrv::ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class VectorscopeUI {} {
    decl {mrv::ViewerUI* main_;} {}
    Function {make_window(ViewerUI* main)} {private
    } {
      {fltk::Window} uiMain {
        label Vectorscope
        user_data this user_data_type {VectorscopeUI*}
        callback {v->main()->uiView->send_network( "VectorscopeWindow 0" );
o->hide();} open
        xywh {107 386 325 240} hide resizable
        extra_code {// Make the window transient
main_ = main;
o->child_of( main->uiMain );}
      } {
        {fltk::Widget} uiVectorscope {
          xywh {4 4 319 231}
          extra_code {o->main( main );}
          class {mrv::Vectorscope}
        }
      }
    }
    Function {VectorscopeUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~VectorscopeUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {return_type {mrv::ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class HistogramUI {} {
    decl {mrv::ViewerUI* main_;} {}
    Function {make_window(mrv::ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label Histogram
        user_data this user_data_type {HistogramUI*}
        callback {v->main()->uiView->send_network( "HistogramWindow 0" );
o->hide();}
        xywh {206 308 325 240} hide resizable
        extra_code {// Make the window transient
main_ = main;
o->child_of( main->uiMain );
o->size_range(325, 80);}
      } {
        {fltk::PackedGroup} {} {open
          xywh {3 5 321 230}
        } {
          {fltk::Widget} uiHistogram {
            xywh {1 0 319 190} resizable
            extra_code {o->main( main );}
            class {mrv::Histogram}
          }
          {fltk::Group} {} {
            xywh {7 195 310 30}
          } {
            {fltk::Group} {} {open
              xywh {0 5 160 25}
            } {
              {fltk::InvisibleBox} {} {
                label Channel
                xywh {0 0 65 25} align 32
              }
              {fltk::PopupMenu} {} {
                label RGB
                callback {int c = o->value();
uiHistogram->channel( (mrv::Histogram::Channel) c );
o->label( o->child( c )->label() );}
                xywh {66 0 85 25} align 48
                extra_code {o->value(0);}
              } {
                {fltk::Item} {} {
                  label RGB
                  }
                {fltk::Item} {} {
                  label Red
                  }
                {fltk::Item} {} {
                  label Green
                  }
                {fltk::Item} {} {
                  label Blue
                  }
                {fltk::Item} {} {
                  label Lumma
                  }
              }
            }
            {fltk::Group} {} {open
              xywh {164 5 146 25}
            } {
              {fltk::InvisibleBox} {} {
                label Type
                xywh {1 0 49 25} align 32
              }
              {fltk::PopupMenu} {} {
                label Linear
                callback {int c = o->value();
uiHistogram->histogram_type( (mrv::Histogram::Type) c);
o->label( o->child( c )->label() );} open
                xywh {51 0 95 25} align 48
                extra_code {o->value( (int) uiHistogram->histogram_type() );
o->label( o->child( o->value() )->label() );}
              } {
                {fltk::Item} {} {
                  label Linear
                  }
                {fltk::Item} {} {
                  label Logarithmic
                  }
                {fltk::Item} {} {
                  label {Square Root}
                  }
              }
            }
          }
        }
      }
    }
    Function {HistogramUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~HistogramUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {open return_type {mrv::ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class PreferencesUI {} {
    Function {make_window(mrv::ViewerUI* m)} {open private
    } {
      {fltk::Window} uiMain {
        label Preferences open
        xywh {1097 629 700 450} hide resizable
        extra_code {o->main(m);}
        class {mrv::ActionWindow}
      } {
        {fltk::WizardGroup} uiWizard {
          label Settings
          xywh {218 24 450 389}
        } {
          {fltk::Group} {} {
            label {User Interface}
            xywh {13 22 423 350} align 5 box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label {Window Behavior}
              xywh {9 44 410 100} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsAlwaysOnTop {
                label {Always on Top}
                tooltip {When selected, mrViewer's window will always show up on top of other windows on the desktop.}
                xywh {24 14 19 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsSingleInstance {
                label {Single Instance}
                tooltip {When selected, only a single mrViewer instance is allowed.
If you try to open several mrViewers with different images, all these images will be sent to the already open mrViewer.}
                xywh {24 40 20 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsAutoFitImage {
                label {Auto Refit Image}
                tooltip {When selected, mrViewer will apply a fit image operation on each video played.  This effectly means the video will be resized automatically based on the size of the window.}
                xywh {24 67 20 25} align 8 box UP_BOX value 1
              }
              {fltk::Group} uiPrefsOpenMode {
                xywh {197 9 150 81} box UP_BOX
              } {
                {fltk::RadioButton} {} {
                  label Normal
                  tooltip {When selected, mrViewer will resize its window to the first image.}
                  xywh {8 6 19 20} align 8 box ROUND_UP_BOX value 1
                }
                {fltk::RadioButton} {} {
                  label Fullscreen
                  tooltip {When selected, mrViewer will start in full screen mode.}
                  xywh {8 31 19 20} align 8 box ROUND_UP_BOX
                }
                {fltk::RadioButton} {} {
                  label Presentation
                  tooltip {When selected, mrViewer will start in presentation mode.}
                  xywh {8 56 19 20} align 8 box ROUND_UP_BOX
                }
              }
            }
            {fltk::Group} {} {
              label {UI Elements}
              xywh {9 196 410 123} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsTopbar {
                label Topbar
                tooltip {When selected, mrViewer will start with its channel, gain, gamma toolbar visible. }
                xywh {5 5 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsPixelToolbar {
                label {Pixel Toolbar}
                tooltip {When selected, mrViewer will start with the pixel toolbar shown.}
                xywh {5 35 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsTimeline {
                label Timeline
                tooltip {When selected, mrViewer will start with the timeline shown.}
                xywh {5 64 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsReelList {
                label {Reel List}
                tooltip {When selected, mrViewer will start with the reel list already open.}
                xywh {140 5 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHistogram {
                label Histogram
                tooltip {When selected, mrViewer will start with the histogram already open.}
                xywh {280 35 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsVectorscope {
                label Vectorscope
                tooltip {When selected, mrViewer will start with the vectorscope already open.}
                xywh {280 64 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsImageInfo {
                label {Media Info}
                tooltip {When selected, mrViewer will start with the media information window already open.}
                xywh {140 35 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsColorArea {
                label {Color Area}
                tooltip {When selected, mrViewer will start with the color area window already open.}
                xywh {140 64 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsEDLEdit {
                label {EDL Edit}
                tooltip {When selected, mrViewer will start with the EDL Edit window already open.}
                xywh {280 8 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsStereoOptions {
                label {Stereo 3D Options}
                tooltip {When selected, mrViewer will start with the stereo options window already open.}
                xywh {6 92 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsPaintTools {
                label {Action Tools}
                tooltip {When selected, mrViewer will start with the action tools already showing.}
                xywh {217 91 25 25} align 8 box UP_BOX
              }
            }
          }
          {fltk::Group} {} {
            label {View Window}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Defaults open
              xywh {13 32 394 135} box ROUNDED_BOX
            } {
              {fltk::ValueInput} uiPrefsViewGain {
                label Gain
                tooltip {Sets the default gain when mrViewer starts.}
                xywh {90 10 80 25} minimum 0.001 maximum 64 step 0.01 value 1
              }
              {fltk::ValueInput} uiPrefsViewGamma {
                label Gamma
                tooltip {Sets the default gamma when mrViewer starts.}
                xywh {280 10 60 25} minimum 0.01 maximum 4 step 0.01 value 1
              }
              {fltk::Choice} uiPrefsCropArea {
                label Crop
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {Allows you to select a standard cropping area around image.}
                xywh {15 58 155 25} align 1 box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {0.00 None}
                  }
                {fltk::Item} {} {
                  label {1.00 Square}
                  }
                {fltk::Item} {} {
                  label {1.19 Movietone}
                  }
                {fltk::Item} {} {
                  label {1.37 Academy (Full Frame)}
                  }
                {fltk::Item} {} {
                  label {1.50 Still Photo}
                  }
                {fltk::Item} {} {
                  label {1.56 STV - HDTV (14:9)}
                  }
                {fltk::Item} {} {
                  label {1.66 European Widescreen}
                  }
                {fltk::Item} {} {
                  label {1.77 HDTV (16:9)}
                  }
                {fltk::Item} {} {
                  label {1.85 Widescreen (3-perf)}
                  }
                {fltk::Item} {} {
                  label {2.10 VistaVision}
                  }
                {fltk::Item} {} {
                  label {2.20 70mm}
                  }
                {fltk::Item} {} {
                  label {2.35 CinemaScope (old 2.35)}
                  }
                {fltk::Item} {} {
                  label {2.39 Panavision (new 2.35)}
                  }
                {fltk::Item} {} {
                  label {4.00 Polyvision}
                  }
              }
              {fltk::CheckButton} uiPrefsViewPixelRatio {
                label {Compensate Pixel Ratio}
                tooltip {When mrViewer starts, the pixel aspect ratio compensation will be active by default.}
                xywh {198 55 20 22} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsViewLut {
                label {Lut Active}
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {When mrViewer starts, the 3D Lut will be active.}
                xywh {198 80 20 22} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsSafeAreas {
                label {Safe Areas}
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {When mrViewer starts, the safe area display will be active by default.}
                xywh {198 107 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsViewDisplayWindow {
                label {Display Window}
                tooltip {When mrViewer starts, the display window will be shown when appropiate.}
                xywh {20 88 20 22} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsViewDataWindow {
                label {Data Window}
                tooltip {When mrViewer starts, the data window will be shown when appropiate as a dotted line.}
                xywh {20 108 20 22} align 8 box UP_BOX value 1
              }
            }
            {fltk::Group} uiPrefsHud {
              label HUD
              user_data this user_data_type {mrv::PreferencesUI*}
              tooltip {This area specifies which elements should be shown as a HUD overlay on the view screen.}
              xywh {15 187 397 122} box UP_BOX
            } {
              {fltk::CheckButton} uiPrefsHudFilename {
                label Filename
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 87 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudDirectory {
                label Directory
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 61 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudFrame {
                label Frame
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {16 35 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudFrameRange {
                label {Frame Range}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {15 62 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudResolution {
                label Resolution
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 10 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudFPS {
                label FPS
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {16 10 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudAttributes {
                label Attributes
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {272 11 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudAVDifference {
                label {VA Difference}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 35 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudTimecode {
                label Timecode
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {15 87 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudWipeMode {
                label {Wipe Mode}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {273 36 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudMemory {
                label Memory
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {273 62 20 20} align 8 box UP_BOX
              }
            }
          }
          {fltk::Group} {} {
            label Colors
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label UI open
              xywh {12 24 383 108} box ROUNDED_BOX
            } {
              {fltk::Button} uiPrefsUIBG {
                label Background
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Background Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();}
                tooltip {Selects the background of UI.}
                xywh {141 18 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsUIText {
                label Text
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text in widgets.}
                xywh {141 63 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsUISelection {
                label Selection
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Selection Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of the selection rectangle in widgets.}
                xywh {256 18 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsUISelectionText {
                label {Selected Text}
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text in widgets.}
                xywh {256 63 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
            }
            {fltk::Group} {} {
              label View
              xywh {12 174 383 108} box ROUNDED_BOX
            } {
              {fltk::Button} uiPrefsViewBG {
                label Background
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Background Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();}
                tooltip {Selects the background color of areas outside the current image.}
                xywh {163 30 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsViewTextOverlay {
                label {Text Overlay}
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text overlays printed over the current image.}
                xywh {163 60 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsViewSelection {
                label Selection
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Selection Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of the selection rectangle over the current image.}
                xywh {278 30 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsViewHud {
                label HUD
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick HUD Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of HUD overlays.}
                xywh {278 60 25 25} align 4 box EMBOSSED_BOX
              }
            }
          }
          {fltk::Group} {} {
            label {File Requester}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX
          } {
            {fltk::CheckButton} uiPrefsFileReqFolder {
              label {Single Click to Travel Drawers}
              xywh {60 35 25 25} box UP_BOX
            }
            {fltk::CheckButton} uiPrefsFileReqThumbnails {
              label {Thumbnails Active}
              xywh {61 59 25 25} box UP_BOX
            }
            {fltk::CheckButton} uiPrefsNativeFileChooser {
              label {Use Native File Chooser on Windows}
              tooltip {On Windows, if selected, the native file chooser will be used.  If unselected, mrViewer's standard file chooser will be used.}
              xywh {61 117 25 25} box UP_BOX
            }
          }
          {fltk::Group} {} {
            label Positioning
            xywh {13 22 423 350} hide box EMBOSSED_BOX
          } {
            {fltk::Group} {} {open
              xywh {22 36 355 40} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiWindowFixedPosition {
                label {Fixed Position}
                tooltip {When this option is set, mrViewer will open in the position you set here (except if the window goes out of the Desktop).}
                xywh {25 15 100 20} box UP_BOX
              }
              {fltk::ValueInput} uiWindowXPosition {
                label {X:}
                xywh {185 10 60 25}
              }
              {fltk::ValueInput} uiWindowYPosition {
                label {Y:}
                xywh {265 10 60 25}
              }
            }
            {fltk::Group} {} {open
              xywh {20 106 355 45} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiWindowFixedSize {
                label {Fixed Size}
                tooltip {When this option is on, mrViewer will always open to the size you set in W and H.}
                xywh {30 15 100 20} box UP_BOX
              }
              {fltk::ValueInput} uiWindowXSize {
                label {W:}
                xywh {190 10 60 25} minimum 640 maximum 4096 step 1 value 640
              }
              {fltk::ValueInput} uiWindowYSize {
                label {H:}
                xywh {270 10 60 25} minimum 480 maximum 3680 step 1 value 480
              }
            }
            {fltk::Button} {} {
              label {Take Current Window Values}
              user_data m user_data_type {mrv::ViewerUI*}
              callback {uiWindowXPosition->value( v->uiMain->x() );
uiWindowYPosition->value( v->uiMain->y() );
uiWindowXSize->value( v->uiMain->w() );
uiWindowYSize->value( v->uiMain->h() );}
              xywh {20 176 355 40}
            }
          }
          {fltk::Group} Playback {
            label Playback
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Defaults open
              xywh {47 25 315 200} align 5 box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsAutoPlayback {
                label {Auto Playback}
                tooltip {Start Playback when opening files.}
                xywh {187 20 20 25} align 4 box UP_BOX
              }
              {fltk::Group} {} {open
                xywh {20 55 270 100} box ROUNDED_BOX
              } {
                {fltk::CheckButton} uiPrefsOverrideFPS {
                  label {Override FPS}
                  tooltip {Override playback fps when loading sequences.}
                  xywh {167 5 20 25} align 4 box UP_BOX
                }
                {fltk::Group} {} {open
                  xywh {85 34 182 26}
                } {
                  {fltk::ValueInput} uiPrefsFPS {
                    label Speed
                    xywh {30 1 75 25} color 0x98a8a800 selection_color 0x647f00 minimum 0.001 maximum 120 step 0.01 value 24
                  }
                  {fltk::PopupMenu} {} {
                    label FPS
                    callback {float g = (float) atof( o->child( o->value() )->label() );
uiPrefsFPS->value( g );}
                    xywh {107 1 75 25}
                  } {
                    {fltk::Item} {} {
                      label 60
                      }
                    {fltk::Item} {} {
                      label {59.94}
                      }
                    {fltk::Item} {} {
                      label 50
                      }
                    {fltk::Item} {} {
                      label 30
                      }
                    {fltk::Item} {} {
                      label {29.97}
                      }
                    {fltk::Item} {} {
                      label 25
                      }
                    {fltk::Item} {} {
                      label 24
                      }
                    {fltk::Item} {} {
                      label {14.985}
                      }
                    {fltk::Item} {} {
                      label {12.5}
                      }
                    {fltk::Item} {} {
                      label 12
                      }
                  }
                }
                {fltk::Choice} uiPrefsLoopMode {
                  label {Looping Mode} open
                  tooltip {Select default looping mode in timeline.}
                  xywh {115 65 90 25} box THIN_DOWN_BOX
                } {
                  {fltk::Item} {} {
                    label Stop
                    }
                  {fltk::Item} {} {
                    label Loop
                    }
                  {fltk::Item} {} {
                    label {Ping Pong}
                    }
                }
              }
              {fltk::ValueInput} uiPrefsScrubbingSensitivity {
                label {Scrub Sensitivity}
                tooltip {This setting controls the sensitivity of scrubbing (SHIFT and then the mouse right and left).  Smaller values make the mouse move jump more frames while higher values does the opposite.}
                xywh {230 160 60 25} minimum 2 maximum 50 step 1 value 5
              }
            }
            {fltk::Group} {} {
              label Timeline open
              xywh {47 250 315 70} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsTimelineDisplay {
                label Display open
                tooltip {How to display timeline by default.}
                xywh {100 20 190 25} box THIN_DOWN_BOX
                extra_code {o->value(0);}
              } {
                {fltk::Item} {} {
                  label Frames
                  }
                {fltk::Item} {} {
                  label Seconds
                  }
                {fltk::Item} {} {
                  label Time
                  }
                {fltk::Item} {} {
                  label {Non-Drop Frame Timecode}
                  }
                {fltk::Item} {} {
                  label {Drop Frame Timecode}
                  }
              }
            }
          }
          {fltk::Group} {} {
            label {Pixel Toolbar}
            xywh {14 23 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {178 50 190 228} horizontal
            } {
              {fltk::Choice} uiPrefsPixelRGBA {
                label {RGBA Display}
                xywh {0 0 190 25}
              } {
                {fltk::Item} {} {
                  label {Float Values}
                  }
                {fltk::Item} {} {
                  label {Hex Values}
                  }
                {fltk::Item} {} {
                  label {8-bit Values}
                  }
              }
              {fltk::Choice} uiPrefsPixelValues {
                label {Pixel Values}
                xywh {0 68 190 25}
              } {
                {fltk::Item} {} {
                  label {Full Lut and Gamma}
                  }
                {fltk::Item} {} {
                  label {Gamma without Lut}
                  }
                {fltk::Item} {} {
                  label {Original without Gamma or Lut}
                  }
              }
              {fltk::Choice} uiPrefsPixelHSV {
                label {Secondary Display}
                xywh {0 143 190 25}
              } {
                {fltk::Item} {} {
                  label HSV
                  }
                {fltk::Item} {} {
                  label HSL
                  }
                {fltk::Item} {} {
                  label {CIE XYZ}
                  }
                {fltk::Item} {} {
                  label {CIE xyY}
                  }
                {fltk::Item} {} {
                  label {Lab CIELAB (L*a*b*)}
                  align 172
                }
                {fltk::Item} {} {
                  label {Luv CIELUV (L*u*v*)}
                  align 172
                }
                {fltk::Item} {} {
                  label {YUV (Analog PAL)}
                  align 172
                }
                {fltk::Item} {} {
                  label {YDbDr (Analog SECAM/PAL-N)}
                  align 172
                }
                {fltk::Item} {} {
                  label {YIQ (Analog NTSC)}
                  align 172
                }
                {fltk::Item} {} {
                  label {ITU-601 (Digital PAL/NTSC YCbCr)}
                  align 172
                }
                {fltk::Item} {} {
                  label {ITU-709 (Digital HDTV YCbCr)}
                  align 172
                }
              }
              {fltk::Choice} uiPrefsPixelLumma {
                label Luminance open
                xywh {0 203 190 25}
              } {
                {fltk::Item} {} {
                  label {Y (Luminance)}
                  }
                {fltk::Item} {} {
                  label {Y' (Lumma)}
                  }
                {fltk::Item} {} {
                  label {L (Lightness)}
                  }
              }
            }
          }
          {fltk::Group} {} {
            label Actions
            xywh {14 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label {Default Action} open
              xywh {57 35 317 200} align 5 box ROUNDED_BOX
            } {
              {fltk::RadioButton} uiScrub {
                label { Scrub}
                xywh {31 14 20 25}
              }
              {fltk::RadioButton} uiMovePicture {
                label { Move Picture}
                xywh {31 39 20 25}
              }
              {fltk::RadioButton} uiSelection {
                label { Color Area Selection}
                xywh {31 64 20 25}
              }
              {fltk::RadioButton} uiDraw {
                label { Pencil}
                xywh {31 94 20 25}
              }
              {fltk::RadioButton} uiText {
                label { Text}
                xywh {31 124 20 25}
              }
              {fltk::RadioButton} uiErase {
                label { Eraser}
                xywh {31 154 20 25}
              }
            }
          }
          {fltk::Group} {} {
            label Caches
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::CheckButton} uiPrefsCacheActive {
              label {Cache Active}
              tooltip {Image sequences will be cached in memory.  If this setting is off, images will be loaded on demand but fluid playback may not be possible.}
              xywh {39 30 20 25} align 8 box UP_BOX
            }
            {fltk::CheckButton} uiPrefs8BitCaches {
              label {8 bit Caches}
              tooltip {Image sequences will be cached as 8-bit pictures, instead of being cached as the original depth of the sequence.
This setting thus allows caching more pictures in memory for float and half pictures.}
              xywh {39 69 20 25} align 8 box UP_BOX
            }
            {fltk::CheckButton} uiPrefsPreloadCache {
              label {Preload Cache}
              tooltip {When this option is on and a sequence is loaded, the frames of the cache will begin loading in the background.  Note however, that this may make the GUI less responsive.}
              xywh {239 29 20 25} align 8 box UP_BOX
            }
            {fltk::Choice} uiPrefsCacheScale {
              label Scale
              tooltip {Scale of images stored.  Smaller scale allows more images to be stored at the expense of pixelization.}
              xywh {74 114 120 25} box THIN_DOWN_BOX
            } {
              {fltk::Item} {} {
                label {1:1}
                }
              {fltk::Item} {} {
                label {1:2}
                }
              {fltk::Item} {} {
                label {1:4}
                }
              {fltk::Item} {} {
                label {1:8}
                }
            }
            {fltk::Group} {} {
              label {Cache Size}
              xywh {39 189 336 45} box ROUNDED_BOX
            } {
              {fltk::ValueSlider} uiPrefsCacheSize {
                tooltip {Size in frames of the video and audio cache.}
                xywh {14 11 246 27} align 1 minimum 30 maximum 200 step 1 value 60
                extra_code {o->activate(false);}
              }
              {fltk::LightButton} uiPrefsCacheFPS {
                label FPS
                user_data uiPrefsCacheSize user_data_type {fltk::ValueSlider*}
                callback {v->activate( !v->active() );}
                tooltip {When selected, cache is set to twice the frames per second of the movie.}
                xywh {260 8 60 30}
              }
            }
          }
          {fltk::Group} {} {
            label {3D Luts} open
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Algorithm open
              tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT) and for your rendering transform of your images (RT).  These settings prioritizes choosing one over the other.}
              xywh {40 96 343 95} box ROUNDED_BOX
            } {
              {fltk::Choice} ODT_algorithm {
                label ODT
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {Preferences::LutAlgorithm x = (Preferences::LutAlgorithm) o->value();
uiODT_CTL->activate();
uiODT_ICC->activate();
if ( x == Preferences::kLutOnlyCTL )
    uiODT_ICC->deactivate();
if ( x == Preferences::kLutOnlyICC )
    uiODT_CTL->deactivate();
v->refresh();} open
                tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT).  This setting prioritizes choosing one over the other.
When mixing a CTL ODT script with an ICC profile in an image as rendering transform (RT), it is necessary that the CTL ODT reads data in XYZ_OCES space (ICC v4 relative colorimetric).  Also, note that ICC uses D50 white points while HDTV and CTL use D65 white points.
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).}
                xywh {95 20 195 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {Prefer CTL}
                  }
                {fltk::Item} {} {
                  label {Always CTL}
                  }
                {fltk::Item} {} {
                  label {Prefer ICC}
                  }
                {fltk::Item} {} {
                  label {Always ICC}
                  }
              }
              {fltk::Choice} RT_algorithm {
                label RT
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {Preferences::LutAlgorithm x = (Preferences::LutAlgorithm) o->value();
uiRT_CTL->activate();
uiRT_ICC->activate();
if ( x == Preferences::kLutOnlyCTL )
    uiRT_ICC->deactivate();
if ( x == Preferences::kLutOnlyICC )
    uiRT_CTL->deactivate();
v->refresh();}
                tooltip {mrViewer supports either ICC profiles or a CTL script for the render transform (RT) of your images.  This setting prioritizes choosing one over the other.
When mixing a CTL RT script with an ICC profile for your output device transform (ODT) like your monitor profile, it is necessary that the CTL RT script passes data in XYZ_OCES space (ICC v4 relative colorimetric).
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).
}
                xywh {95 55 195 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {Prefer CTL}
                  }
                {fltk::Item} {} {
                  label {Always CTL}
                  }
                {fltk::Item} {} {
                  label {Prefer ICC}
                  }
                {fltk::Item} {} {
                  label {Always ICC}
                  }
              }
            }
            {fltk::Group} {} {
              label Quality open
              tooltip {mrViewer supports CTL scripts and ICC profiles baked into 3D Luts.  These settings control the quality of the 3D Lut.}
              xywh {44 269 339 76} box ROUNDED_BOX
            } {
              {fltk::Choice} uiLUT_quality {
                label Resolution
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {v->refresh();}
                tooltip {With modern graphics cards, mrViewer emulates color transforms by baking them into a 3D Lut.  This setting controls how accurate the 3D lut is.  The bigger the lut, the longer it takes to calculate but the more accurate it is.
Note that large 3D Luts can use quite a lot of memory.

Size     Memory    Max. Error
32        1/2 Mb     12.5%
64          4 Mb      1.6%
128      32 Mb      0.7%
192      110.5 Mb      0.5%
256       262 Mb      0.2%

It is recommended this setting is left at 64x64x64 or 128x128x128.

}
                xywh {120 14 170 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {No Lut}
                  }
                {fltk::Item} {} {
                  label 32x32x32
                  }
                {fltk::Item} {} {
                  label 64x64x64
                  }
                {fltk::Item} {} {
                  label 96x96x96
                  }
                {fltk::Item} {} {
                  label 128x128x128
                  }
                {fltk::Item} {} {
                  label 192x192x192
                  }
                {fltk::Item} {} {
                  label 256x256x256
                  }
              }
              {fltk::ValueInput} uiPrefsNumStops {
                label {Number of Fstops}
                tooltip {Number of FStops the LUT will cover.  Higher numbers show more detail in the black levels, while it makes the midrange be less defined.}
                xywh {224 45 65 25} minimum 1 maximum 20 step 1 value 10
              }
            }
            {fltk::Group} {} {
              label {Rendering Intent} open
              xywh {43 209 340 45} box ROUNDED_BOX
            } {
              {fltk::Choice} uiICC_intent {
                label ICC
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {v->refresh();}
                tooltip {When using luts with ICC profiles, this setting allows you to select the ICC rendering intent.   Rendering intents are mostly used for printing to film or paper to emulate or proof the output of the output device (ODT), particularly when it does not have the same gamut (color/white range) as the linear RGB/XYZ space.
}
                xywh {120 10 170 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label Perceptual
                  tooltip xxxx
                  }
                {fltk::Item} {} {
                  label {Relative Colorimetric}
                  }
                {fltk::Item} {} {
                  label {Absolute Colorimetric}
                  }
                {fltk::Item} {} {
                  label Saturation
                  }
              }
            }
            {fltk::Group} {} {open
              xywh {29 4 380 75}
            } {
              {fltk::CheckButton} uiPrefsUseOcio {
                label {Use OCIO}
                callback {mrv::Preferences::use_ocio = o->value();}
                tooltip {Use OCIO or revert to CTL/ICC.}
                xywh {5 5 25 25}
              }
              {fltk::Group} {} {open
                xywh {5 44 375 31}
              } {
                {fltk::Input} uiPrefsOCIOConfig {
                  label {OCIO Config File}
                  tooltip {This is the path to your config.ocio file.  It can be set with the environment variable OCIO, which takes precedence over any saved setting.}
                  xywh {0 0 320 30} align 1
                }
                {fltk::Button} {} {
                  label Pick
                  user_data m user_data_type {mrv::ViewerUI*}
                  callback {mrv::PreferencesUI* uiPrefs = v->uiPrefs;
std::string r = open_ocio_config( uiPrefs->uiPrefsOCIOConfig->text() );
if ( r.empty() ) return;

uiPrefs->uiPrefsOCIOConfig->text( r.c_str() );
uiPrefs->run(v);}
                  tooltip {Pick a config.ocio file from disk.
}
                  xywh {320 0 55 31}
                }
              }
            }
          }
          {fltk::Group} {} {
            label OCIO open
            xywh {13 22 423 355} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} uiOCIO_ICS {
              label {Input Color Space}
              xywh {30 90 375 154} box ROUNDED_BOX
            } {
              {fltk::Group} {} {open
                xywh {78 19 270 45}
              } {
                {fltk::Input} uiOCIO_8bits_ics {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_8bits_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_OCIO_8bits_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_8bits_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_8bits_ics->text(c.c_str());
uiOCIO_8bits_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
              {fltk::Group} {} {open
                xywh {78 49 270 45}
              } {
                {fltk::Input} uiOCIO_16bits_ics {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_16bits_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_OCIO_16bits_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_16bits_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_16bits_ics->text(c.c_str());
uiOCIO_16bits_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
              {fltk::Group} {} {open
                xywh {78 79 270 45}
              } {
                {fltk::Input} uiOCIO_32bits_ics {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_32bits_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_OCIO_32bits_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_32bits_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_32bits_ics->text(c.c_str());
uiOCIO_32bits_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
              {fltk::Group} {} {open
                xywh {78 109 270 45}
              } {
                {fltk::Input} uiOCIO_float_ics {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_float_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_OCIO_float_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_float_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_float_ics->text(c.c_str());
uiOCIO_float_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
            }
            {fltk::CheckButton} uiPrefsOcioICSToolbar {
              label {OCIO Input Color Space in Toolbar}
              tooltip {Use OCIO Input Color Space in Toolbar instead of a FStop and Normalize buttons.}
              xywh {24 44 25 25}
            }
          }
          {fltk::Group} {} {
            label {CTL Paths}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Browser} uiPrefsCTLModulePath {
              label CTL_MODULE_PATH open
              xywh {13 76 380 83}
            } {}
            {fltk::Browser} uiPrefsCTLScripts {
              label {CTL scripts} open
              xywh {13 189 380 156}
            } {}
            {fltk::Button} {} {
              label Pick
              xywh {339 23 55 31}
            }
          }
          {fltk::Group} {} {
            label {Default Output Device Transform (ODT)}
            xywh {13 22 423 354} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Display
              xywh {13 22 370 327} box ROUNDED_BOX
            } {
              {fltk::Group} uiODT_CTL {
                xywh {104 10 255 265} horizontal
              } {
                {fltk::Group} {} {
                  xywh {0 0 255 35}
                } {
                  {fltk::Input} uiODT_CTL_transform {
                    label Transform
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_transform = o->text();
v->refresh();}
                    tooltip {The name of the CTL display transform
(Environment variable: MRV_ODT_CTL_TRANSFORM)}
                    xywh {15 5 185 25} box THIN_DOWN_BOX labelsize 11
                  }
                  {fltk::Button} {} {
                    label Pick
                    callback {std::string c = make_ctl_browser(uiODT_CTL_transform->text(), "ODT");
if (c.empty()) return;
uiODT_CTL_transform->text(c.c_str());
uiODT_CTL_transform->do_callback();}
                    xywh {200 5 55 25}
                  }
                }
                {fltk::Group} {} {
                  label {Chromaticities (CIE)}
                  tooltip {The CIE x,y coordinates of the primaries and white point of the display
(like Rec. ITU-R BT.709-3)

(Environment variable: MRV_ODT_CTL_CHROMATICITIES)}
                  xywh {5 35 250 155} align 132 box ENGRAVED_BOX
                } {
                  {fltk::Widget} {} {
                    label X
                    xywh {100 8 25 25}
                  }
                  {fltk::Widget} {} {
                    label Y
                    xywh {175 8 25 25}
                  }
                  {fltk::Group} {} {
                    label Red
                    xywh {45 23 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_red_x {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.red.x = (float) o->value();}
                      tooltip {The Red CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.64
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_red_y {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.red.y = (float) o->value();}
                      tooltip {The Red CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.33
                    }
                  }
                  {fltk::Group} {} {
                    label Green
                    xywh {45 53 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_green_x {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                      tooltip {The Green CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.3
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_green_y {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                      tooltip {The Green CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.6
                    }
                  }
                  {fltk::Group} {} {
                    label Blue
                    xywh {45 83 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_blue_x {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The Blue CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.15
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_blue_y {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The Blue CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.06
                    }
                  }
                  {fltk::Group} {} {
                    label White
                    xywh {45 113 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_white_x {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The White CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.3127
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_white_y {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.white.y = (float) o->value();
v->refresh();}
                      tooltip {The White CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.329
                    }
                  }
                }
                {fltk::Group} {} {
                  label {White Luminance}
                  xywh {115 200 130 35} align 132 labelsize 11
                } {
                  {fltk::ValueInput} uiODT_CTL_white_luminance {
                    label {cd/m2}
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_white_luminance = (float) o->value();
v->refresh();}
                    tooltip {The luminance, in cd/m2, of the display.

(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)}
                    xywh {10 5 90 25} align 136 maximum 500 step 0.1 value 120
                  }
                }
                {fltk::Group} {} {
                  label {Surround Luminance}
                  tooltip {
(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)}
                  xywh {125 230 120 35} align 132 labelsize 11
                } {
                  {fltk::ValueInput} uiODT_CTL_surround_luminance {
                    label {cd/m2}
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_surround_luminance = (float) o->value();
v->refresh();}
                    tooltip {The luminance, in cd/m2, of the background that surrounds the display.

(Environment variable:
MRV_ODT_CTL_SURROUND_LUMINANCE)}
                    xywh {0 10 90 25} align 136 maximum 500 step 0.1 value 12
                  }
                }
              }
              {fltk::Group} uiODT_ICC {
                xywh {35 277 312 45}
              } {
                {fltk::Input} uiODT_ICC_profile {
                  label {ICC profile}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::Preferences::ODT_ICC_profile = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for your ODT (monitor)
(Environment variable: MRV_ODT_ICC_PROFILE)}
                  xywh {55 15 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiODT_ICC_profile->text());
uiODT_ICC_profile->text(c);
uiODT_ICC_profile->do_callback();}
                  xywh {245 15 55 25}
                }
              }
            }
          }
          {fltk::Group} {} {
            label {Default Rendering Transform (RT)}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} uiRT_CTL {
              label {Render Transforms} open
              xywh {15 24 375 135} box ROUNDED_BOX
            } {
              {fltk::Group} {} {open
                xywh {100 9 255 30}
              } {
                {fltk::Input} uiCTL_8bits_load_transform {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_8bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_CTL_RT_8bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_8bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_8bits_load_transform->text(c.c_str());
uiCTL_8bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {open
                xywh {100 39 255 30}
              } {
                {fltk::Input} uiCTL_16bits_load_transform {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_16bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_CTL_RT_16bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->text(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {open
                xywh {100 69 255 30}
              } {
                {fltk::Input} uiCTL_32bits_load_transform {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_32bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_CTL_RT_32bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->text(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {open
                xywh {100 99 255 30}
              } {
                {fltk::Input} uiCTL_float_load_transform {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_float = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_CTL_RT_float)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_float_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_float_load_transform->text(c.c_str());
uiCTL_float_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
            }
            {fltk::Group} uiRT_ICC {
              label {ICC Profiles}
              xywh {15 204 375 135} box ROUNDED_BOX
            } {
              {fltk::Group} {} {
                xywh {100 10 255 30}
              } {
                {fltk::Input} uiICC_8bits_profile {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_8bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_ICC_RT_8bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_8bits_profile->text());
uiICC_8bits_profile->text(c);
uiICC_8bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {
                xywh {100 40 255 30}
              } {
                {fltk::Input} uiICC_16bits_profile {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_16bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_ICC_RT_16bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_16bits_profile->text());
uiICC_16bits_profile->text(c);
uiICC_16bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {
                xywh {100 70 255 30}
              } {
                {fltk::Input} uiICC_32bits_profile {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_32bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_ICC_RT_32bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_32bits_profile->text());
uiICC_32bits_profile->text(c);
uiICC_32bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {
                xywh {100 100 255 30}
              } {
                {fltk::Input} uiICC_float_profile {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_float = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_ICC_RT_float)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_float_profile->text());
uiICC_float_profile->text(c);
uiICC_float_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
            }
          }
          {fltk::Group} {} {
            label Loading
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {12 45 400 84} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsLoadSequence {
                label { Load Sequence on Drag&&Drop}
                tooltip {When dragging and dropping a frame from a sequence, make mrViewer load the full sequence.   Otherwise it loads the frame only.}
                xywh {20 30 25 25} box UP_BOX value 1
              }
            }
            {fltk::Group} {} {open
              xywh {12 136 400 84} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsLoadSequenceOnAssoc {
                label {Load Sequence on File Association & CommandLine}
                tooltip {When loading a frame from a sequence from a file association or command-line, make mrViewer load the full sequence.   Otherwise it loads the frame only.}
                xywh {21 29 25 25} box UP_BOX value 1
              }
            }
            {fltk::Group} {} {open
              xywh {12 226 400 79} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsAutoLoadImages {
                label {Auto load images as they change on disk}
                tooltip {When this option is active and an image changes on disk, mrViewer reloads it automatically.}
                xywh {20 25 25 25} box UP_BOX value 1
              }
            }
          }
          {fltk::Group} {} {
            label Video
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Choice} VideoDriver {
              label Driver
              xywh {78 37 290 25} box THIN_DOWN_BOX
            } {
              {fltk::Item} {} {
                label OpenGL
                }
            }
            {fltk::Group} {} {
              label Loading
              xywh {48 114 318 65} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsYUVConversion {
                label {YUV Conversion}
                user_data uiMain user_data_type {ViewerUI*}
                callback {int idx = o->value();

switch(idx)
{
case 0:
idx = 0; break;
case 1:
idx = 1; break;
case 2:
idx = 2; break;
case 3:
default:
idx = 5; break;
}
CMedia::colorspace_override = idx;}
                tooltip {Controls the YUV Conversion of the movie in the shader to emulate different tv standards.
Use File YUV Hint will take the value from the movie being loaded if the data is present.
BT709 is a Rec.709 emulation (HDTV) and has black levels in the 16 range of 255.
Unspecified is your standard computer translation of YUV.
BT470BG/SMPTE170M emulate ITU-R BT 601-6 625 (PAL/SECAM).}
                xywh {130 27 167 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {Use File YUV Hint}
                  }
                {fltk::Item} {} {
                  label {Always use BT709}
                  }
                {fltk::Item} {} {
                  label {Always use Unspecified}
                  }
                {fltk::Item} {} {
                  label {Always use BT470BG / SMPTE170M}
                  }
              }
            }
            {fltk::Group} {} {
              label Saving open
              xywh {48 219 318 65} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsVideoCodec {
                label {Video Codec}
                user_data uiMain user_data_type {ViewerUI*}
                tooltip {Controls the codec used by default in saving a movie file.}
                xywh {135 17 167 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label hevc
                  }
                {fltk::Item} {} {
                  label h264
                  }
                {fltk::Item} {} {
                  label mpeg4
                  }
                {fltk::Item} {} {
                  label prores_ks
                  }
              }
            }
          }
          {fltk::Group} {} {
            label Compositing
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {58 172 320 65} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsBlendMode {
                label {Blend Mode}
                user_data m user_data_type {ViewerUI*}
                callback {v->uiView->redraw();} open
                tooltip {OpenGL blend compositing mode.
Traditional:
SC x SA + DC x ( 1 - SA)
Premult:
SC + DC x ( 1 - SA )
where SC is source color, SA is source alpha, and DC is destination color.}
                xywh {142 20 167 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label Traditional
                  }
                {fltk::Item} {} {
                  label Premult
                  }
                {fltk::Item} {} {
                  label {Traditional No Gamma}
                  }
                {fltk::Item} {} {
                  label {Premult No Gamma}
                  }
              }
            }
            {fltk::Group} {} {open
              xywh {57 97 321 65} box ROUNDED_BOX
            } {
              {fltk::LightButton} uiPrefsResizeBackground {
                label {Resize Background to Match Foreground}
                xywh {25 20 275 30}
              }
            }
          }
          {fltk::Group} {} {
            label Audio
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Choice} uiPrefsAudioDevice {
              label Device
              callback {unsigned idx = o->value();
mrv::AudioEngine::device( idx );}
              xywh {99 22 275 25} box THIN_DOWN_BOX
              extra_code {//
// Initialize an audio engine to get devices
//
mrv::AudioEngine* engine = mrv::AudioEngine::factory();
delete engine;

const mrv::AudioEngine::DeviceList& devices = mrv::AudioEngine::devices();
mrv::AudioEngine::DeviceList::const_iterator i = devices.begin();
mrv::AudioEngine::DeviceList::const_iterator e = devices.end();
for ( ; i != e; ++i )
   {
      o->add( (*i).description.c_str() );
   }}
            } {}
            {fltk::Group} {} {open
              xywh {64 189 300 60} box ROUND_DOWN_BOX
            } {
              {fltk::Slider} uiPrefsAudioVolume {
                label {Default Volume}
                tooltip {Default audio at opening mrViewer.}
                xywh {79 20 161 25} type TICK_ABOVE align 1 step 0.01 value 1
              }
              {fltk::Button} uiPrefsAudioMute {
                label Mute
                user_data uiPrefsAudioVolume user_data_type {fltk::Slider*}
                callback {o->value( !o->value() );
if ( o->value() )
   v->deactivate();
else
   v->activate();}
                xywh {40 20 40 25}
              }
            }
            {fltk::LightButton} uiPrefsOverrideAudio {
              label {Override Audio}
              xywh {149 144 135 35}
            }
          }
          {fltk::Group} {} {
            label Subtitles
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Choice} uiPrefsSubtitleFont {
              label Font
              user_data m user_data_type {ViewerUI*}
              callback {int idx = o->value();
const char* font = o->child(idx)->label();
mrv::media m = v->uiView->foreground();
if (!m) return;
CMedia* img = m->image();
aviImage* avi = dynamic_cast< aviImage* >( img );
if (!avi) return;
avi->subtitle_font( font );
CMedia::default_subtitle_font( font );
v->uiView->redraw();}
              xywh {114 37 275 31} box THIN_DOWN_BOX
              extra_code {fltk::Font** fonts; // list returned by fltk
int numfonts = fltk::list_fonts(fonts);
for (int i = 0; i < numfonts; i++)
{
       o->add(fonts[i]->name());
       if ( strcmp( fonts[i]->name(), "Arial" ) == 0 )
           o->value(i);
}}
            } {}
            {fltk::Choice} uiPrefsSubtitleEncodingChoices {
              user_data m user_data_type {ViewerUI*}
              callback {int i = o->value();
uiPrefsSubtitleEncoding->text( o->child(i)->label() );
uiPrefsSubtitleEncoding->do_callback();} open
              xywh {239 88 150 31} box THIN_DOWN_BOX
            } {
              {fltk::Item} {} {
                label {ISO-8859-1}
                }
              {fltk::Item} {} {
                label {ISO-8859-2}
                }
              {fltk::Item} {} {
                label {UTF-8}
                }
              {fltk::Item} {} {
                label {UTF-16}
                }
            }
            {fltk::Input} uiPrefsSubtitleEncoding {
              label Encoding
              user_data m user_data_type {mrv::ViewerUI*}
              callback {const char* enc = o->text();
mrv::media m = v->uiView->foreground();
if (!m) return;
CMedia* img = m->image();
aviImage* avi = dynamic_cast< aviImage* >( img );
if (!avi) return;
avi->subtitle_encoding( enc );
CMedia::default_subtitle_encoding( enc );
v->uiView->redraw();}
              xywh {114 89 120 30}
            }
          }
          {fltk::Group} {} {
            label Errors
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {43 32 355 227} box ENGRAVED_BOX
            } {
              {fltk::Choice} uiPrefsRaiseLogWindowOnError {
                label {Raise Log Window on Error} open
                xywh {240 25 110 25}
              } {
                {fltk::Item} {} {
                  label Never
                  }
                {fltk::Item} {} {
                  label Once
                  }
                {fltk::Item} {} {
                  label Always
                  }
              }
            }
          }
          {fltk::Group} {} {
            label Images
            tooltip {Options controlling the OpenEXR reader/writer}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Saving open
              xywh {54 78 330 130} box ROUNDED_BOX labelsize 15
            } {
              {fltk::LightButton} uiPrefsACESClipMetadata {
                label {ACES Clip Metadata}
                tooltip {Whether to save ACES clip metadata in a sidecar.}
                xywh {60 20 210 30}
              }
              {fltk::LightButton} uiPrefsAllLayers {
                label {All Layers}
                tooltip {Whether to save all layers in image file if there are several.}
                xywh {60 70 210 30}
              }
            }
          }
          {fltk::Group} {} {
            label OpenEXR
            tooltip {Options controlling the OpenEXR reader/writer}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Loading
              xywh {44 33 325 130} box ROUNDED_BOX labelsize 15
            } {
              {fltk::ValueInput} uiPrefsOpenEXRThreadCount {
                label {Thread Count}
                tooltip {Use multiple threads when loading a frame.}
                xywh {155 22 51 28} minimum 1 maximum 16 step 1 value 4
              }
              {fltk::ValueInput} uiPrefsOpenEXRGamma {
                label Gamma
                tooltip {Gamma to use when loading an exr and OCIO is off.}
                xywh {160 82 51 28} minimum 0.1 maximum 16 step 0.1 value 2.2
              }
            }
            {fltk::Group} {} {
              label Saving open
              xywh {44 203 330 130} box ROUNDED_BOX labelsize 15
            } {
              {fltk::Choice} uiPrefsOpenEXRCompression {
                label Compression
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {std::string compression = o->child(o->value())->label();
if ( compression == "DWAA" ||
     compression == "DWAB" )
{
v->uiPrefsOpenEXRDWACompression->activate();
}
else
{
v->uiPrefsOpenEXRDWACompression->deactivate();
}}
                tooltip {Compression to use when saving an exr.}
                xywh {100 20 180 25}
              } {
                {fltk::Item} {} {
                  label None
                  }
                {fltk::Item} {} {
                  label RLE
                  }
                {fltk::Item} {} {
                  label {ZIP SCANLINE}
                  }
                {fltk::Item} {} {
                  label ZIP
                  }
                {fltk::Item} {} {
                  label PIZ
                  }
                {fltk::Item} {} {
                  label PXR24
                  }
                {fltk::Item} {} {
                  label B44
                  }
                {fltk::Item} {} {
                  label B44A
                  }
                {fltk::Item} {} {
                  label DWAA
                  }
                {fltk::Item} {} {
                  label DWAB
                  }
              }
              {fltk::ValueSlider} uiPrefsOpenEXRDWACompression {
                label {DWA Compression}
                tooltip {DWA/DWB compression to use when saving an exr with that compression scheme.}
                xywh {130 61 138 34} align 4 deactivate minimum 1 maximum 250 step 10 value 45
              }
            }
          }
        }
        {fltk::Group} {} {open
          xywh {5 5 207 430}
        } {
          {fltk::Browser} {} {
            label Module
            user_data this user_data_type {mrv::PreferencesUI*}
            callback {o->update( v );} open
            xywh {0 20 195 410}
            class {mrv::PreferencesBrowser}
          } {
            {fltk::ItemGroup} {} {
              label {User Interface} open
              vertical value 1
            } {
              {fltk::ItemGroup} {} {
                label {View Window}
                vertical
              } {
                {fltk::Item} {} {
                  label Colors
                  }
              }
              {fltk::Item} {} {
                label {File Requester}
                }
              {fltk::Item} {} {
                label Positioning
                }
            }
            {fltk::Item} {} {
              label Playback
              }
            {fltk::Item} {} {
              label {Pixel Toolbar}
              }
            {fltk::Item} {} {
              label Actions
              }
            {fltk::Item} {} {
              label Caches
              }
            {fltk::ItemGroup} {} {
              label {3D Luts} open
              vertical
            } {
              {fltk::Item} {} {
                label OCIO
                }
              {fltk::Item} {} {
                label Paths
                }
              {fltk::Item} {} {
                label {Default ODT}
                }
              {fltk::Item} {} {
                label {Default RT}
                }
            }
            {fltk::Item} {} {
              label Loading
              }
            {fltk::Item} {} {
              label Video
              }
            {fltk::Item} {} {
              label Compositing
              }
            {fltk::Item} {} {
              label Audio
              }
            {fltk::Item} {} {
              label Subtitle
              }
            {fltk::Item} {} {
              label Errors
              }
            {fltk::Item} {} {
              label Images
              }
            {fltk::Item} {} {
              label OpenEXR
              }
          }
        }
        {fltk::Group} {} {open
          xywh {223 419 423 31}
        } {
          {fltk::Button} {} {
            label Revert
            user_data this user_data_type {mrv::PreferencesUI*}
            callback {// reload preferences
mrv::Preferences prefs(v);}
            tooltip {Revert settings to last saved preferences.}
            xywh {0 3 132 27}
          }
          {fltk::Button} {} {
            label Save
            callback {mrv::Preferences::save();}
            tooltip {Save preferences to disk as a default.}
            xywh {135 3 132 27}
          }
          {fltk::Button} {} {
            label OK
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiPrefs->uiMain->hide();
v->uiPrefs->run(v);}
            tooltip {Accept settings but don't save.}
            xywh {270 3 132 27}
          }
        }
      }
    }
    Function {PreferencesUI(mrv::ViewerUI* m)} {open
    } {
      code {make_window(m);} {}
    }
    Function {~PreferencesUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {refresh()} {} {
      code {fltk::Window* w = fltk::Window::first();
for ( ; w ; w = w->next() )
   w->redraw();} {}
    }
    Function {run(mrv::ViewerUI* m)} {open
    } {
      code {mrv::Preferences::run( m );
fltk::Window* w = fltk::Window::first();
for ( ; w ; w = w->next() )
   w->redraw();} {}
    }
  }
  class StatisticsUI {} {
    Function {make_window(ViewerUI* main)} {} {
      {fltk::Window} uiMain {
        label Statistics
        xywh {623 472 445 235} hide resizable
        extra_code {o->child_of( main->uiMain );}
      } {
        {fltk::Group} {} {open
          xywh {9 5 344 218}
        } {
          {fltk::Group} {} {
            label Video open
            xywh {220 15 200 75} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiVideoFramesDropped {
              label {Dropped Frames}
              xywh {110 40 80 25}
            }
            {fltk::ValueOutput} uiVideoBlocksDecoded {
              label {Decoded Blocks}
              xywh {110 10 80 25}
            }
          }
          {fltk::ValueOutput} uiAVDifference {
            label {A/V Difference}
            xywh {330 190 80 25}
          }
          {fltk::Group} {} {
            label Audio open
            xywh {220 110 200 75} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiAudioFramesDropped {
              label {Dropped Frames}
              xywh {110 45 80 25}
            }
            {fltk::ValueOutput} uiAudioBlocksDecoded {
              label {Decoded Blocks}
              xywh {110 15 80 25}
            }
          }
          {fltk::Group} {} {
            label Input open
            xywh {5 15 205 75} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiInputRead {
              label Read
              xywh {65 10 95 25}
            }
            {fltk::ValueOutput} uiInputBitrate {
              label Bitrate
              xywh {65 40 95 25}
            }
            {fltk::InvisibleBox} {} {
              label {KB.}
              xywh {165 10 30 25} box FLAT_BOX
            }
            {fltk::InvisibleBox} {} {
              label {kb/s}
              xywh {165 40 30 25} box FLAT_BOX
            }
          }
          {fltk::Group} {} {
            label Streaming open
            xywh {5 110 205 100} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiStreamSent {
              label Sent
              xywh {65 40 95 25}
            }
            {fltk::ValueOutput} uiStreamBitrate {
              label Bitrate
              xywh {65 70 95 25}
            }
            {fltk::InvisibleBox} {} {
              label {KB.}
              xywh {165 40 30 25} box FLAT_BOX
            }
            {fltk::InvisibleBox} {} {
              label {kb/s}
              xywh {165 70 30 25} box FLAT_BOX
            }
            {fltk::ValueOutput} uiStreamPackets {
              label Packets
              xywh {65 10 95 25}
            }
          }
        }
      }
    }
    Function {StatisticsUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~StatisticsUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class LogUI {} {
    Function {make_window(ViewerUI* main)} {open
    } {
      {fltk::Window} uiMain {
        label {Log Messages} open
        xywh {487 205 635 250} hide resizable
        extra_code {o->child_of( main->uiMain );}
      } {
        {fltk::Group} {} {open
          xywh {5 5 630 240} resizable
        } {
          {fltk::TextDisplay} uiLogText {
            xywh {0 0 625 200} resizable
            class {mrv::LogDisplay}
          }
          {fltk::Group} {} {open
            xywh {450 200 175 40}
          } {
            {fltk::Button} {} {
              label Save
              user_data uiLogText user_data_type {mrv::LogDisplay*}
              callback {v->save();}
              xywh {90 5 75 30}
            }
            {fltk::Button} {} {
              label Clear
              user_data uiLogText user_data_type {mrv::LogDisplay*}
              callback {v->clear();}
              xywh {10 5 75 30}
            }
          }
        }
      }
    }
    Function {LogUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~LogUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class HotkeyUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label Hotkeys
        xywh {364 235 450 400} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );} modal
      } {
        {fltk::Group} {} {open
          xywh {5 25 445 375} vertical
        } {
          {fltk::Browser} uiFunction {
            label Function
            user_data this user_data_type {HotkeyUI*}
            callback {mrv::select_hotkey( v );} open
            xywh {20 0 415 315}
            extra_code {mrv::fill_ui_hotkeys( o );}
          } {}
          {fltk::Button} {} {
            label Save
            callback {mrv::Preferences::save();}
            xywh {365 330 65 30}
          }
        }
      }
    }
    Function {HotkeyUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~HotkeyUI()} {open
    } {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class PaintUI {open
  } {
    decl {mrv::ViewerUI* main_;} {}
    Function {make_window( ViewerUI* m )} {open
    } {
      {fltk::Window} uiMain {
        label Action
        user_data this user_data_type {mrv::PaintUI*}
        callback {v->main()->uiView->send_network( "PaintTools 0" );
o->hide();}
        xywh {451 557 150 520} horizontal resizable
        extra_code {o->child_of( m->uiMain );
main_ = m;
o->main( m );}
        class {mrv::ActionWindow} visible
      } {
        {fltk::Group} {} {open
          xywh {0 11 145 495}
        } {
          {fltk::Button} uiScrub {
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiView->scrub_mode();}
            tooltip {Scrubbing Tool}
            xywh {30 14 43 35}
            image not_inlined {../../icons/scrub.xpm} value 1
            extra_code {o->image( scrub );}
          }
          {fltk::Button} uiMovePic {
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiView->move_pic_mode();}
            tooltip {Move Picture Tool}
            xywh {77 14 43 35}
            image not_inlined {../../icons/move_pic.xpm}
            extra_code {o->image( move_pic );}
          }
          {fltk::Button} uiSelection {
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiView->selection_mode();}
            tooltip {Area Select Tool}
            xywh {30 53 43 35}
            image not_inlined {../../icons/select.xpm}
            extra_code {o->image( select_pic );}
          }
          {fltk::Button} uiDraw {
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiView->draw_mode();}
            tooltip {Freehand Drawing Tool}
            xywh {77 53 43 35}
            image not_inlined {../../icons/draw.xpm}
            extra_code {o->image( draw );}
          }
          {fltk::Button} uiErase {
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiView->erase_mode();}
            tooltip {Eraser Tool}
            xywh {77 94 43 35}
            image not_inlined {../../icons/erase.xpm}
            extra_code {o->image( erase );}
          }
          {fltk::Button} uiText {
            label T
            user_data m user_data_type {mrv::ViewerUI*}
            callback {v->uiView->text_mode();}
            tooltip {Text Tool}
            xywh {30 93 43 35} align 32 labelfont 8 labelsize 24
          }
          {fltk::ValueSlider} uiPenSize {
            label {Pen Size}
            tooltip {Selects the size of brush.}
            xywh {32 144 85 30} align 1 minimum 1 maximum 10 step 1 value 5
          }
          {fltk::Group} {} {open
            xywh {30 374 82 50}
          } {
            {fltk::Button} uiUndoDraw {
              user_data m user_data_type {mrv::ViewerUI*}
              callback {v->uiView->undo_draw();

if ( !v->uiView->has_undo() )
 o->deactivate();}
              tooltip {Undo Last Shape Drawn}
              xywh {5 15 34 35}
              image not_inlined {../../icons/undo.xpm}
              extra_code {o->image( undo );
if ( !m->uiView->has_undo() )
 o->deactivate();
else
 o->activate();}
            }
            {fltk::Button} uiRedoDraw {
              user_data m user_data_type {mrv::ViewerUI*}
              callback {v->uiView->redo_draw();
if ( !v->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
              tooltip {Redo Previous Shape Drawn}
              xywh {45 15 34 35}
              image not_inlined {../../icons/redo.xpm}
              extra_code {o->image( redo );
if ( !m->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
            }
          }
          {fltk::Button} uiPenColor {
            label {Pen Color}
            callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick Draw Color", r,g,b)) return;
if ( r == 0 && g == 0 && b == 0 )
  o->color( fltk::BLACK );
else
  o->color( fltk::color( r,g,b ) );
o->redraw();}
            tooltip {Selects the current pen color.}
            xywh {87 189 25 25} align 4 box EMBOSSED_BOX color 0x9ff0000 labelsize 11
          }
          {fltk::Group} {} {
            label Frames
            xywh {25 234 95 55} box UP_BOX
          } {
            {fltk::RadioButton} uiAllFrames {
              label All
              tooltip {Draw shape in all frames}
              xywh {10 5 25 25}
            }
            {fltk::RadioButton} uiCurrentFrame {
              label Current
              tooltip {Draw shape in curent frame only}
              xywh {10 25 25 25} value 1
            }
          }
          {fltk::Group} {} {
            label Ghosting open
            xywh {25 314 95 65} box UP_BOX
          } {
            {fltk::CheckButton} {} {
              label Previous
              user_data m user_data_type {mrv::ViewerUI*}
              callback {v->uiView->ghost_previous( o->value() );
v->uiView->redraw();}
              tooltip {Show shapes of previous frame ghosted.}
              xywh {10 10 25 25} value 1
            }
            {fltk::CheckButton} {} {
              label Next
              user_data m user_data_type {mrv::ViewerUI*}
              callback {v->uiView->ghost_next( o->value() );
v->uiView->redraw();}
              tooltip {Show next frame shapes ghosted.}
              xywh {10 30 25 25} value 1
            }
          }
        }
      }
    }
    Function {PaintUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~PaintUI()} {open
    } {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {open return_type {mrv::ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class ConnectionUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      {fltk::Window} uiMain {
        label Connections open
        xywh {630 357 450 400} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );}
      } {
        {fltk::Group} {} {open
          xywh {0 5 445 390} vertical
        } {
          {fltk::Group} uiServerGroup {
            label Server open
            xywh {15 10 400 75} align 5 box ROUNDED_BOX
          } {
            {fltk::ValueInput} uiServerPort {
              label Port
              xywh {115 25 70 25} step 1 value 4333
            }
            {fltk::Button} uiCreate {
              label Create
              user_data main user_data_type {mrv::ViewerUI*}
              callback {if ( strcmp( o->label(), _("Create") ) == 0 )
    mrv::server::create(v);
else
    mrv::server::remove(v);}
              xywh {195 25 100 25}
            }
          }
          {fltk::Group} uiClientGroup {
            label Client open
            xywh {15 105 400 70} align 5 box ROUNDED_BOX
          } {
            {fltk::Input} uiClientServer {
              label Server
              xywh {65 18 115 30}
              extra_code {o->text("localhost");}
            }
            {fltk::ValueInput} uiClientPort {
              label Port
              xywh {235 20 70 25} step 1 value 4333
            }
            {fltk::Button} uiConnect {
              label Connect
              user_data main user_data_type {mrv::ViewerUI*}
              callback {if ( strcmp( o->label(), _("Connect") ) == 0 )
   mrv::client::create(v);
else
   mrv::client::remove(v);}
              xywh {310 20 85 25}
            }
          }
          {fltk::Group} {} {open
            xywh {15 185 400 200} box ROUNDED_BOX
          } {
            {fltk::TextDisplay} uiLog {
              xywh {15 5 375 190} box FLAT_BOX
              class {mrv::LogDisplay}
            }
          }
        }
      }
    }
    Function {ConnectionUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~ConnectionUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class ViewerUI {open
  } {
    decl {static PreferencesUI* uiPrefs;} {public
    }
    decl {static LogUI* uiLog;} {public
    }
    decl {static AboutUI* uiAbout;} {public
    }
    decl {static ICCProfileListUI* uiICCProfiles;} {public
    }
    decl {static HotkeyUI* uiHotkey;} {public
    }
    decl {static ConnectionUI* uiConnection;} {public
    }
    decl {SopNode* uiSOPNode;} {public
    }
    decl {ReelUI* uiReelWindow;} {public
    }
    decl {ImageInfoUI* uiImageInfo;} {public
    }
    decl {GL3dViewUI* uiGL3dView;} {public
    }
    decl {StereoUI* uiStereo;} {public
    }
    decl {ColorAreaUI* uiColorArea;} {public
    }
    decl {HistogramUI* uiHistogram;} {public
    }
    decl {VectorscopeUI* uiVectorscope;} {public
    }
    decl {PaintUI* uiPaint;} {public
    }
    decl {EDLWindowUI* uiEDLWindow;} {public
    }
    Function {make_window()} {open private
    } {
      code {uiPrefs = new PreferencesUI(this);} {}
      {fltk::Window} uiMain {
        label mrViewer
        user_data this user_data_type {mrv::ViewerUI*}
        callback {delete v;} open
        xywh {651 220 640 535} when CHANGED resizable
        extra_code {o->size_range(640, 530);
o->main( this );}
        class {mrv::MainWindow} visible
      } {
        {fltk::PackedGroup} uiRegion {open
          xywh {0 0 640 535}
        } {
          {fltk::Group} uiTopBar {open
            xywh {0 0 640 28} box ENGRAVED_BOX
          } {
            {fltk::PopupMenu} uiWindows {
              label W
              tooltip {Opens different windows}
              xywh {5 5 20 20}
              extra_code {o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              {fltk::Item} {} {
                label Reels
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiReelWindow->uiMain->child_of( v->uiMain );
v->uiReelWindow->uiMain->show();}
                }
              {fltk::Item} {} {
                label {Media Info}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiImageInfo->uiMain->show();
v->uiView->update_image_info();}
                }
              {fltk::Item} {} {
                label {Action Tools}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiPaint->uiMain->show();}
                }
              {fltk::Item} {} {
                label {Color Area}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiColorArea->uiMain->show();
v->uiView->update_color_info();}
                }
              {fltk::Item} {} {
                label {3D Stereo Options}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiStereo->uiMain->show();}
                }
              {fltk::Item} {} {
                label {EDL Edit}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiEDLWindow->uiMain->show();}
                }
              {fltk::Item} {} {
                label 3dView
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiGL3dView->uiMain->show();}
                }
              {fltk::Item} {} {
                label Histogram
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiHistogram->uiMain->show();}
                }
              {fltk::Item} {} {
                label Vectorscope
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiVectorscope->uiMain->show();}
                }
              {fltk::Item} {} {
                label {ICC Profiles}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiICCProfiles->fill();
v->uiICCProfiles->uiMain->show();}
                }
              {fltk::Item} {} {
                label Connections
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiConnection->uiMain->child_of( v->uiMain );
v->uiConnection->uiMain->show();}
                }
              {fltk::Item} {} {
                label Preferences
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiPrefs->uiMain->child_of( v->uiMain );
v->uiPrefs->uiMain->show();}
                }
              {fltk::Item} {} {
                label Hotkeys
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiHotkey->uiMain->child_of( v->uiMain );
v->uiHotkey->uiMain->show();}
                }
              {fltk::Item} {} {
                label Logs
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiLog->uiMain->child_of( v->uiMain );
v->uiLog->uiMain->show();}
                }
              {fltk::Item} {} {
                label About
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiAbout->uiMain->show();}
                }
            }
            {fltk::Group} {} {open
              xywh {30 5 90 20} color 0x53535300
            } {
              {fltk::PopupMenu} uiColorChannel {
                label {(no image)}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiView->channel( o->get_item() );} open
                tooltip {Allows you to select different image channels or layers.}
                xywh {0 0 90 19} type normal align 80
                class {mrv::PopupMenu}
              } {}
            }
            {fltk::Group} {} {open
              xywh {120 4 285 21} color 0x53535300
            } {
              {fltk::Group} {} {open
                xywh {0 0 285 21}
              } {
                {fltk::PopupMenu} uiICS {
                  label {Input Color Space}
                  user_data this user_data_type {mrv::ViewerUI*}
                  callback {mrv::media fg = v->uiView->foreground();
if (!fg) return;

CMedia* img = fg->image();

int i = o->value();
if ( i < 0 || i >= o->children() ) return;

std::string c = o->child( i )->label();
o->label( strdup( c.c_str() ) );
img->ocio_input_color_space( c );} open
                  xywh {145 0 140 20}
                  class {mrv::PopupMenu}
                } {}
                {fltk::Group} {} {open
                  xywh {0 1 145 18} box FLAT_BOX
                } {
                  {fltk::InvisibleBox} {} {
                    label Gain selected
                    xywh {0 0 38 17} align 104
                  }
                  {fltk::ValueInput} uiGainInput {
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {v->uiView->gain( (float) o->value() );
v->uiGain->value( (float) o->value() );}
                    tooltip {Gain image value.  A simple multiplier of the image pixel values.}
                    xywh {40 0 35 18} when CHANGED color 0x98a8a800 textcolor 0x3030300 selection_color 0xe8e8d800 labelcolor 0xababab00 minimum 0.01 maximum 1024 step 0.001 value 1
                    extra_code {o->textsize( 12 );}
                    class {mrv::ValueInput}
                  }
                  {fltk::Slider} uiGain {
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {v->uiView->gain( (float) o->value() );
v->uiGainInput->value( (float) o->value() );}
                    tooltip {Allows you to adjust the gain or exposure of the image.}
                    xywh {75 0 70 18} type {LOG|fltk::Slider::TICK_ABOVE} minimum 0.015625 maximum 64 value 1 slider_size 10
                  }
                }
                {fltk::Group} uiFstopGroup {
                  xywh {145 1 95 19} hide
                } {
                  {fltk::Button} {} {
                    label {@<}
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {v->uiView->exposure_change(-0.5f);}
                    tooltip {Decrease exposure by 0.5.}
                    xywh {0 0 16 19}
                  }
                  {fltk::Button} uiFstop {
                    label {+0.0  f/8.0}
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {static float old_gain = 1.0f;
float gain = v->uiView->gain();
if ( gain == 1.0f )
{
v->uiView->gain( old_gain );
v->uiGainInput->value( old_gain );
v->uiGain->value( old_gain );
}
else
{
old_gain = gain;
v->uiView->gain( 1.0f );
v->uiGain->value( 1.0f );
v->uiGainInput->value( 1.0f );
}}
                    tooltip {Displays gain as film exposure and fstop.
Click to toggle between current and normal exposure.}
                    xywh {15 0 64 19} labelfont 1
                    extra_code {o->labelsize( 12 );}
                  }
                  {fltk::Button} {} {
                    label {@>}
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {v->uiView->exposure_change(0.5f);}
                    tooltip {Increase exposure by 0.5.}
                    xywh {79 0 16 19}
                  }
                }
                {fltk::Button} uiNormalize {
                  label Norm
                  user_data this user_data_type {mrv::ViewerUI*}
                  callback {v->uiView->toggle_normalize();}
                  tooltip {Normalize pixel values to remain in [0,1] range.}
                  xywh {243 1 30 19} type TOGGLE hide
                }
              }
            }
            {fltk::Group} {} {open
              xywh {405 5 155 20} color 0x53535300
            } {
              {fltk::Group} {} {open
                xywh {0 0 155 20}
              } {
                {fltk::Group} {} {open
                  xywh {0 0 155 20}
                } {
                  {fltk::PopupMenu} gammaDefaults {
                    label Gamma
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {float g = (float) atof( o->child( o->value() )->label() );
if ( !is_equal( g, 0.0 ) )
{
   v->uiGamma->value(g);
   v->uiGammaInput->value( g );
   v->uiView->gamma(g);
   v->uiView->use_lut(false);
   v->uiLUT->value(false);
   o->label( strdup( _("Gamma") ) );
}
else
{
  int idx = o->value();
  const char* lbl = o->child( idx )->label();
  if ( lbl )
  {
     v->uiGamma->value( 1.0f );
     v->uiGammaInput->value( 1.0f );
     v->uiView->gamma( 1.0f );
     mrv::Preferences::OCIO_View = lbl;
     std::string view = _(lbl);

     o->label( strdup( view.c_str() ) );
     v->uiView->use_lut(true);
     v->uiLUT->value(true);
     mrv::media fg = v->uiView->foreground();
     if ( !fg ) return;
     fg->image()->image_damage( CMedia::kDamageAll );
     v->uiView->redraw();
  }
}}
                    tooltip {Some default gamma settings.}
                    xywh {0 0 50 19} box UP_BOX
                    class {mrv::PopupMenu}
                  } {
                    {fltk::Item} {} {
                      label {2.2}
                      }
                    {fltk::Item} {} {
                      label {1.8}
                      }
                    {fltk::Item} {} {
                      label {1.00}
                      }
                    {fltk::Item} {} {
                      label {0.55}
                      }
                    {fltk::Item} {} {
                      label {0.45}
                      }
                  }
                  {fltk::ValueInput} uiGammaInput {
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {v->uiView->gamma( (float) o->value() );
                               v->uiGamma->value( (float) o->value() );}
                    tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );}
                    xywh {50 0 35 18} when CHANGED color 0x98a8a800 textcolor 0x3030300 selection_color 0xe8e8d800 labelcolor 0xababab00 highlight_textcolor 56 minimum 0.015625 maximum 64 step 0.01 value 1
                    extra_code {o->textsize(12);}
                    class {mrv::ValueInput}
                  }
                  {fltk::Slider} uiGamma {
                    user_data this user_data_type {mrv::ViewerUI*}
                    callback {v->uiView->gamma( (float) o->value() );
v->uiGammaInput->value( (float) o->value() );}
                    tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );}
                    xywh {85 0 60 18} type {LOG|fltk::Slider::TICK_ABOVE} minimum 0.25 maximum 4 step 0.01 value 0.25 slider_size 10
                  }
                }
              }
            }
            {fltk::Group} {} {
              xywh {550 5 80 20}
            } {
              {fltk::PopupMenu} uiField {
                label F
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiView->field( (mrv::ImageView::FieldDisplay) o->value() );} open
                tooltip {Changes frame/field display}
                xywh {0 0 20 20}
                extra_code {o->disable_glyph();}
                class {mrv::PopupMenu}
              } {
                {fltk::Item} {} {
                  label Frame
                  }
                {fltk::Item} {} {
                  label {Top Field}
                  }
                {fltk::Item} {} {
                  label {Bottom Field}
                  }
              }
              {fltk::Button} uiPixelRatio {
                label {1:1}
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiView->toggle_pixel_ratio();}
                tooltip {Stretch image to compensate for image's pixel ratio.}
                xywh {20 0 30 20} type TOGGLE shortcut 0x40070
              }
              {fltk::Button} uiLUT {
                label LUT
                user_data this user_data_type {mrv::ViewerUI*}
                callback {v->uiView->toggle_lut();}
                tooltip {Activate viewer's 3D Lut.}
                xywh {50 0 30 20} type TOGGLE shortcut 0x74
              }
            }
          }
          {fltk::Group} uiViewGroup {open
            xywh {0 28 640 430} resizable
            class {fltk::Group}
          } {
            {fltk::Group} uiView {
              xywh {0 0 640 430}
              extra_code {o->main(this);}
              class {mrv::ImageView}
            } {}
          }
          {fltk::Group} uiPixelBar {
            xywh {0 458 640 28} box FLAT_BOX color 56
          } {
            {fltk::Group} {} {open
              xywh {2 0 634 25}
            } {
              {fltk::PopupMenu} uiZoom {
                label x1
                user_data this user_data_type {mrv::ViewerUI*}
                callback {int t = o->value();
float f;
if ( t < 8 )
{
f = 1 / (float) (9-t);
}
else if ( t == 17 )
{
v->uiView->fit_image();
return;
}
else
{
f = float(t - 7);
}
v->uiView->zoom( f );
o->value(8);}
                tooltip {Image zoom setting.}
                xywh {3 3 26 20} box UP_BOX buttonbox BORDER_BOX color 0x53535300 textcolor 0xababab00 buttoncolor 0x53535300 labelcolor 0xababab00 labelsize 10 textsize 10
                extra_code {o->value(10);
o->disable_glyph();}
                class {mrv::PopupMenu}
              } {
                {fltk::Item} {} {
                  label {1/9}
                  }
                {fltk::Item} {} {
                  label {1/8}
                  }
                {fltk::Item} {} {
                  label {1/7}
                  }
                {fltk::Item} {} {
                  label {1/6}
                  }
                {fltk::Item} {} {
                  label {1/5}
                  }
                {fltk::Item} {} {
                  label {1/4}
                  }
                {fltk::Item} {} {
                  label {1/3}
                  }
                {fltk::Item} {} {
                  label {1/2}
                  }
                {fltk::Item} {} {
                  label x1
                  }
                {fltk::Item} {} {
                  label x2
                  }
                {fltk::Item} {} {
                  label x3
                  }
                {fltk::Item} {} {
                  label x4
                  }
                {fltk::Item} {} {
                  label x5
                  }
                {fltk::Item} {} {
                  label x6
                  }
                {fltk::Item} {} {
                  label x7
                  }
                {fltk::Item} {} {
                  label x8
                  }
                {fltk::Item} {} {
                  label x9
                  }
                {fltk::Item} {} {
                  label FIT
                  }
              }
              {fltk::Group} {} {
                xywh {29 0 605 25}
              } {
                {fltk::Output} uiCoord {
                  label XY
                  tooltip {Image coordinate of pixel under mouse.}
                  xywh {0 3 85 20} align 36 box NO_BOX labelfont 4 color 56 textcolor 0xababab00 labelcolor 0xababab00 labelsize 10 textsize 10
                }
                {fltk::Group} {} {open
                  xywh {85 0 520 25}
                } {
                  {fltk::Group} {} {open
                    xywh {0 0 520 25}
                  } {
                    {fltk::Group} {} {open
                      xywh {0 3 230 22}
                    } {
                      {fltk::PopupMenu} uiAColorType {
                        label RGBA
                        user_data uiView user_data_type {mrv::ImageView*}
                        callback {int i = o->value();
if ( i < 0 ) return;
o->label( o->child(i)->label() );} open
                        tooltip {Switch RGBA display between floating point, hexadecimal (0..0xff) and decimal (0..255).}
                        xywh {0 0 30 20} labelsize 9
                        extra_code {o->value(0);
o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        {fltk::Item} {} {
                          label RGBA
                          }
                        {fltk::Item} {} {
                          label Hex
                          }
                        {fltk::Item} {} {
                          label 8bit
                          }
                      }
                      {fltk::Output} uiPixelR {
                        tooltip {Red value of image pixel under mouse.}
                        xywh {30 0 50 22} align 36 box NO_BOX color 56 textcolor 0xff6a6a00 textsize 10
                      }
                      {fltk::Output} uiPixelG {
                        tooltip {Green value of image pixel under mouse.}
                        xywh {80 0 50 22} align 36 box NO_BOX color 56 textcolor 0x92ff9200 textsize 10
                      }
                      {fltk::Output} uiPixelB {
                        tooltip {Blue value of image pixel under mouse.}
                        xywh {130 0 50 22} align 36 box NO_BOX color 56 textcolor 0x42b5ff00 textsize 10
                      }
                      {fltk::Output} uiPixelA {
                        tooltip {Alpha value of image pixel under mouse.}
                        xywh {180 0 50 22} align 36 box NO_BOX color 56 textcolor 0xcccccc00 textsize 10
                      }
                    }
                    {fltk::Output} uiPixelView {
                      tooltip {8-bit sample of image pixel under mouse.}
                      xywh {249 2 20 20} vertical box FLAT_BOX color 0x53535300
                    }
                    {fltk::Group} {} {
                      xywh {275 3 173 22}
                    } {
                      {fltk::PopupMenu} uiBColorType {
                        label HSV
                        user_data uiView user_data_type {mrv::ImageView*}
                        callback {int i = o->value();
if ( i < 0 ) return;
o->label( mrv::color::space2id( (mrv::color::Space) (i+1)) );
v->update_color_info();} open
                        tooltip {Switch pixel color space information display for the pixel under the cursor.}
                        xywh {0 0 23 20} labelsize 9
                        extra_code {o->value(0);
o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        {fltk::Item} {} {
                          label HSV
                          }
                        {fltk::Item} {} {
                          label HSL
                          }
                        {fltk::Item} {} {
                          label {XYZ CIE XYZ}
                          }
                        {fltk::Item} {} {
                          label {xyY CIE xyY}
                          }
                        {fltk::Item} {} {
                          label {Lab CIELAB (L*a*b*)}
                          }
                        {fltk::Item} {} {
                          label {Luv CIELUV (L*u*v*)}
                          }
                        {fltk::Item} {} {
                          label {YUV (Analog PAL)}
                          }
                        {fltk::Item} {} {
                          label {YDbDr (Analog SECAM/PAL-N)}
                          }
                        {fltk::Item} {} {
                          label {YIQ (Analog NTSC)}
                          }
                        {fltk::Item} {} {
                          label {ITU-601 (Digital PAL/NTSC YCbCr)}
                          }
                        {fltk::Item} {} {
                          label {ITU-709 (Digital HDTV YCbCr)}
                          }
                      }
                      {fltk::Output} uiPixelH {
                        tooltip {Hue value of image pixel under mouse.}
                        xywh {23 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b20000 textsize 10
                      }
                      {fltk::Output} uiPixelS {
                        tooltip {Saturation value of image pixel under mouse.}
                        xywh {73 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b20000 textsize 10
                      }
                      {fltk::Output} uiPixelV {
                        tooltip {Value (Intensity) of image pixel under mouse.}
                        xywh {123 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b20000 textsize 10
                      }
                    }
                    {fltk::PopupMenu} uiPixelValue {
                      label F
                      user_data uiView user_data_type {mrv::ImageView*}
                      callback {int i = o->value();
if ( i < 0 ) return;
char t[2];
t[1] = 0;
t[0] = o->child(i)->label()[0];
o->label( strdup(t) );
v->update_color_info();} open
                      tooltip {Type of pixel values to show:
+ Full:  pixel with gamma, gain and lut.
+ Gamma: pixel with gamma and gain but no lut.
+ Original: pixel without gamma, gain or lut.}
                      xywh {234 3 13 20} align 48
                      extra_code {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      {fltk::Item} {} {
                        label Full
                        }
                      {fltk::Item} {} {
                        label Gamma
                        }
                      {fltk::Item} {} {
                        label Original
                        }
                    }
                    {fltk::Group} {} {open
                      xywh {451 3 65 22}
                    } {
                      {fltk::PopupMenu} uiLType {
                        label Y
                        callback {int x = o->value();
const char* lbl = o->child(x)->label();
const char name[3] = { lbl[0], lbl[1], 0 };
o->copy_label( name );}
                        tooltip {Switch brightness calculation.

Y (Luminance) is the pixel value according to Rec709:
      Y = 0.2126 R + 0.7152 G + 0.0722 B

Y' (Lumma) is the weighted pixel value according to:
      Y' = ( R + G + B ) / 3.0

L (Lightness) is the human perception of luminance of the image which is non linear.
According to CIE No.15.2:
      L = (116 * Y ^ 1/3 - 16) / 100
A pixel of Y = 0.18 (L = 0.5) will appear about half as bright as Y = L = 1.0 (white).}
                        xywh {0 0 15 20}
                        extra_code {o->value(0);
o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        {fltk::Item} {} {
                          label {Y (Luminance)}
                          }
                        {fltk::Item} {} {
                          label {Y' (Lumma)}
                          vertical
                        }
                        {fltk::Item} {} {
                          label {L (Lightness)}
                          tooltip {Lightness is the human perceptual response to luminance Y, according to CIE No.15.2:

      L = 116 * (Y/Yn)^1/3 - 16

where Yn is the white reference (usually 1).
     }
                          vertical
                        }
                      }
                      {fltk::Output} uiPixelL {
                        tooltip {Luminance of image pixel under mouse.}
                        xywh {15 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b2b200 textsize 10
                      }
                    }
                  }
                }
              }
            }
          }
          {fltk::PackedGroup} uiBottomBar {
            xywh {0 486 640 49} box ENGRAVED_BOX
          } {
            {fltk::Group} uiTimeToolbar {open
              xywh {0 0 640 49}
            } {
              {fltk::Group} {} {open
                xywh {0 0 640 49}
              } {
                {fltk::Slider} uiTimeline {
                  user_data this user_data_type {mrv::ViewerUI*}
                  callback {int64_t frame = (int64_t) o->value();
v->uiView->seek( frame );}
                  tooltip {Timeline. To scrub, you must be in scrubbing mode.  Then use LMB and drag left/right.}
                  xywh {5 3 610 21} type TICK_ABOVE resizable textfont 1 textcolor 0x2020200 textsize 12 minimum 1 maximum 50 step 1 value 1 slider_size 10
                  extra_code {o->main( this );}
                  class {mrv::Timeline}
                }
                {fltk::PopupMenu} uiLoopMode {
                  label {@b;L}
                  user_data this user_data_type {mrv::ViewerUI*}
                  callback {int c = o->value();
o->label(o->child(c)->label());
v->uiView->looping( (CMedia::Looping)c );}
                  tooltip {Looping Behavior ( Stop, Loop, Ping-Pong )}
                  xywh {615 2 21 23} box UP_BOX
                  class {mrv::PopupMenu}
                } {
                  {fltk::Item} {} {
                    label {@||}
                    }
                  {fltk::Item} {} {
                    label {@b;L}
                    }
                  {fltk::Item} {} {
                    label {@<->}
                    }
                }
                {fltk::Group} {} {open
                  xywh {0 23 640 26}
                } {
                  {fltk::Group} {} {open
                    xywh {4 4 94 20}
                  } {
                    {fltk::PopupMenu} uiTimecodeSwitch {
                      label {F:}
                      user_data this user_data_type {mrv::ViewerUI*}
                      callback {change_timeline_display(v);} open
                      tooltip {Switch between Frame, Seconds and Timecode display}
                      xywh {0 0 20 20} box DOWN_BOX
                      extra_code {o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      {fltk::Item} {} {
                        label Frames
                        }
                      {fltk::Item} {} {
                        label Seconds
                        }
                      {fltk::Item} {} {
                        label Time
                        }
                      {fltk::Item} {} {
                        label {Non-Drop Frame Timecode}
                        }
                      {fltk::Item} {} {
                        label {Drop Frame Timecode}
                        }
                    }
                    {fltk::Input} uiFrame {
                      label F
                      user_data this user_data_type {mrv::ViewerUI*}
                      callback {int64_t f = o->value();
if ( f < v->uiTimeline->minimum() )
   f = int64_t( v->uiTimeline->minimum() );
else if ( f > v->uiTimeline->maximum() )
   f = int64_t( v->uiTimeline->maximum() );
v->uiView->seek( f );}
                      tooltip {Current frame.}
                      xywh {20 0 70 20} color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                      extra_code {o->value(1);}
                      class {mrv::Timecode}
                    }
                  }
                  {fltk::Group} {} {open
                    xywh {95 2 360 23} resizable
                  } {
                    {fltk::Group} {} {open
                      xywh {0 1 215 22}
                    } {
                      {fltk::Button} {} {
                        label {@|<}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->first_frame();}
                        tooltip {Go to the beginning of the sequence.}
                        xywh {3 2 30 18} labelcolor 0x98a8a800
                      }
                      {fltk::Button} uiPlayBackwards {
                        label {@<}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->play_backwards();}
                        tooltip {Play sequence backwards.}
                        xywh {33 2 30 18} labelcolor 0x98a8a800
                      }
                      {fltk::Button} {} {
                        label {@<|}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->step_frame(-1);}
                        tooltip {Go back one frame.}
                        xywh {63 2 30 18} labelcolor 0x98a8a800
                      }
                      {fltk::Button} {} {
                        label {@||}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->stop();}
                        tooltip {Stop playback.  You can use LMB and Drag to scrub when in scrubbing mode (default).}
                        xywh {93 2 30 18} labelcolor 0x98a8a800
                      }
                      {fltk::Button} {} {
                        label {@|>}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->step_frame(1);}
                        tooltip {Advance one frame.}
                        xywh {123 2 30 18} labelcolor 0x98a8a800
                      }
                      {fltk::Button} uiPlayForwards {
                        label {@>}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->play_forwards();}
                        tooltip {Play sequence forward.}
                        xywh {153 2 30 18} labelcolor 0x98a8a800
                      }
                      {fltk::Button} {} {
                        label {@>|}
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->last_frame();}
                        tooltip {Go to the end of the sequence.}
                        xywh {183 2 30 18} labelcolor 0x98a8a800
                      }
                    }
                    {fltk::Group} {} {open
                      xywh {220 0 65 21}
                    } {
                      {fltk::PopupMenu} fpsDefaults {
                        label FPS
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {int c = o->value();

double g;
mrv::media fg = v->uiView->foreground();

if ( c <= 0 && fg )
    g = fg->image()->fps();
else
    g = atof( o->child( o->value() )->label() );

v->uiView->fps( g );
v->uiFPS->value( g );} open
                        tooltip {Some default frame rate settings.}
                        xywh {0 2 30 19} box UP_BOX labelsize 10
                        extra_code {o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        {fltk::Item} {} {
                          label Default
                          }
                        {fltk::Item} {} {
                          label 60
                          }
                        {fltk::Item} {} {
                          label {59.94}
                          }
                        {fltk::Item} {} {
                          label 50
                          }
                        {fltk::Item} {} {
                          label 30
                          }
                        {fltk::Item} {} {
                          label {29.97}
                          }
                        {fltk::Item} {} {
                          label 25
                          }
                        {fltk::Item} {} {
                          label 24
                          }
                        {fltk::Item} {} {
                          label {23.976}
                          }
                        {fltk::Item} {} {
                          label 15
                          }
                        {fltk::Item} {} {
                          label {14.985}
                          }
                        {fltk::Item} {} {
                          label {12.5}
                          }
                        {fltk::Item} {} {
                          label 12
                          }
                      }
                      {fltk::Input} uiFPS {
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->fps( o->value() );}
                        tooltip {Allows you to adjust frame rate playback.}
                        xywh {29 2 35 18} when CHANGED color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                        extra_code {o->textcolor( fltk::BLACK );
o->value(24);}
                        class {fltk::ValueInput}
                      }
                    }
                    {fltk::Group} {} {open
                      xywh {287 2 73 19}
                    } {
                      {fltk::PopupMenu} uiAudioTracks {
                        label A
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->audio_stream( o->value() );}
                        tooltip {Select Audio Track}
                        xywh {0 0 18 19} when CHANGED box UP_BOX labelsize 10
                        extra_code {o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {}
                      {fltk::Slider} uiVolume {
                        user_data this user_data_type {mrv::ViewerUI*}
                        callback {v->uiView->volume((float) o->value() );}
                        tooltip {Audio Volume}
                        xywh {18 2 55 15} type TICK_ABOVE align 4 step 0.01 value 1
                      }
                    }
                  }
                  {fltk::Group} {} {open
                    xywh {455 0 180 24}
                  } {
                    {fltk::Input} uiStartFrame {
                      label S
                      user_data this user_data_type {mrv::ViewerUI*}
                      callback {int64_t f = o->value();
v->uiTimeline->minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      tooltip {Allows you to set starting frame for timeline.}
                      xywh {20 4 70 20} when CHANGED color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                      extra_code {o->value(1);}
                      class {mrv::Timecode}
                    }
                    {fltk::Input} uiEndFrame {
                      label E
                      user_data this user_data_type {mrv::ViewerUI*}
                      callback {boost::int64_t f = o->value();
v->uiTimeline->maximum( float(f) );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      tooltip {Allows you to set the ending frame for timeline.}
                      xywh {110 4 70 20} when CHANGED color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                      extra_code {o->value(50);}
                      class {mrv::Timecode}
                    }
                    {fltk::Button} uiStartButton {
                      label S
                      user_data this user_data_type {mrv::ViewerUI*}
                      callback {int64_t f = 1;

if ( !o->value() )
{
  o->value(1);
  f = v->uiFrame->value();
}
else
{
  o->value(0);
  if ( !v->uiTimeline->edl() )
  {
     mrv::media fg = v->uiView->foreground();
     if ( fg )
     {
        Image_ptr img = fg->image();
        f = img->first_frame();
     }
   }
   else
   {
     // edl
     mrv::Reel reel = v->uiReelWindow->uiBrowser->current_reel();
     if ( !reel || reel->images.size() == 0 ) return;

     mrv::media fg = reel->images[0];
     if ( fg ) f = fg->position();
  }
}

v->uiStartFrame->value( f );
v->uiTimeline->minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      xywh {1 4 20 20} vertical
                    }
                    {fltk::Button} uiEndButton {
                      label E
                      user_data this user_data_type {mrv::ViewerUI*}
                      callback {int64_t f;
if ( !o->value() )
{
  o->value(1);
  f = v->uiFrame->value();
}
else
{
  o->value(0);
  if ( ! v->uiTimeline->edl() )
  {
     mrv::media fg = v->uiView->foreground();
     if ( fg )
     {
        Image_ptr img = fg->image();
        f = img->last_frame();
     }
   }
   else
   {
     // edl
     mrv::Reel reel = v->uiReelWindow->uiBrowser->current_reel();
     size_t size  = reel->images.size();
     if ( !reel || size == 0 ) return;

     mrv::media fg = reel->images[ size - 1 ];
     if ( fg ) f = fg->position() + fg->duration() - 1;
   }
}

v->uiEndFrame->value( f );
v->uiTimeline->maximum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      xywh {91 4 20 20} vertical
                    }
                  }
                }
              }
            }
          }
        }
      }
      code {uiSOPNode = NULL;
uiReelWindow = new ReelUI(this);
uiImageInfo = new ImageInfoUI(this);
uiColorArea = new ColorAreaUI(this);
uiStereo = new StereoUI(this);
uiGL3dView = new GL3dViewUI(this);
uiVectorscope = new VectorscopeUI(this);
uiHistogram = new HistogramUI(this);
uiPaint = new PaintUI(this);
if (!uiLog) uiLog   = new LogUI(this);
if (!uiAbout) uiAbout = new AboutUI(this); // should be static

if (!uiConnection) uiConnection = new ConnectionUI( this );

uiHotkey = new HotkeyUI(this);
uiICCProfiles = new ICCProfileListUI(this);
uiEDLWindow = new EDLWindowUI(this);

// read and use preferences
mrv::Preferences prefs( uiPrefs );

//uiHotkey = new HotkeyUI(this);
//uiICCProfiles = new ICCProfileListUI(this);
//uiEDLWindow = new EDLWindowUI(this);} {}
    }
    Function {ViewerUI()} {} {
      code {uiMain = make_window();} {}
    }
    Function {~ViewerUI()} {open
    } {
      code {delete uiICCProfiles; uiICCProfiles = NULL;
delete uiImageInfo; uiImageInfo = NULL;
delete uiColorArea; uiColorArea = NULL;
delete uiHistogram; uiHistogram = NULL;
delete uiVectorscope; uiVectorscope = NULL;
delete uiGL3dView; uiGL3dView = NULL;
delete uiAbout; uiAbout = NULL;
delete uiLog; uiLog = NULL;
delete uiPaint; uiPaint = NULL;
delete uiEDLWindow; uiEDLWindow = NULL;
delete uiMain; uiMain = NULL;
delete uiStereo; uiStereo = NULL;
delete uiSOPNode; uiSOPNode = NULL;
delete uiReelWindow; uiReelWindow = NULL;} {}
    }
  }
} 

Function {make_ocio_browser(std::string ctl, mrv::OCIOBrowser::Type type )} {open return_type {std::string}
} {
  code {std::string orig = ctl;} {}
  {fltk::Window} {} {
    label {CTL Browser} open
    xywh {691 384 395 447} horizontal hide resizable hotspot modal
  } {
    {fltk::Group} {} {open
      xywh {5 26 385 411}
    } {
      {fltk::Browser} uiOCIOBrowser {
        label {Select an OCIO Transform}
        user_data {&ctl} user_data_type {std::string*}
        callback {int elem = o->value();
if ( elem < 0 || elem >= o->children() ) { v->clear(); return; }
*v = o->child(elem)->label();}
        xywh {5 0 375 365}
        extra_code {o->set_type(type);
o->value(-1);
if ( !ctl.empty() )
{
  fltk::Widget* elem = o->find( ctl.c_str() );

  for (int i = 0; i < o->children(); ++i )
  {
    if ( o->child(i) == elem ) {
      o->value(i); break;
    }
  }
}}
        class {mrv::OCIOBrowser}
      } {}
      {fltk::Button} {} {
        label Accept
        user_data w user_data_type {fltk::Window*}
        callback {v->make_exec_return(true);}
        tooltip {Accept the selected CTL file.}
        xywh {200 375 85 25}
      }
      {fltk::Button} {} {
        label Cancel
        user_data w user_data_type {fltk::Window*}
        callback {v->make_exec_return(false);}
        tooltip {Cancel the CTL selection and don't change anything.}
        xywh {295 375 80 25}
      }
    }
  }
  code {if (!w->exec())
        return orig;
return ctl;} {}
} 
