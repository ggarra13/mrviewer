<<<<<<< HEAD
# data file for the FLTK User Interface Designer (FLUID)
version 2.1000 
images_dir fltk::Button 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3

decl {\#include "core/mrvI8N.h"} {public
}

decl {\#include "string"} {public
} 

=======
# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {\#include "string"} {public local
}

decl {\#include "core/mrvFrame.h"} {public local
}

decl {\#include "core/mrvI8N.h"} {private local
}

decl {\#include "core/mrvAudioEngine.h"} {private local
}

decl {\#include "core/exrImage.h"} {private local
}

decl {\#include "core/mrvMath.h"} {private local
}

decl {\#include "core/stubImage.h"} {private local
}

decl {\#include "core/mrvColorSpaces.h"} {private local
}

decl {\#include "core/mrvServer.h"} {private local
}
>>>>>>> v5.0.1-RC4

decl {\#include "core/mrvClient.h"} {private local
}

decl {\#include "gui/mrvMainWindow.h"} {private local
}

decl {\#include "gui/mrvImageView.h"} {private local
}

decl {\#include "gui/mrvImageBrowser.h"} {private local
}

decl {\#include "gui/mrvBrowser.h"} {private local
}

decl {\#include "gui/mrvCTLBrowser.h"} {public local
}

decl {\#include "mrvFileRequester.h"} {private local
}

decl {\#include "gui/mrvSlider.h"} {public local
}

decl {\#include "gui/mrvChoice.h"} {public local
}

decl {\#include "gui/mrvPopupMenu.h"} {public global
}

decl {\#include "gui/mrvTimecode.h"} {private local
}

decl {\#include "gui/mrvTimeline.h"} {private local
}

decl {\#include "gui/mrvColorOps.h"} {private local
}

decl {\#include "gui/mrvHistogram.h"} {private local
}

decl {\#include "gui/mrvVectorscope.h"} {private local
}

decl {\#include "gui/mrvImageInformation.h"} {private local
}

decl {\#include "gui/mrvPreferences.h"} {private local
}

decl {\#include "gui/mrvLogDisplay.h"} {private local
}

decl {\#include "gui/mrvGlWindow3d.h"} {public local
}

decl {\#include "gui/mrvHotkey.h"} {private local
}

decl {\#include "gui/mrvDoubleWindow.h"} {private local
}

decl {\#include "AboutUI.h"} {private local
}

decl {\#include "mrvVectorscopeUI.h"} {private local
}

decl {\#include "mrvHistogramUI.h"} {private local
}

decl {\#include "mrvImageInfo.h"} {private local
}

decl {\#include "mrvPreferencesUI.h"} {private local
}

decl {\#include "mrvGl3dView.h"} {private local
}

decl {\#include "mrvPlayback.h"} {private local
}

decl {\#include "mrvVersion.h"} {private local
}

decl {\#include "mrvIccProfileUI.h"} {private local
}

decl {\#include "mrvColorAreaUI.h"} {private local
}

decl {\#include "mrvEDLWindowUI.h"} {private local
}

decl {\#include "mrvReelUI.h"} {private local
}

decl {\#include "mrvStereoUI.h"} {public global
}

decl {\#include "mrvHotkeyUI.h"} {public global
}

decl {\#include "mrvWaveformUI.h"} {private local
}

decl {\#include "mrvSOPNode.h"} {public global
}

decl {\#include "icons/icons.c"} {private local
}

decl {\#include "FL/Fl_Color_Chooser.H"} {private local
}

decl {\#include "FL/fl_ask.H"} {private local
}

decl {\#include "FL/Fl.H"} {public global
}

decl {\#include "namespace.h"} {public global
}

Function {make_ctl_browser(std::string ctl, const char* prefix)} {open return_type {std::string}
} {
  code {std::string orig = ctl;} {}
  Fl_Window {} {
    label {CTL Browser} open
    xywh {566 476 395 440} type Double hide resizable hotspot
    class mrvDoubleWindow modal
  } {
    Fl_Group {} {open
      xywh {10 25 375 405}
    } {
      Fl_Browser uiBrowser {
        label {Select a CTL script}
        user_data {&ctl} user_data_type {std::string*}
        callback {int elem = o->value();
if ( elem < 1 || elem > o->size() ) { v->clear(); return; }
*v = o->text(elem);}
        private xywh {10 25 375 365} type Hold
        code0 {o->set_prefix(prefix);}
        code1 {o->find( ctl.c_str() );}
        class {mrv::CTLBrowser}
      }
      Fl_Button {} {
        label Accept
        user_data w user_data_type {mrvDoubleWindow*}
        callback {v->make_exec_return(true);}
        xywh {205 400 85 25}
      }
      Fl_Button {} {
        label Cancel
        user_data w user_data_type {mrvDoubleWindow*}
        callback {v->make_exec_return(false);}
        xywh {300 400 80 25}
      }
    }
  }
  code {if (!w->exec())
	return orig;
return ctl;} {}
}

class SaveOptionsUI {} {
  Function {make_window(ViewerUI* main)} {private
  } {
    Fl_Window uiMain {
      label {Save Options} open
      xywh {493 194 315 375} type Double hide resizable
      code0 {// Make the window transient
// o->child_of( main->uiMain );} modal
    } {
      Fl_Group {} {open
        xywh {8 14 302 356} box EMBOSSED_BOX
      } {
<<<<<<< HEAD
        {fltk::WizardGroup} uiWizard {
          label Settings open
          xywh {218 24 450 389}
        } {
          {fltk::Group} {} {
            label {User Interface}
            xywh {13 22 423 350} align 5 box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label {Window Behavior} open
              xywh {9 44 410 100} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsAlwaysOnTop {
                label {Always on Top}
                tooltip {When selected, mrViewer's window will always show up on top of other windows on the desktop.}
                xywh {24 14 19 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsSingleInstance {
                label {Single Instance}
                tooltip {When selected, only a single mrViewer instance is allowed.
If you try to open several mrViewers with different images, all these images will be sent to the already open mrViewer.}
                xywh {24 40 20 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsAutoFitImage {
                label {Auto Refit Image}
                tooltip {When selected, mrViewer will apply a fit image operation on each video played.  This effectly means the video will be resized automatically based on the size of the window.}
                xywh {24 67 20 25} align 8 box UP_BOX value 1
              }
              {fltk::Group} uiPrefsOpenMode {
                xywh {197 9 150 81} box UP_BOX
              } {
                {fltk::RadioButton} {} {
                  label Normal
                  tooltip {When selected, mrViewer will resize its window to the first image.}
                  xywh {8 6 19 20} align 8 box ROUND_UP_BOX value 1
                }
                {fltk::RadioButton} {} {
                  label Fullscreen
                  tooltip {When selected, mrViewer will start in full screen mode.}
                  xywh {8 31 19 20} align 8 box ROUND_UP_BOX
                }
                {fltk::RadioButton} {} {
                  label Presentation
                  tooltip {When selected, mrViewer will start in presentation mode.}
                  xywh {8 56 19 20} align 8 box ROUND_UP_BOX
                }
              }
            }
            {fltk::Group} {} {
              label {UI Elements} open
              xywh {9 164 410 155} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsTopbar {
                label Topbar
                tooltip {When selected, mrViewer will start with its channel, gain, gamma toolbar visible. }
                xywh {5 5 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsPixelToolbar {
                label {Pixel Toolbar}
                tooltip {When selected, mrViewer will start with the pixel toolbar shown.}
                xywh {5 35 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsTimeline {
                label Timeline
                tooltip {When selected, mrViewer will start with the timeline shown.}
                xywh {5 64 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsReelList {
                label {Reel List}
                tooltip {When selected, mrViewer will start with the reel list already open.}
                xywh {140 5 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHistogram {
                label Histogram
                tooltip {When selected, mrViewer will start with the histogram already open.}
                xywh {280 35 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsVectorscope {
                label Vectorscope
                tooltip {When selected, mrViewer will start with the vectorscope already open.}
                xywh {280 64 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsImageInfo {
                label {Media Info}
                tooltip {When selected, mrViewer will start with the media information window already open.}
                xywh {140 35 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsColorArea {
                label {Color Area}
                tooltip {When selected, mrViewer will start with the color area window already open.}
                xywh {140 64 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsEDLEdit {
                label {EDL Edit}
                tooltip {When selected, mrViewer will start with the EDL Edit window already open.}
                xywh {280 8 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsStereoOptions {
                label {Stereo 3D Options}
                tooltip {When selected, mrViewer will start with the stereo options window already open.}
                xywh {6 92 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsPaintTools {
                label {Action Tools}
                tooltip {When selected, mrViewer will start with the action tools already showing.}
                xywh {6 120 25 25} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsWaveform {
                label Waveform
                tooltip {When selected, mrViewer will start with the waveform already open.}
                xywh {280 90 25 25} align 8 box UP_BOX
              }
            }
          }
          {fltk::Group} {} {
            label {View Window}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Defaults
              xywh {13 32 394 135} box ROUNDED_BOX
            } {
              {fltk::ValueInput} uiPrefsViewGain {
                label Gain
                tooltip {Sets the default gain when mrViewer starts.}
                xywh {90 10 80 25} minimum 0.001 maximum 64 step 0.01 value 1
              }
              {fltk::ValueInput} uiPrefsViewGamma {
                label Gamma
                tooltip {Sets the default gamma when mrViewer starts.}
                xywh {280 10 60 25} minimum 0.01 maximum 4 step 0.01 value 1
              }
              {fltk::Choice} uiPrefsCropArea {
                label Crop
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {Allows you to select a standard cropping area around image.}
                xywh {15 58 155 25} align 1 box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {0.00 None}
                  }
                {fltk::Item} {} {
                  label {1.00 Square}
                  }
                {fltk::Item} {} {
                  label {1.19 Movietone}
                  }
                {fltk::Item} {} {
                  label {1.37 Academy (Full Frame)}
                  }
                {fltk::Item} {} {
                  label {1.50 Still Photo}
                  }
                {fltk::Item} {} {
                  label {1.56 STV - HDTV (14:9)}
                  }
                {fltk::Item} {} {
                  label {1.66 European Widescreen}
                  }
                {fltk::Item} {} {
                  label {1.77 HDTV (16:9)}
                  }
                {fltk::Item} {} {
                  label {1.85 Widescreen (3-perf)}
                  }
                {fltk::Item} {} {
                  label {2.10 VistaVision}
                  }
                {fltk::Item} {} {
                  label {2.20 70mm}
                  }
                {fltk::Item} {} {
                  label {2.35 CinemaScope (old 2.35)}
                  }
                {fltk::Item} {} {
                  label {2.39 Panavision (new 2.35)}
                  }
                {fltk::Item} {} {
                  label {4.00 Polyvision}
                  }
              }
              {fltk::CheckButton} uiPrefsViewPixelRatio {
                label {Compensate Pixel Ratio}
                tooltip {When mrViewer starts, the pixel aspect ratio compensation will be active by default.}
                xywh {198 55 20 22} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsViewLut {
                label {Lut Active}
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {When mrViewer starts, the 3D Lut will be active.}
                xywh {198 80 20 22} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsSafeAreas {
                label {Safe Areas}
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {When mrViewer starts, the safe area display will be active by default.}
                xywh {198 107 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsViewDisplayWindow {
                label {Display Window}
                tooltip {When mrViewer starts, the display window will be shown when appropiate.}
                xywh {20 88 20 22} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsViewDataWindow {
                label {Data Window}
                tooltip {When mrViewer starts, the data window will be shown when appropiate as a dotted line.}
                xywh {20 108 20 22} align 8 box UP_BOX value 1
              }
            }
            {fltk::Group} uiPrefsHud {
              label HUD
              user_data this user_data_type {mrv::PreferencesUI*}
              tooltip {This area specifies which elements should be shown as a HUD overlay on the view screen.}
              xywh {15 187 397 122} box UP_BOX
            } {
              {fltk::CheckButton} uiPrefsHudFilename {
                label Filename
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 87 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudDirectory {
                label Directory
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 61 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudFrame {
                label Frame
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {16 35 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudFrameRange {
                label {Frame Range}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {15 62 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudResolution {
                label Resolution
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 10 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudFPS {
                label FPS
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {16 10 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudAttributes {
                label Attributes
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {272 11 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudAVDifference {
                label {VA Difference}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 35 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudTimecode {
                label Timecode
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {15 87 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudWipeMode {
                label {Wipe Mode}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {273 36 20 20} align 8 box UP_BOX
              }
              {fltk::CheckButton} uiPrefsHudMemory {
                label Memory
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {273 62 20 20} align 8 box UP_BOX
              }
            }
          }
          {fltk::Group} {} {
            label Colors
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label UI open
              xywh {12 24 383 108} box ROUNDED_BOX
            } {
              {fltk::Button} uiPrefsUIBG {
                label Background
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Background Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();}
                tooltip {Selects the background of UI.}
                xywh {141 18 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsUIText {
                label Text
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text in widgets.}
                xywh {141 63 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsUISelection {
                label Selection
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Selection Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of the selection rectangle in widgets.}
                xywh {256 18 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsUISelectionText {
                label {Selected Text}
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text in widgets.}
                xywh {256 63 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
            }
            {fltk::Group} {} {
              label View
              xywh {12 174 383 108} box ROUNDED_BOX
            } {
              {fltk::Button} uiPrefsViewBG {
                label Background
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Background Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();}
                tooltip {Selects the background color of areas outside the current image.}
                xywh {163 30 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsViewTextOverlay {
                label {Text Overlay}
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Text Overlay Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text overlays printed over the current image.}
                xywh {163 60 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsViewSelection {
                label Selection
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick View Selection Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of the selection rectangle over the current image.}
                xywh {278 30 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              {fltk::Button} uiPrefsViewHud {
                label HUD
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick HUD Color", r,g,b)) return;
o->color( fltk::color( r,g,b ) );
o->redraw();
v->refresh();}
                tooltip {Selects the color of HUD overlays.}
                xywh {278 60 25 25} align 4 box EMBOSSED_BOX
              }
            }
          }
          {fltk::Group} {} {
            label {File Requester}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX
          } {
            {fltk::CheckButton} uiPrefsFileReqFolder {
              label {Single Click to Travel Drawers}
              xywh {60 35 25 25} box UP_BOX
            }
            {fltk::CheckButton} uiPrefsFileReqThumbnails {
              label {Thumbnails Active}
              xywh {61 59 25 25} box UP_BOX
            }
            {fltk::CheckButton} uiPrefsNativeFileChooser {
              label {Use Native File Chooser on Windows}
              tooltip {On Windows, if selected, the native file chooser will be used.  If unselected, mrViewer's standard file chooser will be used.}
              xywh {61 117 25 25} box UP_BOX
            }
          }
          {fltk::Group} {} {
            label Positioning
            xywh {13 22 423 350} hide box EMBOSSED_BOX
          } {
            {fltk::Group} {} {open
              xywh {22 36 355 40} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiWindowFixedPosition {
                label {Fixed Position}
                tooltip {When this option is set, mrViewer will open in the position you set here (except if the window goes out of the Desktop).}
                xywh {25 15 100 20} box UP_BOX
              }
              {fltk::ValueInput} uiWindowXPosition {
                label {X:}
                xywh {185 10 60 25}
              }
              {fltk::ValueInput} uiWindowYPosition {
                label {Y:}
                xywh {265 10 60 25}
              }
            }
            {fltk::Group} {} {open
              xywh {20 106 355 45} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiWindowFixedSize {
                label {Fixed Size}
                tooltip {When this option is on, mrViewer will always open to the size you set in W and H.}
                xywh {30 15 100 20} box UP_BOX
              }
              {fltk::ValueInput} uiWindowXSize {
                label {W:}
                xywh {190 10 60 25} minimum 640 maximum 4096 step 1 value 640
              }
              {fltk::ValueInput} uiWindowYSize {
                label {H:}
                xywh {270 10 60 25} minimum 480 maximum 3680 step 1 value 480
              }
            }
            {fltk::Button} {} {
              label {Take Current Window Values}
              user_data m user_data_type {mrv::ViewerUI*}
              callback {uiWindowXPosition->value( v->uiMain->x() );
uiWindowYPosition->value( v->uiMain->y() );
uiWindowXSize->value( v->uiMain->w() );
uiWindowYSize->value( v->uiMain->h() );}
              xywh {20 176 355 40}
            }
          }
          {fltk::Group} Playback {
            label Playback
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Defaults open
              xywh {44 25 315 200} align 5 box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsAutoPlayback {
                label {Auto Playback}
                tooltip {Start Playback when opening files.}
                xywh {115 20 20 25} align 4 box UP_BOX
              }
              {fltk::Group} {} {open
                xywh {20 55 270 100} box ROUNDED_BOX
              } {
                {fltk::CheckButton} uiPrefsOverrideFPS {
                  label {Override FPS}
                  tooltip {Override playback fps when loading sequences.}
                  xywh {167 5 20 25} align 4 box UP_BOX
                }
                {fltk::Group} {} {open
                  xywh {85 34 182 26}
                } {
                  {fltk::ValueInput} uiPrefsFPS {
                    label Speed
                    xywh {30 1 75 25} color 0x98a8a800 selection_color 0x647f00 minimum 0.001 maximum 120 step 0.01 value 24
                  }
                  {fltk::PopupMenu} {} {
                    label FPS
                    callback {float g = (float) atof( o->child( o->value() )->label() );
uiPrefsFPS->value( g );}
                    xywh {107 1 75 25}
                  } {
                    {fltk::Item} {} {
                      label 60
                      }
                    {fltk::Item} {} {
                      label {59.94}
                      }
                    {fltk::Item} {} {
                      label 50
                      }
                    {fltk::Item} {} {
                      label 30
                      }
                    {fltk::Item} {} {
                      label {29.97}
                      }
                    {fltk::Item} {} {
                      label 25
                      }
                    {fltk::Item} {} {
                      label 24
                      }
                    {fltk::Item} {} {
                      label {14.985}
                      }
                    {fltk::Item} {} {
                      label {12.5}
                      }
                    {fltk::Item} {} {
                      label 12
                      }
                  }
                }
                {fltk::Choice} uiPrefsLoopMode {
                  label {Looping Mode} open
                  tooltip {Select default looping mode in timeline.}
                  xywh {115 65 90 25} box THIN_DOWN_BOX
                } {
                  {fltk::Item} {} {
                    label Stop
                    }
                  {fltk::Item} {} {
                    label Loop
                    }
                  {fltk::Item} {} {
                    label {Ping Pong}
                    }
                }
              }
              {fltk::ValueInput} uiPrefsScrubbingSensitivity {
                label {Scrub Sensitivity}
                tooltip {This setting controls the sensitivity of scrubbing (SHIFT and then the mouse right and left).  Smaller values make the mouse move jump more frames while higher values does the opposite.}
                xywh {230 160 60 25} minimum 2 maximum 50 step 1 value 5
              }
              {fltk::CheckButton} uiPrefsPlayAllFrames {
                label {Play All Frames}
                tooltip {Play All frames without skipping even if frame rate suffers.}
                xywh {267 19 20 25} align 4 box UP_BOX
              }
            }
            {fltk::Group} {} {
              label Timeline open
              xywh {47 250 317 94} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsTimelineDisplay {
                label Display
                tooltip {How to display timeline by default.}
                xywh {100 14 190 25} box THIN_DOWN_BOX
                extra_code {o->value(0);}
              } {
                {fltk::Item} {} {
                  label Frames
                  }
                {fltk::Item} {} {
                  label Seconds
                  }
                {fltk::Item} {} {
                  label Time
                  }
                {fltk::Item} {} {
                  label {Non-Drop Frame Timecode}
                  }
                {fltk::Item} {} {
                  label {Drop Frame Timecode}
                  }
              }
              {fltk::Choice} uiPrefsTimelineSelectionDisplay {
                label Selection open
                tooltip {How to display timeline selection by default.}
                xywh {100 54 190 25} box THIN_DOWN_BOX
                extra_code {o->value(0);}
              } {
                {fltk::Item} {} {
                  label {Hilited in Full Timeline}
                  }
                {fltk::Item} {} {
                  label {Shortened to Timeline}
                  }
              }
            }
          }
          {fltk::Group} {} {
            label {Pixel Toolbar}
            xywh {14 23 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {178 50 190 228} horizontal
            } {
              {fltk::Choice} uiPrefsPixelRGBA {
                label {RGBA Display}
                xywh {0 0 190 25}
              } {
                {fltk::Item} {} {
                  label {Float Values}
                  }
                {fltk::Item} {} {
                  label {Hex Values}
                  }
                {fltk::Item} {} {
                  label {8-bit Values}
                  }
              }
              {fltk::Choice} uiPrefsPixelValues {
                label {Pixel Values}
                xywh {0 68 190 25}
              } {
                {fltk::Item} {} {
                  label {Full Lut and Gamma and Gain}
                  }
                {fltk::Item} {} {
                  label {Lut with Gain but without Gamma}
                  }
                {fltk::Item} {} {
                  label {Original without Gamma, Gain or Lut}
                  }
              }
              {fltk::Choice} uiPrefsPixelHSV {
                label {Secondary Display}
                xywh {0 143 190 25}
              } {
                {fltk::Item} {} {
                  label HSV
                  }
                {fltk::Item} {} {
                  label HSL
                  }
                {fltk::Item} {} {
                  label {CIE XYZ}
                  }
                {fltk::Item} {} {
                  label {CIE xyY}
                  }
                {fltk::Item} {} {
                  label {Lab CIELAB (L*a*b*)}
                  align 172
                }
                {fltk::Item} {} {
                  label {Luv CIELUV (L*u*v*)}
                  align 172
                }
                {fltk::Item} {} {
                  label {YUV (Analog PAL)}
                  align 172
                }
                {fltk::Item} {} {
                  label {YDbDr (Analog SECAM/PAL-N)}
                  align 172
                }
                {fltk::Item} {} {
                  label {YIQ (Analog NTSC)}
                  align 172
                }
                {fltk::Item} {} {
                  label {ITU-601 (Digital PAL/NTSC YCbCr)}
                  align 172
                }
                {fltk::Item} {} {
                  label {ITU-709 (Digital HDTV YCbCr)}
                  align 172
                }
              }
              {fltk::Choice} uiPrefsPixelLumma {
                label Luminance open
                xywh {0 203 190 25}
              } {
                {fltk::Item} {} {
                  label {Y (Luminance)}
                  }
                {fltk::Item} {} {
                  label {Y' (Lumma)}
                  }
                {fltk::Item} {} {
                  label {L (Lightness)}
                  }
              }
            }
          }
          {fltk::Group} {} {
            label Actions
            xywh {14 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label {Default Action} open
              xywh {57 35 317 200} align 5 box ROUNDED_BOX
            } {
              {fltk::RadioButton} uiScrub {
                label { Scrub}
                xywh {31 14 20 25}
              }
              {fltk::RadioButton} uiMovePicture {
                label { Move Picture}
                xywh {31 39 20 25}
              }
              {fltk::RadioButton} uiSelection {
                label { Color Area Selection}
                xywh {31 64 20 25}
              }
              {fltk::RadioButton} uiDraw {
                label { Pencil}
                xywh {31 94 20 25}
              }
              {fltk::RadioButton} uiText {
                label { Text}
                xywh {31 124 20 25}
              }
              {fltk::RadioButton} uiErase {
                label { Eraser}
                xywh {31 154 20 25}
              }
            }
          }
          {fltk::Group} {} {
            label Caches
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::CheckButton} uiPrefsCacheActive {
              label {Cache Active}
              tooltip {Image sequences will be cached in memory.  If this setting is off, images will be loaded on demand but fluid playback may not be possible.}
              xywh {39 30 20 25} align 8 box UP_BOX
            }
            {fltk::CheckButton} uiPrefs8BitCaches {
              label {8 bit Caches}
              tooltip {Image sequences will be cached as 8-bit pictures, instead of being cached as the original depth of the sequence.
This setting thus allows caching more pictures in memory for float and half pictures.}
              xywh {39 69 20 25} align 8 box UP_BOX
            }
            {fltk::CheckButton} uiPrefsPreloadCache {
              label {Preload Cache}
              tooltip {When this option is on and a sequence is loaded, the frames of the cache will begin loading in the background.  Note however, that this may make the GUI less responsive.}
              xywh {239 29 20 25} align 8 box UP_BOX
            }
            {fltk::Choice} uiPrefsCacheScale {
              label Scale
              tooltip {Scale of images stored.  Smaller scale allows more images to be stored at the expense of pixelization.}
              xywh {74 114 120 25} box THIN_DOWN_BOX
            } {
              {fltk::Item} {} {
                label {1:1}
                }
              {fltk::Item} {} {
                label {1:2}
                }
              {fltk::Item} {} {
                label {1:4}
                }
              {fltk::Item} {} {
                label {1:8}
                }
            }
            {fltk::Group} {} {
              label {Cache Size} open
              xywh {39 189 336 45} box ROUNDED_BOX
            } {
              {fltk::ValueSlider} uiPrefsCacheSize {
                tooltip {Size in frames of the video and audio cache.}
                xywh {13 11 261 27} align 1 minimum 30 maximum 200 step 1 value 60
                extra_code {o->activate(false);}
              }
              {fltk::LightButton} uiPrefsCacheFPS {
                label FPS
                user_data uiPrefsCacheSize user_data_type {fltk::ValueSlider*}
                callback {v->activate( !v->active() );}
                tooltip {When selected, cache is set to twice the frames per second of the movie.}
                xywh {271 8 60 30}
              }
            }
            {fltk::Group} {} {
              label {Image Cache Size} open
              xywh {40 271 336 48} box ROUNDED_BOX
            } {
              {fltk::ValueInput} uiPrefsCacheMemory {
                label Memory
                xywh {134 13 75 25} minimum 0.5 maximum 100 step 0.5 value 1
              }
              {fltk::Widget} {} {
                label Gb
                xywh {209 13 45 25}
              }
            }
          }
          {fltk::Group} {} {
            label {3D Luts}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Algorithm
              tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT) and for your rendering transform of your images (RT).  These settings prioritizes choosing one over the other.}
              xywh {40 96 343 95} box ROUNDED_BOX
            } {
              {fltk::Choice} ODT_algorithm {
                label ODT
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {Preferences::LutAlgorithm x = (Preferences::LutAlgorithm) o->value();
uiODT_CTL->activate();
uiODT_ICC->activate();
if ( x == Preferences::kLutOnlyCTL )
    uiODT_ICC->deactivate();
if ( x == Preferences::kLutOnlyICC )
    uiODT_CTL->deactivate();
v->refresh();} open
                tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT).  This setting prioritizes choosing one over the other.
When mixing a CTL ODT script with an ICC profile in an image as rendering transform (RT), it is necessary that the CTL ODT reads data in XYZ_OCES space (ICC v4 relative colorimetric).  Also, note that ICC uses D50 white points while HDTV and CTL use D65 white points.
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).}
                xywh {95 20 195 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {Prefer CTL}
                  }
                {fltk::Item} {} {
                  label {Always CTL}
                  }
                {fltk::Item} {} {
                  label {Prefer ICC}
                  }
                {fltk::Item} {} {
                  label {Always ICC}
                  }
              }
              {fltk::Choice} RT_algorithm {
                label RT
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {Preferences::LutAlgorithm x = (Preferences::LutAlgorithm) o->value();
uiRT_CTL->activate();
uiRT_ICC->activate();
if ( x == Preferences::kLutOnlyCTL )
    uiRT_ICC->deactivate();
if ( x == Preferences::kLutOnlyICC )
    uiRT_CTL->deactivate();
v->refresh();}
                tooltip {mrViewer supports either ICC profiles or a CTL script for the render transform (RT) of your images.  This setting prioritizes choosing one over the other.
When mixing a CTL RT script with an ICC profile for your output device transform (ODT) like your monitor profile, it is necessary that the CTL RT script passes data in XYZ_OCES space (ICC v4 relative colorimetric).
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).
}
                xywh {95 55 195 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {Prefer CTL}
                  }
                {fltk::Item} {} {
                  label {Always CTL}
                  }
                {fltk::Item} {} {
                  label {Prefer ICC}
                  }
                {fltk::Item} {} {
                  label {Always ICC}
                  }
              }
            }
            {fltk::Group} {} {
              label Quality open
              tooltip {mrViewer supports CTL scripts and ICC profiles baked into 3D Luts.  These settings control the quality of the 3D Lut.}
              xywh {44 269 339 76} box ROUNDED_BOX
            } {
              {fltk::Choice} uiLUT_quality {
                label Resolution
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {v->refresh();}
                tooltip {With modern graphics cards, mrViewer emulates color transforms by baking them into a 3D Lut.  This setting controls how accurate the 3D lut is.  The bigger the lut, the longer it takes to calculate but the more accurate it is.
Note that large 3D Luts can use quite a lot of memory.

Size     Memory    Max. Error
32        1/2 Mb     12.5%
64          4 Mb      1.6%
128      32 Mb      0.7%
192      110.5 Mb      0.5%
256       262 Mb      0.2%

It is recommended this setting is left at 64x64x64 or 128x128x128.

}
                xywh {120 14 170 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {No Lut}
                  }
                {fltk::Item} {} {
                  label 32x32x32
                  }
                {fltk::Item} {} {
                  label 64x64x64
                  }
                {fltk::Item} {} {
                  label 96x96x96
                  }
                {fltk::Item} {} {
                  label 128x128x128
                  }
                {fltk::Item} {} {
                  label 192x192x192
                  }
                {fltk::Item} {} {
                  label 256x256x256
                  }
              }
              {fltk::ValueInput} uiPrefsNumStops {
                label {Number of Fstops}
                tooltip {Number of FStops the LUT will cover.  Higher numbers show more detail in the black levels, while it makes the midrange be less defined.}
                xywh {224 45 65 25} minimum 1 maximum 20 step 1 value 10
              }
            }
            {fltk::Group} {} {
              label {Rendering Intent} open
              xywh {43 209 340 45} box ROUNDED_BOX
            } {
              {fltk::Choice} uiICC_intent {
                label ICC
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {v->refresh();}
                tooltip {When using luts with ICC profiles, this setting allows you to select the ICC rendering intent.   Rendering intents are mostly used for printing to film or paper to emulate or proof the output of the output device (ODT), particularly when it does not have the same gamut (color/white range) as the linear RGB/XYZ space.
}
                xywh {120 10 170 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label Perceptual
                  tooltip xxxx
                  }
                {fltk::Item} {} {
                  label {Relative Colorimetric}
                  }
                {fltk::Item} {} {
                  label {Absolute Colorimetric}
                  }
                {fltk::Item} {} {
                  label Saturation
                  }
              }
            }
            {fltk::Group} {} {open
              xywh {29 4 380 75}
            } {
              {fltk::CheckButton} uiPrefsUseOcio {
                label {Use OCIO}
                callback {mrv::Preferences::use_ocio = o->value();}
                tooltip {Use OCIO or revert to CTL/ICC.}
                xywh {5 5 25 25} box UP_BOX
              }
              {fltk::Group} {} {open
                xywh {5 44 375 31}
              } {
                {fltk::Input} uiPrefsOCIOConfig {
                  label {OCIO Config File}
                  tooltip {This is the path to your config.ocio file.  It can be set with the environment variable OCIO, which takes precedence over any saved setting.}
                  xywh {0 0 320 30} align 1
                }
                {fltk::Button} {} {
                  label Pick
                  user_data m user_data_type {mrv::ViewerUI*}
                  callback {mrv::PreferencesUI* uiPrefs = v->uiPrefs;
std::string r = open_ocio_config( uiPrefs->uiPrefsOCIOConfig->text() );
if ( r.empty() ) return;

putenv( "OCIO=" );
unsetenv( "OCIO" );
uiPrefs->uiPrefsOCIOConfig->text( r.c_str() );
uiPrefs->run(v);}
                  tooltip {Pick a config.ocio file from disk.
}
                  xywh {320 0 55 31}
                }
              }
              {fltk::CheckButton} uiPrefsSaveOcio {
                label {Save Ocio Config File}
                tooltip {Save OCIO config in preferences file or leave it empty so that environment variables can be used.}
                xywh {90 5 25 25} box UP_BOX
              }
            }
          }
          {fltk::Group} {} {
            label OCIO
            xywh {13 22 423 355} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} uiOCIO_ICS {
              label {Input Color Space}
              xywh {30 90 375 154} box ROUNDED_BOX
            } {
              {fltk::Group} {} {open
                xywh {78 19 270 45}
              } {
                {fltk::Input} uiOCIO_8bits_ics {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_8bits_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_OCIO_8bits_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_8bits_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_8bits_ics->text(c.c_str());
uiOCIO_8bits_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
              {fltk::Group} {} {open
                xywh {78 49 270 45}
              } {
                {fltk::Input} uiOCIO_16bits_ics {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_16bits_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_OCIO_16bits_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_16bits_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_16bits_ics->text(c.c_str());
uiOCIO_16bits_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
              {fltk::Group} {} {open
                xywh {78 79 270 45}
              } {
                {fltk::Input} uiOCIO_32bits_ics {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_32bits_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_OCIO_32bits_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_32bits_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_32bits_ics->text(c.c_str());
uiOCIO_32bits_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
              {fltk::Group} {} {open
                xywh {78 109 270 45}
              } {
                {fltk::Input} uiOCIO_float_ics {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::ocio_float_ics = o->text();
v->refresh();}
                  tooltip {The name of the OCIO default image color space for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_OCIO_float_ICS)}
                  xywh {8 5 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ocio_browser(uiOCIO_float_ics->text(), OCIOBrowser::kInputColorSpace);
if (c.empty()) return;
uiOCIO_float_ics->text(c.c_str());
uiOCIO_float_ics->do_callback();}
                  xywh {205 5 65 25}
                }
              }
            }
          }
          {fltk::Group} {} {
            label {CTL Paths}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Browser} uiPrefsCTLModulePath {
              label CTL_MODULE_PATH open
              xywh {13 76 380 83}
            } {}
            {fltk::Browser} uiPrefsCTLScripts {
              label {CTL scripts} open
              xywh {13 189 380 156}
            } {}
            {fltk::Button} {} {
              label Pick
              xywh {339 23 55 31}
            }
          }
          {fltk::Group} {} {
            label {Default Output Device Transform (ODT)}
            xywh {13 22 423 354} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Display
              xywh {13 22 370 327} box ROUNDED_BOX
            } {
              {fltk::Group} uiODT_CTL {
                xywh {104 10 255 265} horizontal
              } {
                {fltk::Group} {} {
                  xywh {0 0 255 35}
                } {
                  {fltk::Input} uiODT_CTL_transform {
                    label Transform
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_transform = o->text();
v->refresh();}
                    tooltip {The name of the CTL display transform
(Environment variable: MRV_ODT_CTL_TRANSFORM)}
                    xywh {15 5 185 25} box THIN_DOWN_BOX labelsize 11
                  }
                  {fltk::Button} {} {
                    label Pick
                    callback {std::string c = make_ctl_browser(uiODT_CTL_transform->text(), "ODT");
if (c.empty()) return;
uiODT_CTL_transform->text(c.c_str());
uiODT_CTL_transform->do_callback();}
                    xywh {200 5 55 25}
                  }
                }
                {fltk::Group} {} {
                  label {Chromaticities (CIE)}
                  tooltip {The CIE x,y coordinates of the primaries and white point of the display
(like Rec. ITU-R BT.709-3)

(Environment variable: MRV_ODT_CTL_CHROMATICITIES)}
                  xywh {5 35 250 155} align 132 box ENGRAVED_BOX
                } {
                  {fltk::Widget} {} {
                    label X
                    xywh {100 8 25 25}
                  }
                  {fltk::Widget} {} {
                    label Y
                    xywh {175 8 25 25}
                  }
                  {fltk::Group} {} {
                    label Red
                    xywh {45 23 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_red_x {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.red.x = (float) o->value();}
                      tooltip {The Red CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.64
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_red_y {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.red.y = (float) o->value();}
                      tooltip {The Red CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.33
                    }
                  }
                  {fltk::Group} {} {
                    label Green
                    xywh {45 53 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_green_x {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                      tooltip {The Green CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.3
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_green_y {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                      tooltip {The Green CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.6
                    }
                  }
                  {fltk::Group} {} {
                    label Blue
                    xywh {45 83 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_blue_x {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The Blue CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.15
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_blue_y {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The Blue CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.06
                    }
                  }
                  {fltk::Group} {} {
                    label White
                    xywh {45 113 190 35} align 4 labelsize 11
                  } {
                    {fltk::ValueInput} uiODT_CTL_chromaticities_white_x {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The White CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.3127
                    }
                    {fltk::ValueInput} uiODT_CTL_chromaticities_white_y {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.white.y = (float) o->value();
v->refresh();}
                      tooltip {The White CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.329
                    }
                  }
                }
                {fltk::Group} {} {
                  label {White Luminance}
                  xywh {115 200 130 35} align 132 labelsize 11
                } {
                  {fltk::ValueInput} uiODT_CTL_white_luminance {
                    label {cd/m2}
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_white_luminance = (float) o->value();
v->refresh();}
                    tooltip {The luminance, in cd/m2, of the display.

(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)}
                    xywh {10 5 90 25} align 136 maximum 500 step 0.1 value 120
                  }
                }
                {fltk::Group} {} {
                  label {Surround Luminance}
                  tooltip {
(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)}
                  xywh {125 230 120 35} align 132 labelsize 11
                } {
                  {fltk::ValueInput} uiODT_CTL_surround_luminance {
                    label {cd/m2}
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_surround_luminance = (float) o->value();
v->refresh();}
                    tooltip {The luminance, in cd/m2, of the background that surrounds the display.

(Environment variable:
MRV_ODT_CTL_SURROUND_LUMINANCE)}
                    xywh {0 10 90 25} align 136 maximum 500 step 0.1 value 12
                  }
                }
              }
              {fltk::Group} uiODT_ICC {
                xywh {35 277 312 45}
              } {
                {fltk::Input} uiODT_ICC_profile {
                  label {ICC profile}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::Preferences::ODT_ICC_profile = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for your ODT (monitor)
(Environment variable: MRV_ODT_ICC_PROFILE)}
                  xywh {55 15 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiODT_ICC_profile->text());
uiODT_ICC_profile->text(c);
uiODT_ICC_profile->do_callback();}
                  xywh {245 15 55 25}
                }
              }
            }
          }
          {fltk::Group} {} {
            label {Default Rendering Transform (RT)}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} uiRT_CTL {
              label {Render Transforms}
              xywh {15 24 375 135} box ROUNDED_BOX
            } {
              {fltk::Group} {} {open
                xywh {100 9 255 30}
              } {
                {fltk::Input} uiCTL_8bits_load_transform {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_8bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_CTL_RT_8bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_8bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_8bits_load_transform->text(c.c_str());
uiCTL_8bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {open
                xywh {100 39 255 30}
              } {
                {fltk::Input} uiCTL_16bits_load_transform {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_16bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_CTL_RT_16bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->text(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {open
                xywh {100 69 255 30}
              } {
                {fltk::Input} uiCTL_32bits_load_transform {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_32bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_CTL_RT_32bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->text(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {open
                xywh {100 99 255 30}
              } {
                {fltk::Input} uiCTL_float_load_transform {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_float = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_CTL_RT_float)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_float_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_float_load_transform->text(c.c_str());
uiCTL_float_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
            }
            {fltk::Group} uiRT_ICC {
              label {ICC Profiles}
              xywh {15 204 375 135} box ROUNDED_BOX
            } {
              {fltk::Group} {} {
                xywh {100 10 255 30}
              } {
                {fltk::Input} uiICC_8bits_profile {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_8bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_ICC_RT_8bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_8bits_profile->text());
uiICC_8bits_profile->text(c);
uiICC_8bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {
                xywh {100 40 255 30}
              } {
                {fltk::Input} uiICC_16bits_profile {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_16bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_ICC_RT_16bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_16bits_profile->text());
uiICC_16bits_profile->text(c);
uiICC_16bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {
                xywh {100 70 255 30}
              } {
                {fltk::Input} uiICC_32bits_profile {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_32bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_ICC_RT_32bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_32bits_profile->text());
uiICC_32bits_profile->text(c);
uiICC_32bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              {fltk::Group} {} {
                xywh {100 100 255 30}
              } {
                {fltk::Input} uiICC_float_profile {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_float = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_ICC_RT_float)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                {fltk::Button} {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_float_profile->text());
uiICC_float_profile->text(c);
uiICC_float_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
            }
          }
          {fltk::Group} {} {
            label Loading
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {14 5 400 209} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsLoadLibrary {
                label {JPG/PNG/DPX Load Library}
                tooltip {When loading a sequence, mrViewer will usually use OIIO loaders which give a good compromise between speed and quality.  OIIO loaders allow precaching and gaps in the sequence.  FFMPEG loaders are multithreaded JPG, DPX and PNG and can usually play in real time except when the resolution is too high.  In that case, the loaders will need one pass to cache all images as they don't allow precaching.  The FFMPEG loaders also cannot have gaps in the sequence.  Finally, ImageMagick loaders are not as fast but share the similar features of OIIO.}
                xywh {200 14 165 25} box UP_BOX value 1
              } {
                {fltk::Item} {} {
                  label FFMPEG
                  }
                {fltk::Item} {} {
                  label OIIO
                  }
                {fltk::Item} {} {
                  label ImageMagick
                  }
              }
              {fltk::Choice} uiPrefsMissingFrames {
                label {Missing Frames} open
                tooltip {When loading a sequence, and a frame is not found, mrViewer can either show a black frame or repeat the previous frame.}
                xywh {200 49 165 25} box UP_BOX value 1
              } {
                {fltk::Item} {} {
                  label {Black Frame}
                  }
                {fltk::Item} {} {
                  label {Repeat Frame}
                  }
                {fltk::Item} {} {
                  label {Scratched Repeat Frame}
                  }
              }
              {fltk::CheckButton} uiPrefsLoadSequence {
                label {Load Sequence on Drag&&Drop}
                tooltip {When dragging and dropping a frame from a sequence, make mrViewer load the full sequence.   Otherwise it loads the frame only.}
                xywh {20 80 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsLoadSequenceOnAssoc {
                label {Load Sequence on File Association & CommandLine}
                tooltip {When loading a frame from a sequence from a file association or command-line, make mrViewer load the full sequence.   Otherwise it loads the frame only.}
                xywh {20 113 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsAutoLoadImages {
                label {Auto load images as they change on disk}
                tooltip {When this option is active and an image changes on disk, mrViewer reloads it automatically.}
                xywh {20 146 25 25} align 8 box UP_BOX value 1
              }
              {fltk::CheckButton} uiPrefsUses16Bits {
                label {Read 16 bit movies when possible}
                tooltip {Movie files will be read as 16bit pictures, instead of being loaded and cached as 8 bits.
This setting thus allows caching less pictures in memory but at an improved quality.}
                xywh {20 176 25 25} vertical align 8 box UP_BOX
              }
            }
            {fltk::Group} {} {open
              xywh {19 224 395 115} box ROUNDED_BOX
            } {
              {fltk::Input} uiPrefsImageVersionPrefix {
                label {Versioning Prefix}
                tooltip {Prefix used to detect version numbers.  The default finds images like:
  gizmo_v003.001.exr
(version 3, frame 1).}
                xywh {230 30 94 25}
                extra_code {o->value( "_v" );}
              }
              {fltk::ValueInput} uiPrefsMaxImagesApart {
                label {Max. Images Apart}
                tooltip {Maximum number of images apart that the versions might be on disk.  If you have v1, and this is set to 5, only up to a gap with v6 would be found.  v7 would not get found as the gap would be too big.}
                xywh {275 65 50 25} minimum 1 maximum 100 step 1 value 10
              }
            }
          }
          {fltk::Group} {} {
            label Saving open
            xywh {14 23 424 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Reels open
              xywh {8 22 406 188} box ROUNDED_BOX
            } {
              {fltk::CheckButton} uiPrefsRelativePaths {
                label {Use Relative Paths in Reel Content}
                tooltip {With this option, the content of the reel (the reel images/movies) are saved with relative paths to the location of the reel.}
                xywh {25 81 25 25} box UP_BOX
              }
              {fltk::CheckButton} uiPrefsImagePathReelPath {
                label {Use Image Path to Set Default Reel Saving Path}
                tooltip {With this option on, saving of a reel will default to the path of the first image loaded.}
                xywh {25 36 25 25} box UP_BOX value 1
              }
            }
            {fltk::Group} {} {
              xywh {13 218 400 115} box ROUNDED_BOX
            } {}
          }
          {fltk::Group} {} {
            label Video
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Choice} VideoDriver {
              label Driver
              xywh {78 37 290 25} box THIN_DOWN_BOX
            } {
              {fltk::Item} {} {
                label OpenGL
                }
            }
            {fltk::Group} {} {
              label Loading open
              xywh {48 89 318 90} box ROUNDED_BOX
            } {
              {fltk::ValueInput} uiPrefsVideoThreadCount {
                label {Video Thread Count}
                tooltip {This setting effects the number of threads used in decoding your video.  A value of 0 means to use as many threads as possible.  Note that currently this setting is in beta, as some movies decode with artifacts when setting is 3 or higher (0 too).}
                xywh {236 10 55 25} maximum 64 step 1
              }
              {fltk::Choice} uiPrefsYUVConversion {
                label {YUV Conversion}
                user_data uiMain user_data_type {ViewerUI*}
                callback {int idx = o->value();

switch(idx)
{
case 0:
idx = 0; break;
case 1:
idx = 1; break;
case 2:
idx = 2; break;
case 3:
idx = 5; break;
case 4:
default:
idx = 11; break;
}
CMedia::colorspace_override = idx;}
                tooltip {Controls the YUV Conversion of the movie in the shader to emulate different tv standards.
Use File YUV Hint will take the value from the movie being loaded if the data is present.
BT709 is a Rec.709 emulation (HDTV) and has black levels in the 16 range of 255.
Unspecified is your standard computer translation of YUV.
BT470BG/SMPTE170M emulate ITU-R BT 601-6 625 (PAL/SECAM).  JPEG is as used in JPEG images and has a range of 0 to 255.}
                xywh {130 45 167 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label {Use File YUV Hint}
                  }
                {fltk::Item} {} {
                  label {Always use BT709}
                  }
                {fltk::Item} {} {
                  label {Always use Unspecified}
                  }
                {fltk::Item} {} {
                  label {Always use BT470BG / SMPTE170M}
                  }
                {fltk::Item} {} {
                  label {Always use JPEG}
                  }
              }
            }
            {fltk::Group} {} {
              label Saving open
              xywh {48 219 318 65} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsVideoCodec {
                label {Video Codec}
                user_data uiMain user_data_type {ViewerUI*}
                tooltip {Controls the codec used by default in saving a movie file.}
                xywh {135 17 167 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label hevc
                  }
                {fltk::Item} {} {
                  label h264
                  }
                {fltk::Item} {} {
                  label mpeg4
                  }
                {fltk::Item} {} {
                  label prores_ks
                  }
              }
            }
          }
          {fltk::Group} {} {
            label Compositing
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {58 172 320 65} box ROUNDED_BOX
            } {
              {fltk::Choice} uiPrefsBlendMode {
                label {Blend Mode}
                user_data m user_data_type {ViewerUI*}
                callback {v->uiView->redraw();} open
                tooltip {OpenGL blend compositing mode.
Traditional:
SC x SA + DC x ( 1 - SA)
Premult:
SC + DC x ( 1 - SA )
where SC is source color, SA is source alpha, and DC is destination color.}
                xywh {142 20 167 25} box THIN_DOWN_BOX
              } {
                {fltk::Item} {} {
                  label Traditional
                  }
                {fltk::Item} {} {
                  label Premult
                  }
                {fltk::Item} {} {
                  label {Traditional No Gamma}
                  }
                {fltk::Item} {} {
                  label {Premult No Gamma}
                  }
              }
            }
            {fltk::Group} {} {open
              xywh {57 97 321 65} box ROUNDED_BOX
            } {
              {fltk::LightButton} uiPrefsResizeBackground {
                label {Resize Background to Match Foreground}
                xywh {25 20 275 30}
              }
            }
          }
          {fltk::Group} {} {
            label Audio
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Choice} uiPrefsAudioDevice {
              label Device
              callback {unsigned idx = o->value();
mrv::AudioEngine::device( idx );}
              xywh {99 22 275 25} box THIN_DOWN_BOX
              extra_code {//
// Initialize an audio engine to get devices
//
mrv::AudioEngine* engine = mrv::AudioEngine::factory();
delete engine;

const mrv::AudioEngine::DeviceList& devices = mrv::AudioEngine::devices();
mrv::AudioEngine::DeviceList::const_iterator i = devices.begin();
mrv::AudioEngine::DeviceList::const_iterator e = devices.end();
for ( ; i != e; ++i )
   {
      o->add( (*i).description.c_str() );
   }}
            } {}
            {fltk::Group} {} {open
              xywh {64 189 300 60} box ROUND_DOWN_BOX
            } {
              {fltk::Slider} uiPrefsAudioVolume {
                label {Default Volume}
                tooltip {Default audio at opening mrViewer.}
                xywh {79 20 161 25} type TICK_ABOVE align 1 step 0.01 value 1
              }
              {fltk::Button} uiPrefsAudioMute {
                label Mute
                user_data uiPrefsAudioVolume user_data_type {fltk::Slider*}
                callback {o->value( !o->value() );
if ( o->value() )
   v->deactivate();
else
   v->activate();}
                xywh {40 20 40 25}
              }
            }
            {fltk::LightButton} uiPrefsOverrideAudio {
              label {Override Audio}
              xywh {149 144 135 35}
            }
          }
          {fltk::Group} {} {
            label Subtitles
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Choice} uiPrefsSubtitleFont {
              label Font
              user_data m user_data_type {ViewerUI*}
              callback {int idx = o->value();
const char* font = o->child(idx)->label();
mrv::media m = v->uiView->foreground();
if (!m) return;
CMedia* img = m->image();
aviImage* avi = dynamic_cast< aviImage* >( img );
if (!avi) return;
avi->subtitle_font( font );
CMedia::default_subtitle_font( font );
v->uiView->redraw();}
              xywh {114 37 275 31} box THIN_DOWN_BOX
              extra_code {fltk::Font** fonts; // list returned by fltk
int numfonts = fltk::list_fonts(fonts);
for (int i = 0; i < numfonts; i++)
{
       o->add(fonts[i]->name());
       if ( strcmp( fonts[i]->name(), "Arial" ) == 0 )
	   o->value(i);
}}
            } {}
            {fltk::Choice} uiPrefsSubtitleEncodingChoices {
              user_data m user_data_type {ViewerUI*}
              callback {int i = o->value();
uiPrefsSubtitleEncoding->text( o->child(i)->label() );
uiPrefsSubtitleEncoding->do_callback();} open
              xywh {239 88 150 31} box THIN_DOWN_BOX
            } {
              {fltk::Item} {} {
                label {ISO-8859-1}
                }
              {fltk::Item} {} {
                label {ISO-8859-2}
                }
              {fltk::Item} {} {
                label {UTF-8}
                }
              {fltk::Item} {} {
                label {UTF-16}
                }
            }
            {fltk::Input} uiPrefsSubtitleEncoding {
              label Encoding
              user_data m user_data_type {mrv::ViewerUI*}
              callback {const char* enc = o->text();
mrv::media m = v->uiView->foreground();
if (!m) return;
CMedia* img = m->image();
aviImage* avi = dynamic_cast< aviImage* >( img );
if (!avi) return;
avi->subtitle_encoding( enc );
CMedia::default_subtitle_encoding( enc );
v->uiView->redraw();}
              xywh {114 89 120 30}
            }
          }
          {fltk::Group} {} {
            label Errors
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {open
              xywh {43 32 355 227} box ENGRAVED_BOX
            } {
              {fltk::Choice} uiPrefsRaiseLogWindowOnError {
                label {Raise Log Window on Error} open
                xywh {240 25 110 25}
              } {
                {fltk::Item} {} {
                  label Never
                  }
                {fltk::Item} {} {
                  label Once
                  }
                {fltk::Item} {} {
                  label Always
                  }
              }
            }
          }
          {fltk::Group} {} {
            label Images
            tooltip {Options controlling the OpenEXR reader/writer}
            xywh {13 22 423 350} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            {fltk::Group} {} {
              label Saving open
              xywh {54 78 330 130} box ROUNDED_BOX labelsize 15
            } {
              {fltk::LightButton} uiPrefsACESClipMetadata {
                label {ACES Clip Metadata}
                tooltip {Whether to save ACES clip metadata in a sidecar.}
                xywh {60 20 210 30}
              }
              {fltk::LightButton} uiPrefsAllLayers {
                label {All Layers}
                tooltip {Whether to save all layers in image file if there are several.}
                xywh {60 70 210 30}
              }
            }
=======
        Fl_Group {} {
          xywh {24 30 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Format
            xywh {34 40 75 25} box FLAT_BOX
>>>>>>> v5.0.1-RC4
          }
          Fl_Menu_Button uiSaveFormat {
            label {Name (.ext)}
            xywh {104 40 180 25}
          } {
            MenuItem {} {
              label {ILM OpenEXR (.exr)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {JPEG (.jpg)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Microsoft Bitmap (.bmp)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {TIFF (.tif)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Targa (.tga)}
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {24 85 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Compression
            xywh {49 95 90 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveCompression {
            label None
            xywh {139 95 95 25}
          } {}
        }
        Fl_Group {} {
          xywh {24 140 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label {Render Intent}
            xywh {29 150 110 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveRenderIntent {
            label Relative
            xywh {139 150 95 25}
          } {
            MenuItem {} {
              label Saturation
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Perceptual
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Absolute
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Relative
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {24 195 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Channels
            xywh {39 205 100 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveChannels {
            label {All Possible}
            xywh {139 205 95 25}
          } {
            MenuItem {} {
              label {All Possible}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label RGBA
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label RGB
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Alpha Only}
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {24 250 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Frames
            xywh {39 260 100 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveFrames {
            label Current
            xywh {139 260 95 25}
          } {
            MenuItem {} {
              label All
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Timeline
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Current
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {144 335 150 25}
        } {
          Fl_Return_Button {} {
            label Save
            xywh {224 335 70 25}
          }
          Fl_Button {} {
            label Cancel
            xywh {144 335 70 25}
          }
        }
      }
    }
  }
  Function {SaveOptionsUI(ViewerUI* m)} {} {
    code {make_window( m );} {}
  }
  Function {~SaveOptionsUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class LogUI {} {
  Function {make_window(ViewerUI* main)} {open
  } {
    Fl_Window uiMain {
      label {Log Messages} open
      xywh {487 205 635 250} type Double hide resizable
      code0 {//o->child_of( main->uiMain );} non_modal
    } {
      Fl_Group {} {open
        xywh {5 5 630 240} resizable
      } {
        Fl_Text_Display uiLogText {
          xywh {5 5 625 200} resizable
          class {mrv::LogDisplay}
        }
        Fl_Group {} {open
          xywh {455 205 175 40}
        } {
          Fl_Button {} {
            label Save
            user_data uiLogText user_data_type {mrv::LogDisplay*}
            callback {v->save();}
            xywh {545 210 75 30}
          }
          Fl_Button {} {
            label Clear
            user_data uiLogText user_data_type {mrv::LogDisplay*}
            callback {v->clear();}
            xywh {465 210 75 30}
          }
        }
      }
    }
  }
  Function {LogUI(ViewerUI* m)} {open
  } {
    code {make_window( m );} {}
  }
  Function {~LogUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class PaintUI {open
} {
  Function {make_window( ViewerUI* m )} {open
  } {
    Fl_Window uiMain {
      label Paint open
      xywh {733 95 165 505} type Double resizable non_modal visible
    } {
      Fl_Group {} {open
        xywh {0 0 165 505} box PLASTIC_UP_BOX
      } {
        Fl_Group {} {open
          xywh {33 15 92 115}
        } {
          Fl_Button uiScrub {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->scrub_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);
uiMovePic->value(0);}
            tooltip {Area Select Tool} xywh {35 15 43 35} value 1
            code0 {o->value(1);
o->image( scrub );}
          }
          Fl_Button uiSelection {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->selection_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);}
            tooltip {Area Select Tool} xywh {34 54 43 35} value 1
            code0 {o->value(1);
o->image( select_pic );}
          }
          Fl_Button uiDraw {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->draw_mode();
o->value(1);
uiSelection->value(0);
uiErase->value(0);
uiText->value(0);}
            tooltip {Freehand Drawing Tool} xywh {82 54 40 35}
            code0 {o->image( draw );}
          }
          Fl_Button uiErase {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->erase_mode();
o->value(1);
uiSelection->value(0);
uiDraw->value(0);
uiText->value(0);}
            tooltip {Eraser Tool} xywh {82 95 40 35}
            code0 {o->image( erase );}
          }
          Fl_Button uiText {
            label T
            user_data m user_data_type {ViewerUI*}
            callback {o->value(1);
v->uiView->text_mode();}
            tooltip {Text Tool} xywh {33 94 45 35} labelfont 8 labelsize 24 align 32
          }
          Fl_Button uiMovePic {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->move_pic_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);
uiScrub->value(0);}
            tooltip {Area Select Tool} xywh {82 15 40 35} value 1
            code0 {o->image( move_pic );}
          }
        }
        Fl_Value_Slider uiPenSize {
          label {Pen Size}
          tooltip {Selects the size of brush.} xywh {37 155 85 25} type Horizontal align 1 minimum 1 maximum 10 step 1 value 5
          code0 {o->labelcolor( FL_BLACK );}
        }
        Fl_Group {} {
          xywh {40 415 84 70}
        } {
          Fl_Button uiUndoDraw {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->undo_draw();

if ( !v->uiView->has_undo() )
 o->deactivate();}
            tooltip {Undo Last Shape Drawn} xywh {40 425 34 35}
            code0 {o->image( undo );
if ( !m->uiView->has_undo() )
 o->deactivate();
else
 o->activate();}
          }
          Fl_Button uiRedoDraw {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->redo_draw();
if ( !v->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
            tooltip {Redo Previous Shape Drawn} xywh {80 425 34 35}
            code0 {o->image( redo );
if ( !m->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
          }
        }
        Fl_Button uiPenColor {
          label {Pen Color}
          callback {uchar r, g, b; Fl_Color c = o->color();
Fl::get_color(c,r,g,b);
if (!fl_color_chooser("Pick Draw Color", r,g,b,3)) return;
Fl::set_color(c,r,g,b);
if ( r == 0 && g == 0 && b == 0 )
   o->color( FL_BLACK );
else
   o->color( c );
o->redraw();}
          tooltip {Selects the current pen color.} xywh {92 195 25 25} box EMBOSSED_BOX color 111 labelsize 11 align 4
          code0 {o->labelcolor( FL_BLACK );}
        }
        Fl_Group {} {
          label Frames open
          xywh {20 245 120 55} box UP_BOX
          code0 {o->labelcolor( FL_BLACK );}
        } {
          Fl_Round_Button uiCurrentFrame {
            label Current user_data_type {void*}
            xywh {40 250 80 25} type Radio down_box ROUND_DOWN_BOX value 1 labelcolor 8
            code0 {o->value(1);}
            code1 {o->labelcolor( FL_BLACK );}
          }
          Fl_Round_Button uiAllFrames {
            label All user_data_type {void*}
            xywh {40 270 80 20} type Radio down_box ROUND_DOWN_BOX
            code0 {o->value(0);}
            code1 {o->labelcolor( FL_BLACK );}
          }
        }
        Fl_Group {} {
          label Ghosting open
          xywh {20 330 120 85} box UP_BOX
          code0 {o->labelcolor( FL_BLACK );}
        } {
          Fl_Counter {} {
            label Previous
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->ghost_previous( o->value() );
v->uiView->redraw();}
            xywh {35 349 95 22} labelcolor 8 align 1 minimum 1 maximum 100 step 1 value 5
            code0 {o->labelcolor( FL_BLACK );}
          }
          Fl_Counter {} {
            label Next
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->ghost_next( o->value() );
v->uiView->redraw();}
            xywh {35 389 95 21} labelcolor 8 align 1 minimum 1 maximum 100 step 1 value 5
            code0 {o->labelcolor( FL_BLACK );}
          }
        }
      }
    }
  }
  Function {PaintUI(ViewerUI* m)} {open
  } {
    code {make_window( m );} {}
  }
  Function {~PaintUI()} {open
  } {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class ConnectionUI {open
} {
  Function {make_window(ViewerUI* main)} {open private
  } {
    Fl_Window uiMain {
      label Connections open
      xywh {630 357 450 400} type Double hide resizable
      code0 {// Make the window transient
//o->child_of( main->uiMain );} non_modal
    } {
      Fl_Group {} {open
        xywh {0 5 445 390}
      } {
        Fl_Group uiServerGroup {
          label Server open
          xywh {15 15 400 75} box ROUNDED_BOX align 5
        } {
          Fl_Value_Input uiServerPort {
            label Port
            xywh {130 40 70 25} step 1 value 4333
          }
          Fl_Button uiCreate {
            label Create
            user_data main user_data_type {ViewerUI*}
            callback {if ( strcmp( o->label(), _("Create") ) == 0 )
    mrv::server::create(v);
else
    mrv::server::remove(v);}
            xywh {210 40 100 25}
          }
        }
        Fl_Group uiClientGroup {
          label Client open
          xywh {15 110 400 70} box ROUNDED_BOX align 5
        } {
          Fl_Input uiClientServer {
            label Server
            xywh {80 128 115 30}
            code0 {o->value("localhost");}
          }
          Fl_Value_Input uiClientPort {
            label Port
            xywh {250 130 70 25} step 1 value 4333
          }
          Fl_Button uiConnect {
            label Connect
            user_data main user_data_type {ViewerUI*}
            callback {if ( strcmp( o->label(), _("Connect") ) == 0 )
   mrv::client::create(v);
else
   mrv::client::remove(v);}
            xywh {325 130 85 25}
          }
        }
        Fl_Group {} {open
          xywh {15 190 400 200} box ROUNDED_BOX
        } {
          Fl_Text_Display uiLog {
            xywh {30 195 375 190} box FLAT_BOX
            class {mrv::LogDisplay}
          }
        }
      }
    }
  }
  Function {ConnectionUI(ViewerUI* m)} {} {
    code {make_window( m );} {}
  }
  Function {~ConnectionUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class ViewerUI {open
} {
  decl {static PreferencesUI* uiPrefs;} {public local
  }
  decl {static LogUI* uiLog;} {public local
  }
  decl {static AboutUI* uiAbout;} {public local
  }
  decl {static ICCProfileListUI* uiICCProfiles;} {public local
  }
  decl {static HotkeyUI* uiHotkey;} {public local
  }
  decl {static ConnectionUI* uiConnection;} {public local
  }
  decl {ReelUI* uiReelWindow;} {public local
  }
  decl {ImageInfoUI* uiImageInfo;} {public local
  }
  decl {GL3dViewUI* uiGL3dView;} {public local
  }
  decl {ColorAreaUI* uiColorArea;} {public local
  }
  decl {HistogramUI* uiHistogram;} {public local
  }
  decl {VectorscopeUI* uiVectorscope;} {public local
  }
  decl {WaveformUI* uiWaveform;} {public local
  }
  decl {PaintUI* uiPaint;} {public local
  }
  decl {SopNode* uiSOPNode;} {public local
  }
  decl {EDLWindowUI* uiEDLWindow;} {public local
  }
  decl {StereoUI* uiStereo;} {public local
  }
  Function {make_window()} {open private
  } {
    code {uiPrefs = new PreferencesUI(this);} {}
    Fl_Window uiMain {
      label mrViewer
      user_data this user_data_type {ViewerUI*}
      callback {delete v;} open
      xywh {1130 70 640 535} type Double align 80 resizable
      code0 {o->size_range(640, 550);
o->main( this );}
      class {mrv::MainWindow} visible
    } {
      Fl_Pack uiRegion {open
        xywh {0 0 640 535}
      } {
        Fl_Group uiTopBar {open
          xywh {0 0 640 28} box ENGRAVED_BOX
        } {
          Fl_Menu_Button uiWindows {
            label W
            tooltip {Opens different windows} xywh {2 2 25 22}
            code0 {o->disable_glyph();}
            class {mrv::PopupMenu}
          } {
            MenuItem {} {
              label Reels user_data_type {void*}
              callback {uiReelWindow->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Media Info} user_data_type {void*}
              callback {uiImageInfo->uiMain->show();
uiView->update_image_info();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Color Info} user_data_type {void*}
              callback {uiColorArea->uiMain->show();
uiView->update_color_info();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {EDL Edit} user_data_type {void*}
              callback {uiEDLWindow->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Action Tools} user_data_type {void*}
              callback {uiPaint->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Stereo 3D Options} user_data_type {void*}
              callback {uiStereo->uiMain->show();}
              xywh {10 10 100 20}
            }
            MenuItem {} {
              label 3dView user_data_type {void*}
              callback {uiGL3dView->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Histogram user_data_type {void*}
              callback {uiHistogram->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Vectorscope user_data_type {void*}
              callback {uiVectorscope->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Waveform user_data_type {void*}
              callback {uiWaveform->uiMain->show();}
              xywh {10 10 100 20}
            }
            MenuItem {} {
              label {ICC Profiles} user_data_type {void*}
              callback {uiICCProfiles->fill();
uiICCProfiles->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Connections user_data_type {void*}
              callback {uiConnection->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Preferences user_data_type {void*}
              callback {uiPrefs->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Hotkeys user_data_type {void*}
              callback {uiHotkey->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Logs user_data_type {void*}
              callback {uiLog->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label About user_data_type {void*}
              callback {uiAbout->uiMain->show();}
              xywh {0 0 100 20}
            }
          }
          Fl_Group {} {open
            xywh {30 2 90 23} color 1397969664
          } {
            Fl_Menu_Button uiColorChannel {
              label {(no image)}
              user_data this user_data_type {ViewerUI*}
              callback {Fl_Menu_Item* m = (Fl_Menu_Item*)v->uiColorChannel->mvalue();
	      v->uiView->channel( m );
	      //v->uiView->channel( o->value() );} open
              tooltip {Allows you to select different image channels or layers.} xywh {30 2 90 22}
              class {mrv::PopupMenu}
            } {}
          }
          Fl_Group {} {open
            xywh {120 1 286 24} color 1397969664
          } {
            Fl_Box {} {
              label Gain
              xywh {120 2 33 22} labelsize 12 align 120
            }
            Fl_Value_Input uiGainInput {
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->gain( (float) o->value() );
v->uiGain->value( (float) o->value() );}
              tooltip {Gain image value.  A simple multiplier of the image pixel values.} xywh {155 2 35 22} color -1733777408 selection_color 0 minimum 0.01 maximum 64 step 0.01 value 1
              code0 {o->textsize( 12 );}
              code1 {o->textcolor( FL_BLACK );}
            }
            Fl_Slider uiGain {
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->gain( (float) o->value() );
v->uiGainInput->value( (float) o->value() );}
              tooltip {Allows you to adjust the gain or exposure of the image.} xywh {190 2 70 22} type {Horz Knob} minimum 0.02 maximum 64 step 1 value 1
              code0 {o->slider_type( mrv::Slider::kLOG );}
              class {mrv::Slider}
            }
            Fl_Menu_Button uiICS {
              label {Input Color Space}
              user_data this user_data_type {ViewerUI*}
              callback {mrv::media fg = v->uiView->foreground();
if (!fg) return;

mrv::CMedia* img = fg->image();

int i = o->value();
if ( i < 0 || i >= o->children() ) return;

std::string c = o->child( i )->label();
o->copy_label( c.c_str() );
img->ocio_input_color_space( c );
char buf[256];
sprintf( buf, "ICS \\"%s\\"", c.c_str() );
v->uiView->send_network( buf );
v->uiView->use_lut(true);
v->uiLUT->value(true);} open
              tooltip {OCIO input color space for the image} xywh {260 2 146 22} labelsize 12 align 96
              class {mrv::PopupMenu}
            } {}
            Fl_Group uiFstopGroup {open
              xywh {260 2 146 22}
            } {
              Fl_Group {} {open
                xywh {265 2 95 22}
              } {
                Fl_Button {} {
                  label {@<}
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->exposure_change(-0.5f);}
                  tooltip {Decrease exposure by 0.5.} xywh {265 5 16 19}
                }
                Fl_Button uiFstop {
                  label {+0.0  f/8.0}
                  user_data this user_data_type {ViewerUI*}
                  callback {static float old_gain = 1.0f;
float gain = v->uiView->gain();
if ( gain == 1.0f )
{
v->uiView->gain( old_gain );
v->uiGainInput->value( old_gain );
v->uiGain->value( old_gain );
}
else
{
old_gain = gain;
v->uiView->gain( 1.0f );
v->uiGain->value( 1.0f );
v->uiGainInput->value( 1.0f );
}}
                  tooltip {Displays gain as film exposure and fstop.
Click to toggle between current and normal exposure.} xywh {280 5 64 19} labelfont 1
                  code0 {o->labelsize( 12 );}
                }
                Fl_Button {} {
                  label {@>}
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->exposure_change(0.5f);}
                  tooltip {Increase exposure by 0.5.} xywh {344 5 16 19}
                }
              }
              Fl_Button uiNormalize {
                label Norm
                user_data this user_data_type {ViewerUI*}
                callback {v->uiView->toggle_normalize();}
                tooltip {Normalize pixel values to remain in [0,1] range.} xywh {360 2 40 22} align 64
              }
            }
          }
          Fl_Group {} {open
            xywh {405 2 155 23} color 1397969664
          } {
            Fl_Group {} {open
              xywh {405 2 155 23}
            } {
              Fl_Group {} {open
                xywh {405 2 155 23}
              } {
                Fl_Menu_Button gammaDefaults {
                  label Gamma
                  user_data this user_data_type {ViewerUI*}
                  callback {float g = (float) atof( o->child( o->value() )->label() );
if ( !mrv::is_equal( g, 0.0f ) )
{
   v->uiGamma->value(g);
   v->uiGammaInput->value( g );
   v->uiView->gamma(g);
   v->uiView->use_lut(false);
   v->uiLUT->value(false);
   o->copy_label( _("Gamma") );
}
else
{
    int idx = o->value();
    const Fl_Menu_Item* w = gammaDefaults->mvalue();
    const char* lbl = w->label();
    const Fl_Menu_Item* parent = o->child( o->value() );
    const Fl_Menu_Item* p = o->child(0);
    const Fl_Menu_Item* c = p;
    for ( ; c->label(); ++c )
    {
	if ( c->flags & FL_SUBMENU ) p = c;
	if ( c == w ) break;
    }
    if ( strcmp( lbl, p->label() ) == 0 )
       return;
    if ( p && p->label() )
       mrv::Preferences::OCIO_Display = p->label();
    if ( lbl && p->label() && strcmp(lbl, p->label()) != 0 )
    {
       v->uiGamma->value( 1.0f );
	v->uiGammaInput->value( 1.0f );
	v->uiView->gamma( 1.0f );

	mrv::Preferences::OCIO_View = lbl;

	v->uiView->use_lut(true);
	v->uiLUT->value(true);
	mrv::media fg = v->uiView->foreground();
	if ( !fg ) return;
	fg->image()->image_damage( mrv::CMedia::kDamageAll );
	v->uiView->redraw();
    }
    }}
                  tooltip {Some default gamma settings.} xywh {405 3 50 21} labelsize 12
                  class {mrv::PopupMenu}
                } {
                  MenuItem {} {
                    label {2.2}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {1.8}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {1.00}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {0.55}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {0.45}
                    xywh {0 0 100 20}
                  }
                }
                Fl_Value_Input uiGammaInput {
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->gamma( (float) o->value() );
v->uiGamma->value( (float) o->value() );}
                  tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );} xywh {455 2 35 22} color -1733777408 selection_color 0 minimum 0.015625 maximum 64 step 0.01 value 1
                  code0 {o->textsize(12);}
                  code1 {o->textcolor( FL_BLACK );}
                }
                Fl_Slider uiGamma {
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->gamma( (float) o->value() );
v->uiGammaInput->value( (float) o->value() );}
                  tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );} xywh {490 2 60 22} type {Horz Knob} minimum 0.25 maximum 4 step 0.01 value 0.25
                }
              }
            }
          }
          Fl_Group {} {open
            xywh {550 3 80 22}
          } {
            Fl_Menu_Button uiField {
              label F
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->field( (mrv::ImageView::FieldDisplay) o->value() );}
              tooltip {Changes frame/field display} xywh {550 3 25 22}
              code0 {o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label Frame
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Top Field}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Bottom Field}
                xywh {0 0 100 20}
              }
            }
            Fl_Button uiPixelRatio {
              label {1:1}
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->toggle_pixel_ratio();}
              tooltip {Stretch image to compensate for image's pixel ratio.} xywh {570 3 30 22} down_box PLASTIC_ROUND_DOWN_BOX shortcut 0x40070 selection_color 95
            }
            Fl_Button uiLUT {
              label LUT
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->toggle_lut();}
              tooltip {Activate viewer's 3D Lut.} xywh {600 3 30 22} down_box PLASTIC_ROUND_DOWN_BOX shortcut 0x74 selection_color 95
            }
          }
        }
        Fl_Group uiViewGroup {open
          xywh {0 28 640 430} resizable
          class Fl_Group
        } {
          Fl_Group uiView {
            xywh {0 28 640 430}
            code0 {o->main(this);}
            class {mrv::ImageView}
          } {}
        }
        Fl_Group uiPixelBar {open
          xywh {0 458 640 28} box FLAT_BOX color 56 labelcolor 17
        } {
          Fl_Group {} {open
            xywh {2 458 634 25}
          } {
            Fl_Menu_Button uiZoom {
              label x1
              user_data this user_data_type {ViewerUI*}
              callback {int t = o->value();
float f;
if ( t < 8 )
{
f = 1 / (float) (9-t);
}
else if ( t == 17 )
{
v->uiView->fit_image();
return;
}
else
{
f = float(t - 7);
}
v->uiView->zoom( f );
o->value(8);}
              tooltip {Image zoom setting.} xywh {5 461 26 20} color 1397969664 labelsize 10 labelcolor 26 textsize 10
              code0 {o->value(10); o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label {1/9}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/8}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/7}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/6}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/5}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/4}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/3}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/2}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x1
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x2
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x3
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x4
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x5
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x6
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x7
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x8
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x9
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label FIT
                xywh {0 0 100 20}
              }
            }
            Fl_Group {} {open
              xywh {31 458 605 25}
            } {
              Fl_Output uiCoord {
                label XY
                tooltip {Image coordinate of pixel under mouse.} xywh {50 461 66 20} box FLAT_BOX color 56 labelfont 4 labelsize 10 labelcolor 17 textsize 10 textcolor 7
              }
              Fl_Group {} {open
                xywh {116 458 520 25}
              } {
                Fl_Group {} {open
                  xywh {116 458 520 25}
                } {
                  Fl_Group {} {open
                    xywh {116 461 230 22}
                  } {
                    Fl_Menu_Button uiAColorType {
                      label RGBA
                      user_data uiView user_data_type {mrv::ImageView*}
                      callback {int i = o->value();
if ( i < 0 ) return;
o->label( o->text(i) );} open
                      tooltip {Switch RGBA display between floating point, hexadecimal (0..0xff) and decimal (0..255).} xywh {116 461 30 20} labelsize 9 align 48
                      code0 {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label RGBA
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label Hex
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 8bit
                        xywh {0 0 100 20}
                      }
                    }
                    Fl_Output uiPixelR {
                      tooltip {Red value of image pixel under mouse.} xywh {146 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 1
                    }
                    Fl_Output uiPixelG {
                      tooltip {Green value of image pixel under mouse.} xywh {196 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 2
                    }
                    Fl_Output uiPixelB {
                      tooltip {Blue value of image pixel under mouse.} xywh {246 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 4
                    }
                    Fl_Output uiPixelA {
                      tooltip {Alpha value of image pixel under mouse.} xywh {296 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 7
                    }
                  }
                  Fl_Output uiPixelView {
                    tooltip {8-bit sample of image pixel under mouse.} xywh {369 460 20 20} box FLAT_BOX color 1397969664
                  }
                  Fl_Group {} {
                    xywh {390 461 174 22}
                  } {
                    Fl_Menu_Button uiBColorType {
                      label HSV
                      user_data uiView user_data_type {mrv::ImageView*}
                      callback {int i = o->value();
if ( i < 0 ) return;
o->label( mrv::color::space2id( (mrv::color::Space) (i+1)) );
v->update_color_info();}
                      tooltip {Switch pixel color space information display for the pixel under the cursor.} xywh {391 461 23 20} labelsize 9 align 48
                      code0 {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label HSV
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label HSL
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {XYZ CIE XYZ}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {xyY CIE xyY}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {Lab CIELAB (L*a*b*)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {Luv CIELUV (L*u*v*)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {YUV (Analog PAL)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {YDbDr (Analog SECAM/PAL-N)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {YIQ (Analog NTSC)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {ITU-601 (Digital PAL/NTSC YCbCr)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {ITU-709 (Digital HDTV YCbCr)}
                        xywh {0 0 100 20}
                      }
                    }
                    Fl_Output uiPixelH {
                      tooltip {Hue value of image pixel under mouse.} xywh {414 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 3
                    }
                    Fl_Output uiPixelS {
                      tooltip {Saturation value of image pixel under mouse.} xywh {464 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 3
                    }
                    Fl_Output uiPixelV {
                      tooltip {Value (Intensity) of image pixel under mouse.} xywh {514 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 3
                    }
                  }
                  Fl_Menu_Button uiPixelValue {
                    label F
                    user_data uiView user_data_type {mrv::ImageView*}
                    callback {int i = o->value();
if ( i < 0 ) return;
char t[2];
t[1] = 0;
t[0] = o->text(i)[0];
o->copy_label( t );
v->update_color_info();}
                    tooltip {Type of pixel values to show:
+ Full:  pixel with gamma, gain and lut.
+ Gamma: pixel with gamma and gain but no lut.
+ Original: pixel without gamma, gain or lut.} xywh {350 461 18 20} align 48
                    code0 {o->value(0);
o->disable_glyph();}
                    class {mrv::PopupMenu}
                  } {
                    MenuItem {} {
                      label Full
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Gamma
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Original
                      xywh {0 0 100 20}
                    }
                  }
                  Fl_Group {} {open
                    xywh {567 461 65 22}
                  } {
                    Fl_Menu_Button uiLType {
                      label Y
                      callback {int x = o->value();
const char* lbl = o->text(x);
const char name[3] = { lbl[0], lbl[1], 0 };
o->copy_label( name );}
                      tooltip {Switch brightness calculation.

Y (Luminance) is the pixel value according to Rec709:
      Y = 0.2126 R + 0.7152 G + 0.0722 B

Y' (Lumma) is the weighted pixel value according to:
      Y' = ( R + G + B ) / 3.0

L (Lightness) is the human perception of luminance of the image which is non linear.
According to CIE No.15.2:
      L = (116 * Y ^ 1/3 - 16) / 100
A pixel of Y = 0.18 (L = 0.5) will appear about half as bright as Y = L = 1.0 (white).} xywh {567 461 16 20} align 48
                      code0 {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label {Y (Luminance)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {Y' (Lumma)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {L (Lightness)}
                        tooltip {Lightness is the human perceptual response to luminance Y, according to CIE No.15.2:

      L = 116 * (Y/Yn)^1/3 - 16

where Yn is the white reference (usually 1).} xywh {0 0 100 20}
                      }
                    }
                    Fl_Output uiPixelL {
                      tooltip {Luminance of image pixel under mouse.} xywh {582 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 7
                    }
                  }
                }
              }
            }
          }
        }
        Fl_Group uiBottomBar {open
          xywh {0 486 640 49} box ENGRAVED_BOX
        } {
          Fl_Group uiTimeToolbar {open
            xywh {0 486 640 49}
          } {
            Fl_Group {} {open
              xywh {0 486 640 49}
            } {
              Fl_Slider uiTimeline {
                user_data this user_data_type {ViewerUI*}
                callback {int64_t frame = (int64_t) o->value();
v->uiView->seek( frame );}
                tooltip {Timeline.} xywh {5 489 610 21} type Horizontal minimum 1 maximum 50 step 1 value 1 resizable
                code0 {o->main( this );}
                class {mrv::Timeline}
              }
              Fl_Menu_Button uiLoopMode {
                label L
                user_data this user_data_type {ViewerUI*}
                callback {int c = o->value();
o->label(o->text(c));
v->uiView->looping( (mrv::CMedia::Looping)c );} open
                tooltip {Looping Behavior ( Stop, Loop, Ping-Pong )} xywh {615 488 21 23}
                code0 {o->disable_glyph();}
                class {mrv::PopupMenu}
              } {
                MenuItem {} {
                  label {@||}
                  xywh {0 0 100 20}
                }
                MenuItem {} {
                  label L
                  xywh {0 0 100 20}
                }
                MenuItem {} {
                  label {@<->}
                  xywh {0 0 100 20}
                }
              }
              Fl_Group {} {open
                xywh {0 509 640 26}
              } {
                Fl_Group {} {open
                  xywh {4 513 94 20}
                } {
                  Fl_Menu_Button uiTimecodeSwitch {
                    label F
                    user_data this user_data_type {ViewerUI*}
                    callback {mrv::change_timeline_display(v);} open
                    tooltip {Switch between Frame, Seconds and Timecode display} xywh {4 513 20 20} box DOWN_BOX
                    code0 {o->disable_glyph();}
                    class {mrv::PopupMenu}
                  } {
                    MenuItem {} {
                      label Frames
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Seconds
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Time
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label {Non-Drop Frame Timecode}
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label {Drop Frame Timecode}
                      xywh {0 0 100 20}
                    }
                  }
                  Fl_Input uiFrame {
                    label F
                    user_data this user_data_type {ViewerUI*}
                    callback {int64_t f = o->value();
if ( f < v->uiTimeline->minimum() )
   f = int64_t( v->uiTimeline->minimum() );
else if ( f > v->uiTimeline->maximum() )
   f = int64_t( v->uiTimeline->maximum() );
v->uiView->seek( f );}
                    tooltip {Current frame.} xywh {24 513 70 20} color -1733777408 selection_color 0
                    code0 {o->value(1);}
                    class {mrv::Timecode}
                  }
                }
                Fl_Group {} {open
                  xywh {95 511 360 23} resizable
                } {
                  Fl_Group {} {open
                    xywh {95 512 215 22}
                  } {
                    Fl_Button {} {
                      label {@|<}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->first_frame();}
                      tooltip {Go to the beginning of the sequence.} xywh {98 514 30 18} labelcolor 28
                    }
                    Fl_Button uiPlayBackwards {
                      label {@<}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->play_backwards();}
                      tooltip {Play sequence backwards.} xywh {128 514 30 18} labelcolor 28
                    }
                    Fl_Button {} {
                      label {@<|}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->step_frame(-1);}
                      tooltip {Go back one frame.} xywh {158 514 30 18} labelcolor 28
                    }
                    Fl_Button {} {
                      label {@||}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->stop();}
                      tooltip {Stop playback.} xywh {188 514 30 18} labelcolor 19
                    }
                    Fl_Button {} {
                      label {@|>}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->step_frame(1);}
                      tooltip {Advance one frame.} xywh {218 514 30 18} labelcolor 28
                    }
                    Fl_Button uiPlayForwards {
                      label {@>}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->play_forwards();}
                      tooltip {Play sequence forward.} xywh {248 514 30 18} labelcolor 28
                    }
                    Fl_Button {} {
                      label {@>|}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->last_frame();}
                      tooltip {Go to the end of the sequence.} xywh {278 514 30 18} labelcolor 28
                    }
                  }
                  Fl_Group {} {open
                    xywh {315 511 65 21}
                  } {
                    Fl_Menu_Button fpsDefaults {
                      label FPS
                      user_data this user_data_type {ViewerUI*}
                      callback {int c = o->value();

double g;
mrv::media fg = v->uiView->foreground();

if ( c <= 0 && fg )
    g = fg->image()->fps();
else
    g = atof( o->text( o->value() ) );

v->uiView->fps( g );
v->uiFPS->value( g );} open
                      tooltip {Some default frame rate settings.} xywh {315 513 30 19} labelsize 10
                      code0 {o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label Default
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 60
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {59.94}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 50
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 30
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {29.97}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 25
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 24
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {23.97}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 15
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {14.985}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {12.5}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 12
                        xywh {0 0 100 20}
                      }
                    }
                    Fl_Input uiFPS {
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->fps( o->value() );}
                      tooltip {Allows you to adjust frame rate playback.} xywh {344 513 35 18} color -1733777408 selection_color 0
                      code0 {o->textcolor( FL_BLACK );
o->value(24);}
                      class Fl_Value_Input
                    }
                  }
                  Fl_Group {} {open
                    xywh {382 513 73 19}
                  } {
                    Fl_Menu_Button uiAudioTracks {
                      label A
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->audio_stream( o->value() );}
                      tooltip {Select Audio Track} xywh {382 513 18 19} labelsize 10
                      code0 {o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {}
                    Fl_Slider uiVolume {
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->volume((float) o->value() );}
                      tooltip {Audio Volume} xywh {400 515 55 15} type Horizontal align 4 step 0.01 value 1 slider_size 0.3
                    }
                  }
                }
                Fl_Group {} {open
                  xywh {455 509 180 24}
                } {
                  Fl_Input uiStartFrame {
                    label S
                    user_data this user_data_type {ViewerUI*}
                    callback {double f = (double) o->value();
v->uiTimeline->display_minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    tooltip {Allows you to set starting frame for timeline.} xywh {475 513 70 20} color -1733777408 selection_color 0
                    code0 {o->value(1);}
                    class {mrv::Timecode}
                  }
                  Fl_Input uiEndFrame {
                    label E
                    user_data this user_data_type {ViewerUI*}
                    callback {boost::int64_t f = o->value();
v->uiTimeline->display_maximum( float(f) );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    tooltip {Allows you to set the ending frame for timeline.} xywh {565 513 70 20} color -1733777408 selection_color 0
                    code0 {o->value(50);}
                    class {mrv::Timecode}
                  }
                  Fl_Button uiStartButton {
                    label S
                    user_data this user_data_type {ViewerUI*}
                    callback {double f;
mrv::CMedia* img = NULL;
mrv::media fg = v->uiView->foreground();
if ( fg )
{
  img = fg->image();
}

if ( !o->value() )
{
  o->value(1);
  f = (double) v->uiFrame->value();
}
else
{
  o->value(0);
  if ( !v->uiTimeline->edl() )
  {
     mrv::media fg = v->uiView->foreground();
     if ( fg )
     {
	mrv::Image_ptr img = fg->image();
	f = img->first_frame();
     }
   }
   else
   {
     // edl
     mrv::Reel reel = v->uiReelWindow->uiBrowser->current_reel();
     if ( reel->images.size() == 0 ) return;

     mrv::media fg = reel->images[0];
     if ( fg ) f = fg->position();
  }
}

v->uiStartFrame->value( f );
v->uiTimeline->display_minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    xywh {456 513 20 20}
                  }
                  Fl_Button uiEndButton {
                    label E
                    user_data this user_data_type {ViewerUI*}
                    callback {double f;
if ( !o->value() )
{
  o->value(1);
  f = (double) v->uiFrame->value();
}
else
{
  o->value(0);
  if ( ! v->uiTimeline->edl() )
  {
     mrv::media fg = v->uiView->foreground();
     if ( fg )
     {
	mrv::Image_ptr img = fg->image();
	f = img->last_frame();
     }
   }
   else
   {
     // edl
     mrv::Reel reel = v->uiReelWindow->uiBrowser->current_reel();
     size_t size  = reel->images.size();
     if ( !reel || size == 0 ) return;

     mrv::media fg = reel->images[ size - 1 ];
     if ( fg ) f = fg->position() + fg->image()->duration() - 1;
   }
}

v->uiEndFrame->value( f );
v->uiTimeline->display_maximum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    xywh {546 513 20 20}
                  }
                }
              }
            }
          }
        }
      }
    }
    code {uiMain->show();
Fl_Group::current( uiMain );
uiReelWindow = new ReelUI(this);
uiImageInfo = new ImageInfoUI(this);
uiColorArea = new ColorAreaUI(this);
uiGL3dView = new GL3dViewUI(this);
uiVectorscope = new VectorscopeUI(this);
uiHistogram = new HistogramUI(this);
uiWaveform = new WaveformUI(this);
uiPaint = new PaintUI(this);
uiStereo = new StereoUI(this);
if (!uiLog) uiLog   = new LogUI(this);
if (!uiAbout) uiAbout = new AboutUI(this); // should be static
if (!uiConnection) uiConnection = new ConnectionUI( this );
uiHotkey = new HotkeyUI(this);
uiICCProfiles = new ICCProfileListUI(this);
uiEDLWindow = new EDLWindowUI(this);
uiSOPNode = NULL;
Fl_Group::current(0);

// read and use preferences
mrv::Preferences prefs( uiPrefs );} {}
  }
  Function {ViewerUI()} {} {
    code {uiMain = make_window();} {}
  }
  Function {~ViewerUI()} {open
  } {
    code {delete uiICCProfiles; uiICCProfiles = NULL;
delete uiImageInfo; uiImageInfo = NULL;
delete uiColorArea; uiColorArea = NULL;
delete uiHistogram; uiHistogram = NULL;
delete uiVectorscope; uiVectorscope = NULL;
delete uiWaveform; uiWaveform = NULL;
delete uiGL3dView; uiGL3dView = NULL;
delete uiStereo; uiStereo = NULL;
delete uiAbout; uiAbout = NULL;
delete uiLog; uiLog = NULL;
delete uiPaint; uiPaint = NULL;
delete uiEDLWindow; uiEDLWindow = NULL;
delete uiConnection; uiConnection = NULL;
delete uiMain; uiMain = NULL;
delete uiHotkey; uiHotkey = NULL;
delete uiReelWindow; uiReelWindow = NULL;} {selected
    }
  }
  Function {refresh()} {open
  } {
    code {if ( uiMain ) uiMain->redraw();
if ( uiPrefs ) uiPrefs->uiMain->redraw();
if ( uiLog ) uiLog->uiMain->redraw();
if ( uiAbout ) uiAbout->uiMain->redraw();
if ( uiICCProfiles ) uiICCProfiles->uiMain->redraw();
if ( uiHotkey ) uiHotkey->uiMain->redraw();
if ( uiConnection ) uiConnection->uiMain->redraw();
if ( uiReelWindow ) uiReelWindow->uiMain->redraw();
if ( uiImageInfo ) uiImageInfo->uiMain->redraw();
if ( uiGL3dView ) uiGL3dView->uiMain->redraw();
if ( uiColorArea ) uiColorArea->uiMain->redraw();
if ( uiHistogram ) uiHistogram->uiMain->redraw();
if ( uiVectorscope ) uiVectorscope->uiMain->redraw();
if ( uiWaveform ) uiWaveform->uiMain->redraw();
if ( uiPaint ) uiPaint->uiMain->redraw();
if ( uiSOPNode ) uiSOPNode->uiMain->redraw();
if ( uiEDLWindow ) uiEDLWindow->uiMain->redraw();
if ( uiStereo ) uiStereo->uiMain->redraw();} {}
  }
}

decl {ViewerUI* main_;} {private local
}
