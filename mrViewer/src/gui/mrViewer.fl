# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {\#include "string"} {public local
}

decl {\#include "core/mrvFrame.h"} {public local
}

decl {\#include "core/mrvI8N.h"} {private local
}

decl {\#include "core/mrvAudioEngine.h"} {private local
}

decl {\#include "core/exrImage.h"} {private local
}

decl {\#include "core/mrvMath.h"} {private local
}

decl {\#include "core/stubImage.h"} {private local
}

decl {\#include "core/mrvColorSpaces.h"} {private local
}

decl {\#include "core/mrvServer.h"} {private local
}

decl {\#include "core/mrvClient.h"} {private local
}

decl {\#include "gui/mrvMainWindow.h"} {private local
}

decl {\#include "gui/mrvImageView.h"} {private local
}

decl {\#include "gui/mrvImageBrowser.h"} {private local
}

decl {\#include "gui/mrvBrowser.h"} {private local
}

decl {\#include "gui/mrvPreferencesBrowser.h"} {private local
}

decl {\#include "gui/mrvCTLBrowser.h"} {public local
}

decl {\#include "mrvFileRequester.h"} {private local
}

decl {\#include "gui/mrvSlider.h"} {public local
}

decl {\#include "gui/mrvChoice.h"} {public local
}

decl {\#include "gui/mrvPopupMenu.h"} {public global
}

decl {\#include "gui/mrvTimecode.h"} {private local
}

decl {\#include "gui/mrvTimeline.h"} {private local
}

decl {\#include "gui/mrvColorOps.h"} {private local
}

decl {\#include "gui/mrvHistogram.h"} {private local
}

decl {\#include "gui/mrvVectorscope.h"} {private local
}

decl {\#include "gui/mrvImageInformation.h"} {private local
}

decl {\#include "gui/mrvPreferences.h"} {private local
}

decl {\#include "gui/mrvLogDisplay.h"} {private local
}

decl {\#include "gui/mrvGlWindow3d.h"} {public local
}

decl {\#include "gui/mrvHotkey.h"} {private local
}

decl {\#include "gui/mrvDoubleWindow.h"} {private local
}

decl {\#include "AboutUI.h"} {private local
}

decl {\#include "mrvVectorscopeUI.h"} {private local
}

decl {\#include "mrvHistogramUI.h"} {private local
}

decl {\#include "mrvImageInfo.h"} {private local
}

decl {\#include "mrvPreferencesUI.h"} {private local
}

decl {\#include "mrvGl3dView.h"} {private local
}

decl {\#include "mrvPlayback.h"} {private local
}

decl {\#include "mrvVersion.h"} {private local
}

decl {\#include "mrvIccProfileUI.h"} {private local
}

decl {\#include "mrvColorAreaUI.h"} {private local
}

decl {\#include "mrvEDLWindowUI.h"} {private local
}

decl {\#include "mrvReelUI.h"} {private local
}

decl {\#include "mrvStereoUI.h"} {public global
}

decl {\#include "mrvWaveformUI.h"} {private local
}

decl {\#include "mrvSOPNode.h"} {public global
}

decl {\#include "icons/icons.c"} {private local
}

decl {\#include "FL/Fl_Color_Chooser.H"} {private local
}

decl {\#include "FL/fl_ask.H"} {private local
}

decl {\#include "FL/Fl.H"} {public global
}

decl {\#include "namespace.h"} {public global
}

Function {make_ctl_browser(std::string ctl, const char* prefix)} {return_type {std::string}
} {
  code {std::string orig = ctl;} {}
  Fl_Window {} {
    label {CTL Browser} open
    xywh {484 321 395 440} type Double hide resizable hotspot
    class mrvDoubleWindow modal
  } {
    Fl_Group {} {open
      xywh {10 25 375 405}
    } {
      Fl_Browser browser {
        label {Select a CTL script}
        user_data {&ctl} user_data_type {std::string*}
        callback {int elem = o->value();
if ( elem < 0 || elem >= o->children() ) { v->clear(); return; }
*v = o->text(elem);}
        xywh {10 25 375 365}
        code0 {o->set_prefix(prefix);
// @todo:  o->find( ctl.c_str() );}
        class {mrv::CTLBrowser}
      }
      Fl_Button {} {
        label Accept
        user_data w user_data_type {mrvDoubleWindow*}
        callback {v->make_exec_return(true);}
        xywh {205 400 85 25}
      }
      Fl_Button {} {
        label Cancel
        user_data w user_data_type {mrvDoubleWindow*}
        callback {v->make_exec_return(false);}
        xywh {300 400 80 25}
      }
    }
  }
  code {if (!w->exec())
	return orig;
return ctl;} {}
}

class SaveOptionsUI {} {
  Function {make_window(ViewerUI* main)} {private
  } {
    Fl_Window uiMain {
      label {Save Options} open
      xywh {493 194 315 375} type Double hide resizable
      code0 {// Make the window transient
// o->child_of( main->uiMain );} modal
    } {
      Fl_Group {} {open
        xywh {8 14 302 356} box EMBOSSED_BOX
      } {
        Fl_Group {} {
          xywh {24 30 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Format
            xywh {34 40 75 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveFormat {
            label {Name (.ext)}
            xywh {104 40 180 25}
          } {
            MenuItem {} {
              label {ILM OpenEXR (.exr)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {JPEG (.jpg)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Microsoft Bitmap (.bmp)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {TIFF (.tif)}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Targa (.tga)}
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {24 85 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Compression
            xywh {49 95 90 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveCompression {
            label None
            xywh {139 95 95 25}
          } {}
        }
        Fl_Group {} {
          xywh {24 140 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label {Render Intent}
            xywh {29 150 110 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveRenderIntent {
            label Relative
            xywh {139 150 95 25}
          } {
            MenuItem {} {
              label Saturation
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Perceptual
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Absolute
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Relative
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {24 195 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Channels
            xywh {39 205 100 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveChannels {
            label {All Possible}
            xywh {139 205 95 25}
          } {
            MenuItem {} {
              label {All Possible}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label RGBA
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label RGB
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Alpha Only}
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {24 250 275 45} box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label Frames
            xywh {39 260 100 25} box FLAT_BOX
          }
          Fl_Menu_Button uiSaveFrames {
            label Current
            xywh {139 260 95 25}
          } {
            MenuItem {} {
              label All
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Timeline
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Current
              xywh {0 0 100 20}
            }
          }
        }
        Fl_Group {} {
          xywh {144 335 150 25}
        } {
          Fl_Return_Button {} {
            label Save
            xywh {224 335 70 25}
          }
          Fl_Button {} {
            label Cancel
            xywh {144 335 70 25}
          }
        }
      }
    }
  }
  Function {SaveOptionsUI(ViewerUI* m)} {} {
    code {make_window( m );} {}
  }
  Function {~SaveOptionsUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class LogUI {} {
  Function {make_window(ViewerUI* main)} {open
  } {
    Fl_Window uiMain {
      label {Log Messages} open
      xywh {487 205 635 250} type Double hide resizable
      code0 {//o->child_of( main->uiMain );} non_modal
    } {
      Fl_Group {} {open
        xywh {5 5 630 240} resizable
      } {
        Fl_Text_Display uiLogText {
          xywh {5 5 625 200} resizable
          class {mrv::LogDisplay}
        }
        Fl_Group {} {open
          xywh {455 205 175 40}
        } {
          Fl_Button {} {
            label Save
            user_data uiLogText user_data_type {mrv::LogDisplay*}
            callback {v->save();}
            xywh {545 210 75 30}
          }
          Fl_Button {} {
            label Clear
            user_data uiLogText user_data_type {mrv::LogDisplay*}
            callback {v->clear();}
            xywh {465 210 75 30}
          }
        }
      }
    }
  }
  Function {LogUI(ViewerUI* m)} {open
  } {
    code {make_window( m );} {}
  }
  Function {~LogUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class HotkeyUI {} {
  Function {make_window(ViewerUI* main)} {open private
  } {
    Fl_Window uiMain {
      label Hotkeys open
      xywh {364 235 450 400} type Double hide resizable
      code0 {// Make the window transient
//o->child_of( main->uiMain );} modal
    } {
      Fl_Group {} {open
        xywh {5 25 445 375}
      } {
        Fl_Browser uiFunction {
          label Function
          user_data this user_data_type {HotkeyUI*}
          callback {mrv::select_hotkey( v );}
          xywh {25 25 415 315}
          code0 {mrv::fill_ui_hotkeys( o );}
          class {mrv::Browser}
        }
        Fl_Button {} {
          label Save
          callback {mrv::Preferences::save();}
          xywh {370 355 65 30}
        }
      }
    }
  }
  Function {HotkeyUI(ViewerUI* m)} {} {
    code {make_window( m );} {}
  }
  Function {~HotkeyUI()} {open
  } {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class PaintUI {open
} {
  Function {make_window( ViewerUI* m )} {open
  } {
    Fl_Window uiMain {
      label Paint open
      xywh {733 95 165 505} type Double resizable non_modal visible
    } {
      Fl_Group {} {open
        xywh {5 14 149 481}
      } {
        Fl_Button uiScrub {
          user_data m user_data_type {ViewerUI*}
          callback {v->uiView->scrub_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);
uiMovePic->value(0);}
          tooltip {Area Select Tool} xywh {35 25 43 35} value 1
          code0 {o->value(1);
o->image( scrub );}
        }
        Fl_Button uiSelection {
          user_data m user_data_type {ViewerUI*}
          callback {v->uiView->selection_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);}
          tooltip {Area Select Tool} xywh {34 64 43 35} value 1
          code0 {o->value(1);
o->image( select_pic );}
        }
        Fl_Button uiDraw {
          user_data m user_data_type {ViewerUI*}
          callback {v->uiView->draw_mode();
o->value(1);
uiSelection->value(0);
uiErase->value(0);
uiText->value(0);}
          tooltip {Freehand Drawing Tool} xywh {82 64 40 35}
          code0 {o->image( draw );}
        }
        Fl_Button uiErase {
          user_data m user_data_type {ViewerUI*}
          callback {v->uiView->erase_mode();
o->value(1);
uiSelection->value(0);
uiDraw->value(0);
uiText->value(0);}
          tooltip {Eraser Tool} xywh {82 105 40 35}
          code0 {o->image( erase );}
        }
        Fl_Button uiText {
          label T
          user_data m user_data_type {ViewerUI*}
          callback {o->value(1);
v->uiView->text_mode();}
          tooltip {Text Tool} xywh {33 104 45 35} labelfont 8 labelsize 24 align 32
        }
        Fl_Value_Slider uiPenSize {
          label {Pen Size}
          tooltip {Selects the size of brush.} xywh {37 155 85 30} type Horizontal align 1 minimum 1 maximum 10 step 1 value 5
        }
        Fl_Group {} {open
          xywh {40 415 84 70}
        } {
          Fl_Button uiUndoDraw {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->undo_draw();

if ( !v->uiView->has_undo() )
 o->deactivate();}
            tooltip {Undo Last Shape Drawn} xywh {40 425 34 35}
            code0 {o->image( undo );
if ( !m->uiView->has_undo() )
 o->deactivate();
else
 o->activate();}
          }
          Fl_Button uiRedoDraw {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->redo_draw();
if ( !v->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
            tooltip {Redo Previous Shape Drawn} xywh {80 425 34 35}
            code0 {o->image( redo );
if ( !m->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
          }
        }
        Fl_Button uiPenColor {
          label {Pen Color}
          callback {uchar r, g, b; Fl_Color c = o->color();
Fl::get_color(c,r,g,b);
if (!fl_color_chooser("Pick Draw Color", r,g,b,3)) return;
Fl::set_color(c,r,g,b);
if ( r == 0 && g == 0 && b == 0 )
   o->color( FL_BLACK );
else
   o->color( c );
o->redraw();}
          tooltip {Selects the current pen color.} xywh {92 200 25 25} box EMBOSSED_BOX color 167706624 labelsize 11 align 4
        }
        Fl_Group {} {
          label Frames open
          xywh {30 245 95 55} box UP_BOX
        } {
          Fl_Round_Button uiCurrentFrame {
            label Current user_data_type {void*} selected
            xywh {40 250 80 25} type Radio down_box ROUND_DOWN_BOX value 1
            code0 {o->value(1);}
          }
          Fl_Round_Button uiAllFrames {
            label All user_data_type {void*}
            xywh {40 270 80 25} type Radio down_box ROUND_DOWN_BOX
            code0 {o->value(0);}
          }
        }
        Fl_Group {} {
          label Ghosting open
          xywh {30 330 100 85} box UP_BOX
        } {
          Fl_Counter {} {
            label Previous
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->ghost_previous( o->value() );
v->uiView->redraw();}
            xywh {45 349 64 21} align 1 minimum 1 maximum 100 step 1 value 5
          }
          Fl_Counter {} {
            label Next
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->ghost_next( o->value() );
v->uiView->redraw();}
            xywh {45 389 64 21} align 1 minimum 1 maximum 100 step 1 value 5
          }
        }
        Fl_Button uiMovePic {
          user_data m user_data_type {ViewerUI*}
          callback {v->uiView->move_pic_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);
uiScrub->value(0);}
          tooltip {Area Select Tool} xywh {80 25 43 35} value 1
          code0 {o->image( move_pic );}
        }
      }
    }
  }
  Function {PaintUI(ViewerUI* m)} {open
  } {
    code {make_window( m );} {}
  }
  Function {~PaintUI()} {open
  } {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class ConnectionUI {open
} {
  Function {make_window(ViewerUI* main)} {open private
  } {
    Fl_Window uiMain {
      label Connections open
      xywh {630 357 450 400} type Double hide resizable
      code0 {// Make the window transient
//o->child_of( main->uiMain );} non_modal
    } {
      Fl_Group {} {open
        xywh {0 5 445 390}
      } {
        Fl_Group uiServerGroup {
          label Server open
          xywh {15 15 400 75} box ROUNDED_BOX align 5
        } {
          Fl_Value_Input uiServerPort {
            label Port
            xywh {130 40 70 25} step 1 value 4333
          }
          Fl_Button uiCreate {
            label Create
            user_data main user_data_type {ViewerUI*}
            callback {if ( strcmp( o->label(), "Create" ) == 0 )
    mrv::server::create(v);
else
    mrv::server::remove(v);}
            xywh {210 40 100 25}
          }
        }
        Fl_Group uiClientGroup {
          label Client open
          xywh {15 110 400 70} box ROUNDED_BOX align 5
        } {
          Fl_Input uiClientServer {
            label Server
            xywh {80 128 115 30}
            code0 {o->value("localhost");}
          }
          Fl_Value_Input uiClientPort {
            label Port
            xywh {250 130 70 25} step 1 value 4333
          }
          Fl_Button uiConnect {
            label Connect
            user_data main user_data_type {ViewerUI*}
            callback {if ( strcmp( o->label(), "Connect" ) == 0 )
   mrv::client::create(v);
else
   mrv::client::remove(v);}
            xywh {325 130 85 25}
          }
        }
        Fl_Group {} {open
          xywh {15 190 400 200} box ROUNDED_BOX
        } {
          Fl_Text_Display uiLog {
            xywh {30 195 375 190} box FLAT_BOX
            class {mrv::LogDisplay}
          }
        }
      }
    }
  }
  Function {ConnectionUI(ViewerUI* m)} {} {
    code {make_window( m );} {}
  }
  Function {~ConnectionUI()} {} {
    code {delete uiMain; uiMain = NULL;} {}
  }
}

class ViewerUI {open
} {
  decl {static PreferencesUI* uiPrefs;} {public local
  }
  decl {static LogUI* uiLog;} {public local
  }
  decl {static AboutUI* uiAbout;} {public local
  }
  decl {static ICCProfileListUI* uiICCProfiles;} {public local
  }
  decl {static HotkeyUI* uiHotkey;} {public local
  }
  decl {static ConnectionUI* uiConnection;} {public local
  }
  decl {ReelUI* uiReelWindow;} {public local
  }
  decl {ImageInfoUI* uiImageInfo;} {public local
  }
  decl {GL3dViewUI* uiGL3dView;} {public local
  }
  decl {ColorAreaUI* uiColorArea;} {public local
  }
  decl {HistogramUI* uiHistogram;} {public local
  }
  decl {VectorscopeUI* uiVectorscope;} {public local
  }
  decl {WaveformUI* uiWaveform;} {public local
  }
  decl {PaintUI* uiPaint;} {public local
  }
  decl {SopNode* uiSOPNode;} {public local
  }
  decl {EDLWindowUI* uiEDLWindow;} {public local
  }
  decl {StereoUI* uiStereo;} {public local
  }
  Function {make_window()} {open private
  } {
    code {uiPrefs = new PreferencesUI(this);} {}
    Fl_Window uiMain {
      label mrViewer
      user_data this user_data_type {ViewerUI*}
      callback {delete v;} open
      xywh {1130 70 640 535} type Double align 80 resizable
      code0 {o->size_range(640, 550);
o->main( this );}
      class {mrv::MainWindow} visible
    } {
      Fl_Pack uiRegion {open
        xywh {0 0 640 535}
      } {
        Fl_Group uiTopBar {open
          xywh {0 0 640 28} box ENGRAVED_BOX
        } {
          Fl_Menu_Button uiWindows {
            label W
            tooltip {Opens different windows} xywh {2 2 25 22}
            code0 {o->disable_glyph();}
            class {mrv::PopupMenu}
          } {
            MenuItem {} {
              label Reels user_data_type {void*}
              callback {uiReelWindow->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Media Info} user_data_type {void*}
              callback {uiImageInfo->uiMain->show();
uiView->update_image_info();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Color Info} user_data_type {void*}
              callback {uiColorArea->uiMain->show();
uiView->update_color_info();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {EDL Edit} user_data_type {void*}
              callback {uiEDLWindow->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Action Tools} user_data_type {void*}
              callback {uiPaint->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {Stereo 3D Options} user_data_type {void*}
              callback {uiGL3dView->uiMain->show();}
              xywh {10 10 100 20}
            }
            MenuItem {} {
              label 3dView user_data_type {void*}
              callback {uiGL3dView->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Histogram user_data_type {void*}
              callback {uiHistogram->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Vectorscope user_data_type {void*}
              callback {uiVectorscope->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Waveform user_data_type {void*}
              callback {uiVectorscope->uiMain->show();}
              xywh {10 10 100 20}
            }
            MenuItem {} {
              label {ICC Profiles} user_data_type {void*}
              callback {uiICCProfiles->fill();
uiICCProfiles->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Connections user_data_type {void*}
              callback {uiConnection->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Preferences user_data_type {void*}
              callback {uiPrefs->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Hotkeys user_data_type {void*}
              callback {uiHotkey->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Logs user_data_type {void*}
              callback {uiLog->uiMain->show();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label About user_data_type {void*}
              callback {uiAbout->uiMain->show();}
              xywh {0 0 100 20}
            }
          }
          Fl_Group {} {open
            xywh {30 5 90 20} color 1397969664
          } {
            Fl_Menu_Button uiColorChannel {
              label {(no image)}
              user_data this user_data_type {ViewerUI*}
              callback {Fl_Menu_Item* m = (Fl_Menu_Item*)v->uiColorChannel->mvalue();
	      v->uiView->channel( m );
	      //v->uiView->channel( o->value() );} open
              tooltip {Allows you to select different image channels or layers.} xywh {30 2 90 22}
              class {mrv::PopupMenu}
            } {}
          }
          Fl_Group {} {open
            xywh {125 1 279 24} color 1397969664
          } {
            Fl_Box {} {
              label Gain
              xywh {125 2 28 22} align 32
            }
            Fl_Value_Input uiGainInput {
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->gain( (float) o->value() );
v->uiGain->value( (float) o->value() );}
              tooltip {Gain image value.  A simple multiplier of the image pixel values.} xywh {155 2 35 22} color -1733777408 selection_color 0 minimum 0.01 maximum 64 step 0.001 value 1
              code0 {o->textsize( 12 );}
            }
            Fl_Slider uiGain {
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->gain( (float) o->value() );
v->uiGainInput->value( (float) o->value() );}
              tooltip {Allows you to adjust the gain or exposure of the image.} xywh {190 2 70 22} type {Horz Knob} minimum 0.015625 maximum 64 step 1 value 1
              code0 {o->slider_type( mrv::Slider::kLOG );}
              class {mrv::Slider}
            }
            Fl_Menu_Button uiICS {
              label {Input Color Space}
              user_data this user_data_type {ViewerUI*}
              callback {mrv::media fg = v->uiView->foreground();
if (!fg) return;

mrv::CMedia* img = fg->image();

int i = o->value();
if ( i < 0 || i >= o->children() ) return;

std::string c = o->child( i )->label();
o->copy_label( c.c_str() );
img->ocio_input_color_space( c );
char buf[256];
sprintf( buf, "ICS \\"%s\\"", c.c_str() );
v->uiView->send_network( buf );
v->uiView->use_lut(true);
v->uiLUT->value(true);} open
              tooltip {OCIO input color space for the image} xywh {260 2 146 22} align 96
              class {mrv::PopupMenu}
            } {}
            Fl_Group uiFstopGroup {
              xywh {260 2 146 22}
            } {
              Fl_Group {} {open
                xywh {265 2 95 22}
              } {
                Fl_Button {} {
                  label {@<}
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->exposure_change(-0.5f);}
                  tooltip {Decrease exposure by 0.5.} xywh {265 5 16 19}
                }
                Fl_Button uiFstop {
                  label {+0.0  f/8.0}
                  user_data this user_data_type {ViewerUI*}
                  callback {static float old_gain = 1.0f;
float gain = v->uiView->gain();
if ( gain == 1.0f )
{
v->uiView->gain( old_gain );
v->uiGainInput->value( old_gain );
v->uiGain->value( old_gain );
}
else
{
old_gain = gain;
v->uiView->gain( 1.0f );
v->uiGain->value( 1.0f );
v->uiGainInput->value( 1.0f );
}}
                  tooltip {Displays gain as film exposure and fstop.
Click to toggle between current and normal exposure.} xywh {280 5 64 19} labelfont 1
                  code0 {o->labelsize( 12 );}
                }
                Fl_Button {} {
                  label {@>}
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->exposure_change(0.5f);}
                  tooltip {Increase exposure by 0.5.} xywh {344 5 16 19}
                }
              }
              Fl_Button uiNormalize {
                label Norm
                user_data this user_data_type {ViewerUI*}
                callback {v->uiView->toggle_normalize();}
                tooltip {Normalize pixel values to remain in [0,1] range.} xywh {360 2 40 22}
              }
            }
          }
          Fl_Group {} {open
            xywh {405 5 155 20} color 1397969664
          } {
            Fl_Group {} {open
              xywh {405 5 155 20}
            } {
              Fl_Group {} {open
                xywh {405 5 155 20}
              } {
                Fl_Menu_Button gammaDefaults {
                  label Gamma
                  user_data this user_data_type {ViewerUI*}
                  callback {float g = (float) atof( o->child( o->value() )->label() );
if ( !mrv::is_equal( g, 0.0f ) )
{
   v->uiGamma->value(g);
   v->uiGammaInput->value( g );
   v->uiView->gamma(g);
   v->uiView->use_lut(false);
   v->uiLUT->value(false);
   o->copy_label( _("Gamma") );
}
else
{
    int idx = o->value();
    const Fl_Menu_Item* w = gammaDefaults->mvalue();
    const char* lbl = w->label();
    const Fl_Menu_Item* parent = o->child( o->value() );
    const Fl_Menu_Item* p = o->child(0);
    const Fl_Menu_Item* c = p;
    for ( ; c->label(); ++c )
    {
	if ( c->flags & FL_SUBMENU ) p = c;
	if ( c == w ) break;
    }
    if ( strcmp( lbl, p->label() ) == 0 )
       return;
    if ( p && p->label() )
       mrv::Preferences::OCIO_Display = p->label();
    if ( lbl && p->label() && strcmp(lbl, p->label()) != 0 )
    {
       v->uiGamma->value( 1.0f );
	v->uiGammaInput->value( 1.0f );
	v->uiView->gamma( 1.0f );

	mrv::Preferences::OCIO_View = lbl;

	v->uiView->use_lut(true);
	v->uiLUT->value(true);
	mrv::media fg = v->uiView->foreground();
	if ( !fg ) return;
	fg->image()->image_damage( mrv::CMedia::kDamageAll );
	v->uiView->redraw();
    }
    }}
                  tooltip {Some default gamma settings.} xywh {405 3 50 21}
                  class {mrv::PopupMenu}
                } {
                  MenuItem {} {
                    label {2.2}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {1.8}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {1.00}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {0.55}
                    xywh {0 0 100 20}
                  }
                  MenuItem {} {
                    label {0.45}
                    xywh {0 0 100 20}
                  }
                }
                Fl_Value_Input uiGammaInput {
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->gamma( (float) o->value() );
v->uiGamma->value( (float) o->value() );}
                  tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );} xywh {455 5 35 18} color -1733777408 selection_color 0 minimum 0.015625 maximum 64 step 0.01 value 1
                  code0 {o->textsize(12);}
                }
                Fl_Slider uiGamma {
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->gamma( (float) o->value() );
v->uiGammaInput->value( (float) o->value() );}
                  tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );} xywh {490 5 60 18} type {Horz Knob} minimum 0.25 maximum 4 step 0.01 value 0.25
                }
              }
            }
          }
          Fl_Group {} {open
            xywh {550 5 80 20}
          } {
            Fl_Menu_Button uiField {
              label F
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->field( (mrv::ImageView::FieldDisplay) o->value() );}
              tooltip {Changes frame/field display} xywh {550 3 25 22}
              code0 {o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label Frame
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Top Field}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Bottom Field}
                xywh {0 0 100 20}
              }
            }
            Fl_Button uiPixelRatio {
              label {1:1}
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->toggle_pixel_ratio();}
              tooltip {Stretch image to compensate for image's pixel ratio.} xywh {570 3 30 22} shortcut 0x40070
            }
            Fl_Button uiLUT {
              label LUT
              user_data this user_data_type {ViewerUI*}
              callback {v->uiView->toggle_lut();}
              tooltip {Activate viewer's 3D Lut.} xywh {600 3 30 22} shortcut 0x74
            }
          }
        }
        Fl_Group uiViewGroup {open
          xywh {0 28 640 430} resizable
          class Fl_Group
        } {
          Fl_Group uiView {
            xywh {0 28 640 430}
            code0 {o->main(this);}
            class {mrv::ImageView}
          } {}
        }
        Fl_Group uiPixelBar {open
          xywh {0 458 640 28} box FLAT_BOX color 56 labelcolor 17
        } {
          Fl_Group {} {open
            xywh {2 458 634 25}
          } {
            Fl_Menu_Button uiZoom {
              label x1
              user_data this user_data_type {ViewerUI*}
              callback {int t = o->value();
float f;
if ( t < 8 )
{
f = 1 / (float) (9-t);
}
else if ( t == 17 )
{
v->uiView->fit_image();
return;
}
else
{
f = float(t - 7);
}
v->uiView->zoom( f );
o->value(8);}
              tooltip {Image zoom setting.} xywh {5 461 26 20} color 1397969664 labelsize 10 labelcolor 26 textsize 10
              code0 {o->value(10); o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label {1/9}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/8}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/7}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/6}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/5}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/4}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/3}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label {1/2}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x1
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x2
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x3
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x4
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x5
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x6
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x7
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x8
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label x9
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label FIT
                xywh {0 0 100 20}
              }
            }
            Fl_Group {} {
              xywh {31 458 605 25}
            } {
              Fl_Output uiCoord {
                label XY
                tooltip {Image coordinate of pixel under mouse.} xywh {50 461 66 20} box FLAT_BOX color 56 labelfont 4 labelsize 10 labelcolor 17 textsize 10 textcolor 7
              }
              Fl_Group {} {open
                xywh {116 458 520 25}
              } {
                Fl_Group {} {open
                  xywh {116 458 520 25}
                } {
                  Fl_Group {} {open
                    xywh {116 461 230 22}
                  } {
                    Fl_Menu_Button uiAColorType {
                      label RGBA
                      user_data uiView user_data_type {mrv::ImageView*}
                      callback {int i = o->value();
if ( i < 0 ) return;
o->label( o->text(i) );} open
                      tooltip {Switch RGBA display between floating point, hexadecimal (0..0xff) and decimal (0..255).} xywh {116 461 30 20} labelsize 9
                      code0 {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label RGBA
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label Hex
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 8bit
                        xywh {0 0 100 20}
                      }
                    }
                    Fl_Output uiPixelR {
                      tooltip {Red value of image pixel under mouse.} xywh {146 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 1
                    }
                    Fl_Output uiPixelG {
                      tooltip {Green value of image pixel under mouse.} xywh {196 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 2
                    }
                    Fl_Output uiPixelB {
                      tooltip {Blue value of image pixel under mouse.} xywh {246 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 4
                    }
                    Fl_Output uiPixelA {
                      tooltip {Alpha value of image pixel under mouse.} xywh {296 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 7
                    }
                  }
                  Fl_Output uiPixelView {
                    tooltip {8-bit sample of image pixel under mouse.} xywh {365 460 20 20} box FLAT_BOX color 1397969664
                  }
                  Fl_Group {} {
                    xywh {391 461 173 22}
                  } {
                    Fl_Menu_Button uiBColorType {
                      label HSV
                      user_data uiView user_data_type {mrv::ImageView*}
                      callback {int i = o->value();
if ( i < 0 ) return;
o->label( mrv::color::space2id( (mrv::color::Space) (i+1)) );
v->update_color_info();}
                      tooltip {Switch pixel color space information display for the pixel under the cursor.} xywh {391 461 23 20} labelsize 9
                      code0 {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label HSV
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label HSL
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {XYZ CIE XYZ}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {xyY CIE xyY}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {Lab CIELAB (L*a*b*)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {Luv CIELUV (L*u*v*)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {YUV (Analog PAL)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {YDbDr (Analog SECAM/PAL-N)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {YIQ (Analog NTSC)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {ITU-601 (Digital PAL/NTSC YCbCr)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {ITU-709 (Digital HDTV YCbCr)}
                        xywh {0 0 100 20}
                      }
                    }
                    Fl_Output uiPixelH {
                      tooltip {Hue value of image pixel under mouse.} xywh {414 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 3
                    }
                    Fl_Output uiPixelS {
                      tooltip {Saturation value of image pixel under mouse.} xywh {464 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 3
                    }
                    Fl_Output uiPixelV {
                      tooltip {Value (Intensity) of image pixel under mouse.} xywh {514 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 3
                    }
                  }
                  Fl_Menu_Button uiPixelValue {
                    label F
                    user_data uiView user_data_type {mrv::ImageView*}
                    callback {int i = o->value();
if ( i < 0 ) return;
char t[2];
t[1] = 0;
t[0] = o->text(i)[0];
o->label( strdup(t) );
v->update_color_info();}
                    tooltip {Type of pixel values to show:
+ Full:  pixel with gamma, gain and lut.
+ Gamma: pixel with gamma and gain but no lut.
+ Original: pixel without gamma, gain or lut.} xywh {350 461 13 20} align 48
                    code0 {o->value(0);
o->disable_glyph();}
                    class {mrv::PopupMenu}
                  } {
                    MenuItem {} {
                      label Full
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Gamma
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Original
                      xywh {0 0 100 20}
                    }
                  }
                  Fl_Group {} {open
                    xywh {567 461 65 22}
                  } {
                    Fl_Menu_Button uiLType {
                      label Y
                      callback {int x = o->value();
const char* lbl = o->text(x);
const char name[3] = { lbl[0], lbl[1], 0 };
o->copy_label( name );}
                      tooltip {Switch brightness calculation.

Y (Luminance) is the pixel value according to Rec709:
      Y = 0.2126 R + 0.7152 G + 0.0722 B

Y' (Lumma) is the weighted pixel value according to:
      Y' = ( R + G + B ) / 3.0

L (Lightness) is the human perception of luminance of the image which is non linear.
According to CIE No.15.2:
      L = (116 * Y ^ 1/3 - 16) / 100
A pixel of Y = 0.18 (L = 0.5) will appear about half as bright as Y = L = 1.0 (white).} xywh {567 461 15 20}
                      code0 {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label {Y (Luminance)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {Y' (Lumma)}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {L (Lightness)}
                        tooltip {Lightness is the human perceptual response to luminance Y, according to CIE No.15.2:

      L = 116 * (Y/Yn)^1/3 - 16

where Yn is the white reference (usually 1).} xywh {0 0 100 20}
                      }
                    }
                    Fl_Output uiPixelL {
                      tooltip {Luminance of image pixel under mouse.} xywh {582 461 50 22} box FLAT_BOX color 56 align 36 textsize 10 textcolor 7
                    }
                  }
                }
              }
            }
          }
        }
        Fl_Group uiBottomBar {open
          xywh {0 486 640 49} box ENGRAVED_BOX
        } {
          Fl_Group uiTimeToolbar {open
            xywh {0 486 640 49}
          } {
            Fl_Group {} {open
              xywh {0 486 640 49}
            } {
              Fl_Slider uiTimeline {
                user_data this user_data_type {ViewerUI*}
                callback {int64_t frame = (int64_t) o->value();
v->uiView->seek( frame );}
                tooltip {Timeline.} xywh {5 489 610 21} type Horizontal minimum 1 maximum 50 step 1 value 1 resizable
                code0 {o->main( this );}
                class {mrv::Timeline}
              }
              Fl_Menu_Button uiLoopMode {
                label {@b;L}
                user_data this user_data_type {ViewerUI*}
                callback {int c = o->value();
o->label(o->text(c));
v->uiView->looping( (mrv::CMedia::Looping)c );}
                tooltip {Looping Behavior ( Stop, Loop, Ping-Pong )} xywh {615 488 21 23}
                class {mrv::PopupMenu}
              } {
                MenuItem {} {
                  label {@||}
                  xywh {0 0 100 20}
                }
                MenuItem {} {
                  label {@b;L}
                  xywh {0 0 100 20}
                }
                MenuItem {} {
                  label {@<->}
                  xywh {0 0 100 20}
                }
              }
              Fl_Group {} {open
                xywh {0 509 640 26}
              } {
                Fl_Group {} {open
                  xywh {4 513 94 20}
                } {
                  Fl_Menu_Button uiTimecodeSwitch {
                    label {F:}
                    user_data this user_data_type {ViewerUI*}
                    callback {mrv::change_timeline_display(v);} open
                    tooltip {Switch between Frame, Seconds and Timecode display} xywh {4 513 20 20} box DOWN_BOX
                    code0 {o->disable_glyph();}
                    class {mrv::PopupMenu}
                  } {
                    MenuItem {} {
                      label Frames
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Seconds
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label Time
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label {Non-Drop Frame Timecode}
                      xywh {0 0 100 20}
                    }
                    MenuItem {} {
                      label {Drop Frame Timecode}
                      xywh {0 0 100 20}
                    }
                  }
                  Fl_Input uiFrame {
                    label F
                    user_data this user_data_type {ViewerUI*}
                    callback {int64_t f = o->value();
if ( f < v->uiTimeline->minimum() )
   f = int64_t( v->uiTimeline->minimum() );
else if ( f > v->uiTimeline->maximum() )
   f = int64_t( v->uiTimeline->maximum() );
v->uiView->seek( f );}
                    tooltip {Current frame.} xywh {24 513 70 20} color -1733777408 selection_color 0
                    code0 {o->value(1);}
                    class {mrv::Timecode}
                  }
                }
                Fl_Group {} {open
                  xywh {95 511 360 23} resizable
                } {
                  Fl_Group {} {open
                    xywh {95 512 215 22}
                  } {
                    Fl_Button {} {
                      label {@|<}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->first_frame();}
                      tooltip {Go to the beginning of the sequence.} xywh {98 514 30 18} labelcolor 28
                    }
                    Fl_Button uiPlayBackwards {
                      label {@<}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->play_backwards();}
                      tooltip {Play sequence backwards.} xywh {128 514 30 18} labelcolor 28
                    }
                    Fl_Button {} {
                      label {@<|}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->step_frame(-1);}
                      tooltip {Go back one frame.} xywh {158 514 30 18} labelcolor 28
                    }
                    Fl_Button {} {
                      label {@||}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->stop();}
                      tooltip {Stop playback.} xywh {188 514 30 18} labelcolor 19
                    }
                    Fl_Button {} {
                      label {@|>}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->step_frame(1);}
                      tooltip {Advance one frame.} xywh {218 514 30 18} labelcolor 28
                    }
                    Fl_Button uiPlayForwards {
                      label {@>}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->play_forwards();}
                      tooltip {Play sequence forward.} xywh {248 514 30 18} labelcolor 28
                    }
                    Fl_Button {} {
                      label {@>|}
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->last_frame();}
                      tooltip {Go to the end of the sequence.} xywh {278 514 30 18} labelcolor 28
                    }
                  }
                  Fl_Group {} {open
                    xywh {315 511 65 21}
                  } {
                    Fl_Menu_Button fpsDefaults {
                      label FPS
                      user_data this user_data_type {ViewerUI*}
                      callback {int c = o->value();

double g;
mrv::media fg = v->uiView->foreground();

if ( c <= 0 && fg )
    g = fg->image()->fps();
else
    g = atof( o->text( o->value() ) );

v->uiView->fps( g );
v->uiFPS->value( g );} open
                      tooltip {Some default frame rate settings.} xywh {315 513 30 19} labelsize 10
                      code0 {o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label Default
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 60
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {59.94}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 50
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 30
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {29.97}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 25
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 24
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {23.97}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 15
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {14.985}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label {12.5}
                        xywh {0 0 100 20}
                      }
                      MenuItem {} {
                        label 12
                        xywh {0 0 100 20}
                      }
                    }
                    Fl_Input uiFPS {
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->fps( o->value() );}
                      tooltip {Allows you to adjust frame rate playback.} xywh {344 513 35 18} color -1733777408 selection_color 0
                      code0 {o->textcolor( FL_BLACK );
o->value(24);}
                      class Fl_Value_Input
                    }
                  }
                  Fl_Group {} {open
                    xywh {382 513 73 19}
                  } {
                    Fl_Menu_Button uiAudioTracks {
                      label A
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->audio_stream( o->value() );}
                      tooltip {Select Audio Track} xywh {382 513 18 19} labelsize 10
                      code0 {o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {}
                    Fl_Slider uiVolume {
                      user_data this user_data_type {ViewerUI*}
                      callback {v->uiView->volume((float) o->value() );}
                      tooltip {Audio Volume} xywh {400 515 55 15} type Horizontal align 4 step 0.01 value 1
                    }
                  }
                }
                Fl_Group {} {open
                  xywh {455 509 180 24}
                } {
                  Fl_Input uiStartFrame {
                    label S
                    user_data this user_data_type {ViewerUI*}
                    callback {double f = (double) o->value();
v->uiTimeline->display_minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    tooltip {Allows you to set starting frame for timeline.} xywh {475 513 70 20} color -1733777408 selection_color 0
                    code0 {o->value(1);}
                    class {mrv::Timecode}
                  }
                  Fl_Input uiEndFrame {
                    label E
                    user_data this user_data_type {ViewerUI*}
                    callback {boost::int64_t f = o->value();
v->uiTimeline->display_maximum( float(f) );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    tooltip {Allows you to set the ending frame for timeline.} xywh {565 513 70 20} color -1733777408 selection_color 0
                    code0 {o->value(50);}
                    class {mrv::Timecode}
                  }
                  Fl_Button uiStartButton {
                    label S
                    user_data this user_data_type {ViewerUI*}
                    callback {double f;
mrv::CMedia* img = NULL;
mrv::media fg = v->uiView->foreground();
if ( fg )
{
  img = fg->image();
}

if ( !o->value() )
{
  o->value(1);
  f = (double) v->uiFrame->value();
}
else
{
  o->value(0);
  if ( !v->uiTimeline->edl() )
  {
     mrv::media fg = v->uiView->foreground();
     if ( fg )
     {
	mrv::Image_ptr img = fg->image();
	f = img->first_frame();
     }
   }
   else
   {
     // edl
     mrv::Reel reel = v->uiReelWindow->uiBrowser->current_reel();
     if ( reel->images.size() == 0 ) return;

     mrv::media fg = reel->images[0];
     if ( fg ) f = fg->position();
  }
}

v->uiStartFrame->value( f );
v->uiTimeline->display_minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    xywh {456 513 20 20}
                  }
                  Fl_Button uiEndButton {
                    label E
                    user_data this user_data_type {ViewerUI*}
                    callback {double f;
if ( !o->value() )
{
  o->value(1);
  f = (double) v->uiFrame->value();
}
else
{
  o->value(0);
  if ( ! v->uiTimeline->edl() )
  {
     mrv::media fg = v->uiView->foreground();
     if ( fg )
     {
	mrv::Image_ptr img = fg->image();
	f = img->last_frame();
     }
   }
   else
   {
     // edl
     mrv::Reel reel = v->uiReelWindow->uiBrowser->current_reel();
     size_t size  = reel->images.size();
     if ( !reel || size == 0 ) return;

     mrv::media fg = reel->images[ size - 1 ];
     if ( fg ) f = fg->position() + fg->image()->duration() - 1;
   }
}

v->uiEndFrame->value( f );
v->uiTimeline->display_maximum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                    xywh {546 513 20 20}
                  }
                }
              }
            }
          }
        }
      }
    }
    code {uiMain->show();
Fl_Group::current( uiMain );
uiReelWindow = new ReelUI(this);
uiImageInfo = new ImageInfoUI(this);
uiColorArea = new ColorAreaUI(this);
uiGL3dView = new GL3dViewUI(this);
uiVectorscope = new VectorscopeUI(this);
uiHistogram = new HistogramUI(this);
uiWaveform = new WaveformUI(this);
uiPaint = new PaintUI(this);
uiStereo = new StereoUI(this);
if (!uiLog) uiLog   = new LogUI(this);
if (!uiAbout) uiAbout = new AboutUI(this); // should be static
if (!uiConnection) uiConnection = new ConnectionUI( this );
uiHotkey = new HotkeyUI(this);
uiICCProfiles = new ICCProfileListUI(this);
uiEDLWindow = new EDLWindowUI(this);
uiSOPNode = NULL;
Fl_Group::current(0);

// read and use preferences
mrv::Preferences prefs( uiPrefs );} {}
  }
  Function {ViewerUI()} {} {
    code {uiMain = make_window();} {}
  }
  Function {~ViewerUI()} {} {
    code {delete uiICCProfiles; uiICCProfiles = NULL;
delete uiImageInfo; uiImageInfo = NULL;
delete uiColorArea; uiColorArea = NULL;
delete uiHistogram; uiHistogram = NULL;
delete uiVectorscope; uiVectorscope = NULL;
delete uiGL3dView; uiGL3dView = NULL;
delete uiStereo; uiStereo = NULL;
delete uiAbout; uiAbout = NULL;
delete uiLog; uiLog = NULL;
delete uiPaint; uiPaint = NULL;
delete uiEDLWindow; uiEDLWindow = NULL;
delete uiMain; uiMain = NULL;
delete uiReelWindow; uiReelWindow = NULL;} {}
  }
}

decl {ViewerUI* main_;} {private local
}
