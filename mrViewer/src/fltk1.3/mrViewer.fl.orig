# data file for the FLTK User Interface Designer (FLUID)
version 2.1000 
images_dir fltk::Button 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
decl {\#include "string"} {public
} 

decl {\#include "core/mrvI8N.h"} {} 

decl {\#include "core/mrvAudioEngine.h"} {} 

decl {\#include "core/exrImage.h"} {} 

decl {\#include "core/stubImage.h"} {} 

decl {\#include "core/mrvColorSpaces.h"} {} 

decl {\#include "core/mrvServer.h"} {} 

decl {\#include "core/mrvClient.h"} {} 

decl {\#include "gui/mrvMainWindow.h"} {} 

decl {\#include "gui/mrvImageView.h"} {} 

decl {\#include "gui/mrvImageBrowser.h"} {} 

decl {\#include "gui/mrvBrowser.h"} {} 

decl {\#include "gui/mrvPreferencesBrowser.h"} {} 

decl {\#include "gui/mrvCTLBrowser.h"} {public
} 

decl {\#include "mrvFileRequester.h"} {} 

decl {\#include "gui/mrvPopupMenu.h"} {public
} 

decl {\#include "gui/mrvTimecode.h"} {} 

decl {\#include "gui/mrvTimeline.h"} {} 

decl {\#include "gui/mrvColorOps.h"} {} 

decl {\#include "gui/mrvHistogram.h"} {} 

decl {\#include "gui/mrvVectorscope.h"} {} 

decl {\#include "gui/mrvImageInformation.h"} {} 

decl {\#include "gui/mrvPreferences.h"} {} 

decl {\#include "gui/mrvLogDisplay.h"} {} 

decl {\#include "gui/mrvGlWindow3d.h"} {public
} 

decl {\#include "gui/mrvHotkey.h"} {} 

decl {\#include "mrvPlayback.h"} {} 

decl {\#include "mrvVersion.h"} {} 

decl {\#include "mrvIccProfileUI.h"} {} 

decl {\#include "mrvColorAreaUI.h"} {} 

decl {\#include "mrvEDLWindowUI.h"} {} 

decl {\#include "icons/icons.c"} {} 

decl {\#include "FL/Fl_Color_Chooser.H"} {} 

decl {\#include "FL/fl_ask.H"} {} 

decl {\#include "FL/Fl.H"} {} 

decl {#include "namespace.h"} {public
}

Function {make_ctl_browser(std::string ctl, const char* prefix)} {return_type {std::string}
} {
  code {std::string orig = ctl;} {}
  Fl_Window {} {
    label {CTL Browser} open
    xywh {484 329 395 440} horizontal hide resizable hotspot modal
  } {
    Fl_Group {} {
      xywh {10 25 375 405}
    } {
      Fl_Browser browser {
        label {Select a CTL script}
        user_data {&ctl} user_data_type {std::string*}
        callback {int elem = o->value();
if ( elem < 0 || elem >= o->children() ) { v->clear(); return; }
*v = o->child(elem)->label();} open
        xywh {0 0 375 365}
        extra_code {o->set_prefix(prefix);
o->value(-1);
if ( !ctl.empty() )
{
  Fl_Widget* elem = o->find( ctl.c_str() );

  for (int i = 0; i < o->children(); ++i )
  {
    if ( o->child(i) == elem ) {
      o->value(i); break;
    }
  }
}}
        class {mrv::CTLBrowser}
      } {}
      Fl_Button {} {
        label Accept
        user_data w user_data_type {Fl_Window*}
        callback {v->make_exec_return(true);}
        xywh {195 375 85 25}
      }
      Fl_Button {} {
        label Cancel
        user_data w user_data_type {Fl_Window*}
        callback {v->make_exec_return(false);}
        xywh {290 375 80 25}
      }
    }
  }
  code {if (!w->exec())
	return orig;
return ctl;} {}
} 

  class ReelUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label {Reel List} open
        xywh {463 411 405 350} hide resizable
        extra_code {o->size_range(350,320);
// Make the window transient
o->child_of( main->uiMain );}
      } {
        Fl_Browser uiBrowser {
          xywh {0 32 405 318} box UP_BOX
          extra_code {o->main( main );
o->scrollbar.buttoncolor( mrv::lighter( o->color(), 0x20 ) );
o->hscrollbar.buttoncolor( mrv::lighter( o->color(), 0x20 ));
o->scrollbar.color( o->buttoncolor() );
o->hscrollbar.color( o->buttoncolor() );}
          class {mrv::ImageBrowser}
        } {}
        Fl_Group {} {
          xywh {0 0 405 32} box UP_BOX
        } {
          Fl_Choice {} {
            user_data uiBrowser user_data_type {mrv::ImageBrowser*}
            callback {v->reel(o->value());} open
            xywh {5 5 120 20} align 36 box THIN_DOWN_BOX
            extra_code {uiBrowser->reel_choice(o);}
          } {}
          Fl_Group uiReelOps {
            xywh {130 3 81 26}
          } {
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {const char* name = fl_input("Reel Name", "reel" );
if ( name == NULL ) return;
v->new_reel(name);}
              tooltip {Create a new reel}
              xywh {0 0 26 26} box UP_BOX shortcut 0x4006e
              extra_code {o->image( reel_new_24 );}
            }
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->save_reel();}
              tooltip {Save current reel}
              xywh {26 0 26 26} box UP_BOX
              extra_code {o->image( reel_save_24 );}
            }
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->remove_reel();}
              tooltip {Delete current reel}
              xywh {52 0 26 26} box UP_BOX
              extra_code {o->image( reel_delete_24 );}
            }
          }
          Fl_Group uiImageOps {
            xywh {216 3 105 26}
          } {
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->open();}
              tooltip {Open new image, sequence or movie}
              xywh {1 0 26 26} box UP_BOX shortcut 0x4006f
              extra_code {o->image(file_open_24);}
            }
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->save();}
              tooltip {Save current image, sequence or movie.}
              xywh {27 0 26 26} box UP_BOX shortcut 0x40073
              extra_code {o->image(file_save_24);}
            }
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->clone_current();}
              tooltip {Clone image}
              xywh {53 0 26 26} box UP_BOX shortcut 0x40063
              extra_code {o->image(file_clone_24);}
            }
            Fl_Button {} {
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->remove_current();}
              tooltip {Remove current image from reel.}
              xywh {79 0 26 26} box UP_BOX shortcut 0xffff
              extra_code {o->image(file_delete_24);}
            }
          }
          Fl_Group uiViewerOps {open
            xywh {324 3 79 26}
          } {
            Fl_Button {} {
              label CTL
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->attach_ctl_script();}
              tooltip {Set image CTL script}
              xywh {0 0 26 26} box UP_BOX labelfont 1
            }
            Fl_Button uiBGButton {
              label BG
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->change_background();}
              tooltip {Set reel images as background (needs EDL).}
              xywh {26 0 26 26} box UP_BOX labelfont 1
            }
            Fl_Button uiEDLButton {
              label EDL
              user_data uiBrowser user_data_type {mrv::ImageBrowser*}
              callback {v->toggle_edl();}
              tooltip {Toggle Reel in Timeline}
              xywh {52 0 26 26} box UP_BOX labelfont 1 labelsize 11
            }
          }
        }
      }
    }
    Function {ReelUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~ReelUI()} {open
    } {
      code {delete uiBrowser; uiBrowser = NULL;
delete uiMain; uiMain = NULL;} {}
    }
  }
  class ImageInfoUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label {Media Information} open
        xywh {374 107 505 530} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );}
      } {
        Fl_Group uiInfoText {
          xywh {2 2 498 526}
          extra_code {o->main( main );}
          class {mrv::ImageInformation}
        } {}
      }
    }
    Function {ImageInfoUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~ImageInfoUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class AboutUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label {About mrViewer} open
        xywh {24 65 445 395} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );} modal
      } {
        Fl_Tabs {} {
          user_data main user_data_type {ViewerUI*}
          callback {v->uiAbout->uiGPUInfo->clear();
v->uiAbout->uiGPUInfo->add( mrv::gpu_information( v ).c_str() );} open
          xywh {4 4 441 391}
        } {
          Fl_Group {} {
            label mrViewer open
            xywh {0 20 440 371}
          } {
            Fl_TextDisplay {} {
              xywh {15 15 415 345} textsize 14
              extra_code {o->text( mrv::about_message().c_str() );}
            }
          }
          Fl_Group {} {
            label HW open
            xywh {0 20 440 371} hide
          } {
            Fl_TextDisplay uiCPUInfo {
              label {CPU Information}
              xywh {15 30 415 96} align 1 textsize 14
              extra_code {o->text( mrv::cpu_information().c_str() );}
            }
            Fl_Browser uiGPUInfo {
              label {GPU Information} open
              xywh {16 151 415 205}
              extra_code {static int widths[] = {
160,
o->w()-160,
0
};
o->column_widths( widths );
o->value(-1);}
              class {mrv::Browser}
            } {}
          }
          Fl_Group {} {
            label Formats open
            xywh {0 20 445 370} hide
          } {
            Fl_Browser {} {
              xywh {15 15 415 345}
              extra_code {static const char* col_labels[] = {
"",
"",
"",
"Extension",
"Handler",
"Format Name",
0
};

static int col_widths[] = {
20,
20,
20,
120,
120,
300,
0
};
o->column_labels( col_labels );
o->column_widths( col_widths );


ffmpeg_formats(*o);
o->value(-1);}
            } {}
          }
          Fl_Group {} {
            label Codecs open
            xywh {0 20 445 375} hide
          } {
            Fl_Browser {} {
              label Video
              xywh {15 20 410 150}
              extra_code {ffmpeg_video_codecs(*o);
o->value(-1);}
            } {}
            Fl_Browser {} {
              label Audio open
              xywh {15 190 415 110}
              extra_code {ffmpeg_audio_codecs(*o);
o->value(-1);}
            } {}
            Fl_Browser {} {
              label Subtitles open
              xywh {15 315 415 55}
              extra_code {ffmpeg_subtitle_codecs(*o);
o->value(-1);}
            } {}
          }
          Fl_Group {} {
            label Protocols open
            xywh {0 20 445 370} hide deactivate
          } {
            Fl_Browser {} {
              xywh {15 15 415 345}
              extra_code {o->add( ffmpeg_protocols().c_str() );
o->value(-1);}
            } {}
          }
          Fl_Group {} {
            label {Motion Estimation Methods} open
            xywh {0 20 445 370} hide
          } {
            Fl_Browser {} {
              xywh {15 15 415 345}
              extra_code {static int col_widths[] = {
120,
300,
0
};
o->column_widths( col_widths );
o->add( ffmpeg_motion_estimation_methods().c_str() );
o->value(-1);}
            } {}
          }
        }
      }
    }
    Function {AboutUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~AboutUI()} {open
    } {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class GL3dViewUI {} {
    decl {ViewerUI* main_;} {}
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label {3d View}
        user_data this user_data_type {GL3dViewUI*}
        callback {v->main()->uiView->send( "GL3dView 0" );
o->hide();}
        xywh {158 529 325 240} set_xy hide resizable
        extra_code {// Make the window transient
main_ = main;
o->child_of( main->uiMain );}
        class {mrv::GlWindow3d}
      } {}
    }
    Function {GL3dViewUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~GL3dViewUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {return_type {ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class VectorscopeUI {} {
    decl {ViewerUI* main_;} {}
    Function {make_window(ViewerUI* main)} {private
    } {
      Fl_Window uiMain {
        label Vectorscope
        user_data this user_data_type {VectorscopeUI*}
        callback {v->main()->uiView->send( "VectorscopeWindow 0" );
o->hide();} open
        xywh {107 386 325 240} hide resizable
        extra_code {// Make the window transient
main_ = main;
o->child_of( main->uiMain );}
      } {
        {Fl_Widget} uiVectorscope {
          xywh {4 4 319 231}
          extra_code {o->main( main );}
          class {mrv::Vectorscope}
        }
      }
    }
    Function {VectorscopeUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~VectorscopeUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {return_type {ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class HistogramUI {} {
    decl {ViewerUI* main_;} {}
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label Histogram
        user_data this user_data_type {HistogramUI*}
        callback {v->main()->uiView->send( "HistogramWindow 0" );
o->hide();}
        xywh {206 308 325 240} hide resizable
        extra_code {// Make the window transient
main_ = main;
o->child_of( main->uiMain );
o->size_range(325, 80);}
      } {
        Fl_Pack {} {open
          xywh {3 5 321 230}
        } {
          Fl_Widget uiHistogram {
            xywh {1 0 319 190} resizable
            extra_code {o->main( main );}
            class {mrv::Histogram}
          }
          Fl_Group {} {
            xywh {7 195 310 30}
          } {
            Fl_Group {} {open
              xywh {0 5 160 25}
            } {
              Fl_Box {} {
                label Channel
                xywh {0 0 65 25} align 32
              }
              Fl_Menu_Button {} {
                label RGB
                callback {int c = o->value();
uiHistogram->channel( (mrv::Histogram::Channel) c );
o->label( o->child( c )->label() );}
                xywh {66 0 85 25} align 48
                extra_code {o->value(0);}
              } {
                MenuItem {} {
                  label RGB
                  }
                MenuItem {} {
                  label Red
                  }
                MenuItem {} {
                  label Green
                  }
                MenuItem {} {
                  label Blue
                  }
                MenuItem {} {
                  label Lumma
                  }
              }
            }
            Fl_Group {} {open
              xywh {164 5 146 25}
            } {
              Fl_Box {} {
                label Type
                xywh {1 0 49 25} align 32
              }
              Fl_Menu_Button {} {
                label Linear
                callback {int c = o->value();
uiHistogram->histogram_type( (mrv::Histogram::Type) c);
o->label( o->child( c )->label() );} open
                xywh {51 0 95 25} align 48
                extra_code {o->value( (int) uiHistogram->histogram_type() );
o->label( o->child( o->value() )->label() );}
              } {
                MenuItem {} {
                  label Linear
                  }
                MenuItem {} {
                  label Logarithmic
                  }
                MenuItem {} {
                  label {Square Root}
                  }
              }
            }
          }
        }
      }
    }
    Function {HistogramUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~HistogramUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {main()} {open return_type {ViewerUI*}
    } {
      code {return main_;} {}
    }
  }
  class PreferencesUI {open
  } {
    Function {make_window(ViewerUI* m)} {open private
    } {
      Fl_Window uiMain {
        label Preferences open
        xywh {610 36 670 450} resizable visible
      } {
        Fl_Wizard uiWizard {
          label Settings open
          xywh {218 24 452 400}
        } {
          Fl_Group {} {
            label {User Interface}
            xywh {13 22 427 364} align 5 box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label {Window Behavior} open
              xywh {9 32 410 100} box ROUNDED_BOX
            } {
              Fl_Check_Button uiPrefsAlwaysOnTop {
                label {Always on Top}
                tooltip {When selected, mrViewer's window will always show up on top of other windows on the desktop.}
                xywh {24 14 19 25} align 8 box UP_BOX value 1
              }
              Fl_Check_Button uiPrefsSingleInstance {
                label {Single Instance}
                tooltip {When selected, only a single mrViewer instance is allowed.  
If you try to open several mrViewers with different images, all these images will be sent to the already open mrViewer.}
                xywh {24 40 20 25} align 8 box UP_BOX value 1
              }
              Fl_Check_Button uiPrefsAutoFitImage {
                label {Auto Refit Image}
                tooltip {When selected, mrViewer will apply a fit image operation on each video played.  This effectly means the video will be resized automatically based on the size of the window.}
                xywh {24 67 20 25} align 8 box UP_BOX value 1
              }
              Fl_Group uiPrefsOpenMode {open
                xywh {197 9 150 81} box UP_BOX
              } {
                Fl_Radio_Button {} {
                  label Normal
                  tooltip {When selected, mrViewer will resize its window to the first image.}
                  xywh {15 6 19 20} align 8 box ROUND_UP_BOX value 1
                }
                Fl_Radio_Button {} {
                  label Fullscreen
                  tooltip {When selected, mrViewer will start in full screen mode.}
                  xywh {15 31 19 20} align 8 box ROUND_UP_BOX
                }
                Fl_Radio_Button {} {
                  label Presentation
                  tooltip {When selected, mrViewer will start in presentation mode.}
                  xywh {15 56 19 20} align 8 box ROUND_UP_BOX
                }
              }
            }
            Fl_Group {} {
              label {UI Elements} open
              xywh {9 161 410 98} box ROUNDED_BOX
            } {
              Fl_Check_Button uiPrefsTopbar {
                label Topbar
                tooltip {When selected, mrViewer will start with its channel, gain, gamma toolbar visible. }
                xywh {5 5 25 25} align 8 box UP_BOX value 1
              }
              Fl_Check_Button uiPrefsPixelToolbar {
                label {Pixel Toolbar}
                tooltip {When selected, mrViewer will start with the pixel toolbar shown.}
                xywh {5 36 25 25} align 8 box UP_BOX value 1
              }
              Fl_Check_Button uiPrefsTimeline {
                label Timeline
                tooltip {When selected, mrViewer will start with the timeline shown.}
                xywh {5 66 25 25} align 8 box UP_BOX value 1
              }
              Fl_Check_Button uiPrefsReelList {
                label {Reel List}
                tooltip {When selected, mrViewer will start with the reel list already open.}
                xywh {140 5 25 25} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHistogram {
                label Histogram
                tooltip {When selected, mrViewer will start with the histogram already open.}
                xywh {275 36 25 25} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsVectorscope {
                label Vectorscope
                tooltip {When selected, mrViewer will start with the vectorscope already open.}
                xywh {275 66 25 25} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsImageInfo {
                label {Media Info}
                tooltip {When selected, mrViewer will start with the media information window already open.}
                xywh {140 36 25 25} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsColorArea {
                label {Color Area}
                tooltip {When selected, mrViewer will start with the color area window already open.}
                xywh {140 66 25 25} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsEDLEdit {
                label {EDL Edit}
                tooltip {When selected, mrViewer will start with the histogram already open.}
                xywh {275 8 25 25} align 8 box UP_BOX
              }
            }
            Fl_Group {} {
              label Timeline open
              xywh {9 282 410 70} box ROUNDED_BOX
            } {
              Fl_Choice uiPrefsTimelineDisplay {
                label Display
                tooltip {How to display timeline by default.}
                xywh {105 25 190 25} box THIN_DOWN_BOX
                extra_code {o->value(0);}
              } {
                MenuItem {} {
                  label Frames
                  }
                MenuItem {} {
                  label Seconds
                  }
                MenuItem {} {
                  label Time
                  }
                MenuItem {} {
                  label {Non-Drop Frame Timecode}
                  }
                MenuItem {} {
                  label {Drop Frame Timecode}
                  }
              }
            }
          }
          Fl_Group {} {
            label {View Window} open
            xywh {15 22 425 377} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label Defaults open
              xywh {13 32 394 135} box ROUNDED_BOX
            } {
              Fl_Value_Input uiPrefsViewGain {
                label Gain
                tooltip {Sets the default gain when mrViewer starts.}
                xywh {90 10 80 25} minimum 0.001 maximum 64 step 0.01 value 1
              }
              Fl_Value_Input uiPrefsViewGamma {
                label Gamma
                tooltip {Sets the default gamma when mrViewer starts.}
                xywh {280 10 60 25} minimum 0.01 maximum 4 step 0.01 value 1
              }
              Fl_Choice uiPrefsCropArea {
                label Crop
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {Allows you to select a standard cropping area around image.}
                xywh {15 58 155 25} align 1 box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label {0.00 None}
                  }
                MenuItem {} {
                  label {1.00 Square}
                  }
                MenuItem {} {
                  label {1.19 Movietone}
                  }
                MenuItem {} {
                  label {1.37 Academy (Full Frame)}
                  }
                MenuItem {} {
                  label {1.50 Still Photo}
                  }
                MenuItem {} {
                  label {1.56 STV - HDTV (14:9)}
                  }
                MenuItem {} {
                  label {1.66 European Widescreen}
                  }
                MenuItem {} {
                  label {1.77 HDTV (16:9)}
                  }
                MenuItem {} {
                  label {1.85 Widescreen (3-perf)}
                  }
                MenuItem {} {
                  label {2.10 VistaVision}
                  }
                MenuItem {} {
                  label {2.20 70mm}
                  }
                MenuItem {} {
                  label {2.35 CinemaScope (old 2.35)}
                  }
                MenuItem {} {
                  label {2.39 Panavision (new 2.35)}
                  }
                MenuItem {} {
                  label {4.00 Polyvision}
                  }
              }
              Fl_Check_Button uiPrefsViewPixelRatio {
                label {Compensate Pixel Ratio}
                tooltip {When mrViewer starts, the pixel aspect ratio compensation will be active by default.}
                xywh {198 55 20 22} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsViewLut {
                label {Lut Active}
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {When mrViewer starts, the 3D Lut will be active.}
                xywh {198 80 20 22} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsSafeAreas {
                label {Safe Areas}
                user_data this user_data_type {mrv::PreferencesUI*}
                tooltip {When mrViewer starts, the safe area display will be active by default.}
                xywh {198 107 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsViewDisplayWindow {
                label {Display Window}
                tooltip {When mrViewer starts, the display window will be shown when appropiate.}
                xywh {20 88 20 22} align 8 box UP_BOX value 1
              }
              Fl_Check_Button uiPrefsViewDataWindow {
                label {Data Window}
                tooltip {When mrViewer starts, the data window will be shown when appropiate as a dotted line.}
                xywh {20 108 20 22} align 8 box UP_BOX value 1
              }
            }
            Fl_Group uiPrefsHud {
              label HUD
              user_data this user_data_type {mrv::PreferencesUI*} open
              tooltip {This area specifies which elements should be shown as a HUD overlay on the view screen.}
              xywh {15 187 397 122} box UP_BOX
            } {
              Fl_Check_Button uiPrefsHudFilename {
                label Filename
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 87 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudDirectory {
                label Directory
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 61 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudFrame {
                label Frame
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {16 35 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudFrameRange {
                label {Frame Range}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {15 62 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudResolution {
                label Resolution
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 10 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudFPS {
                label FPS
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {16 10 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudIPTC {
                label {IPTC Data}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {272 11 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudAVDifference {
                label {VA Difference}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {152 35 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudTimecode {
                label Timecode
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {15 87 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudWipeMode {
                label {Wipe Mode}
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {273 36 20 20} align 8 box UP_BOX
              }
              Fl_Check_Button uiPrefsHudMemory {
                label Memory
                user_data this user_data_type {mrv::PreferencesUI*}
                xywh {273 62 20 20} align 8 box UP_BOX
              }
            }
            Fl_Group {} {
              label Positioning open
              xywh {18 324 355 40} box ROUNDED_BOX
            } {
              Fl_Check_Button uiWindowFixedPosition {
                label {Fixed Position}
                xywh {20 10 100 20} box UP_BOX
              }
              Fl_Value_Input uiWindowXPosition {
                label {X:}
                xywh {180 5 60 25}
              }
              Fl_Value_Input uiWindowYPosition {
                label {Y:}
                xywh {260 5 60 25}
              }
            }
          }
          Fl_Group {} {
            label Colors
            xywh {15 22 425 360} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label UI open
              xywh {12 24 383 108} box ROUNDED_BOX
            } {
              Fl_Button uiPrefsUIBG {
                label Background
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Background Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();}
                tooltip {Selects the background of UI.}
                xywh {141 18 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              Fl_Button uiPrefsUIText {
                label Text
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Text Overlay Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text in widgets.}
                xywh {141 63 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              Fl_Button uiPrefsUISelection {
                label Selection
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Selection Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();}
                tooltip {Selects the color of the selection rectangle in widgets.}
                xywh {256 18 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              Fl_Button uiPrefsUISelectionText {
                label {Selected Text}
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Text Overlay Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();
}
                tooltip {Selects the color of text in widgets.}
                xywh {256 63 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
            }
            Fl_Group {} {
              label View
              xywh {12 174 383 108} box ROUNDED_BOX
            } {
              Fl_Button uiPrefsViewBG {
                label Background
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Text Background Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();}
                tooltip {Selects the background color of areas outside the current image.}
                xywh {163 30 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              Fl_Button uiPrefsViewTextOverlay {
                label {Text Overlay}
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Text Overlay Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();}
                tooltip {Selects the color of text overlays printed over the current image.}
                xywh {163 60 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              Fl_Button uiPrefsViewSelection {
                label Selection
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick View Selection Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();}
                tooltip {Selects the color of the selection rectangle over the current image.}
                xywh {278 30 25 25} align 4 box EMBOSSED_BOX labelsize 11
              }
              Fl_Button uiPrefsViewHud {
                label HUD
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {uchar r, g, b; Fl_Color c = o->color();
get_color(c,r,g,b);
if (!fl_color_chooser("Pick HUD Color", r,g,b,3)) return;
set_color(c,r,g,b);
o->color( c );
o->redraw();
v->refresh();}
                tooltip {Selects the color of HUD overlays.}
                xywh {278 60 25 25} align 4 box EMBOSSED_BOX
              }
            }
          }
          Fl_Group {} {
            label {File Requester}
            xywh {13 22 425 361} align 5 hide box EMBOSSED_BOX
          } {
            Fl_Check_Button uiPrefsFileReqFolder {
              label {Single Click to Travel Drawers}
              xywh {60 35 25 25} box UP_BOX
            }
            Fl_Check_Button uiPrefsNativeFileChooser {
              label {Use Native File Chooser on Windows}
              tooltip {On Windows, if selected, the native file chooser will be used.  If unselected, mrViewer's standard file chooser will be used.}
              xywh {61 64 25 25} box UP_BOX
            }
          }
          Fl_Group Playback {
            label Playback
            xywh {15 22 425 360} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label Defaults open
              xywh {50 69 285 136} align 5 box ROUNDED_BOX
            } {
              Fl_Group {} {
                xywh {110 49 152 26}
              } {
                Fl_Value_Input uiPrefsFPS {
                  label Speed
                  xywh {0 1 75 25} color 0x98a8a800 selection_color 0x647f00 minimum 0.001 maximum 120 step 0.01 value 24
                }
                Fl_Menu_Button {} {
                  label FPS
                  callback {float g = (float) atof( o->child( o->value() )->label() );
uiPrefsFPS->value( g );}
                  xywh {77 1 75 25}
                } {
                  MenuItem {} {
                    label {59.94}
                    }
                  MenuItem {} {
                    label 50
                    }
                  MenuItem {} {
                    label {29.97}
                    }
                  MenuItem {} {
                    label 25
                    }
                  MenuItem {} {
                    label 24
                    }
                  MenuItem {} {
                    label {14.985}
                    }
                  MenuItem {} {
                    label {12.5}
                    }
                  MenuItem {} {
                    label 12
                    }
                }
              }
              Fl_Choice uiPrefsLoopMode {
                label {Looping Mode} open
                tooltip {Select default looping mode in timeline.}
                xywh {110 80 90 25} box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label Stop
                  }
                MenuItem {} {
                  label Loop
                  }
                MenuItem {} {
                  label {Ping Pong}
                  }
              }
              Fl_Check_Button uiPrefsAutoPlayback {
                label {Auto Playback}
                tooltip {Start Playback when opening files.}
                xywh {167 20 20 25} align 4 box UP_BOX
              }
            }
          }
          Fl_Group {} {
            label Caches
            xywh {13 22 425 364} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Check_Button uiPrefsCacheActive {
              label {Cache Active}
              tooltip {Image sequences will be cached in memory.  If this setting is off, images will be loaded on demand but fluid playback may not be possible.}
              xywh {39 30 20 25} align 8 box UP_BOX
            }
            Fl_Check_Button uiPrefs8BitCaches {
              label {8 bit Caches}
              tooltip {Image sequences will be cached as 8-bit pictures, instead of being cached as the original depth of the sequence.
This setting thus allows caching more pictures in memory for float and half pictures.}
              xywh {39 69 20 25} align 8 box UP_BOX
            }
            Fl_Check_Button uiPrefsPreloadCache {
              label {Preload Cache}
              tooltip {When this option is on and a sequence is loaded, the frames of the cache will begin loading in the background.  Note however, that this may make the GUI less responsive.}
              xywh {239 29 20 25} align 8 box UP_BOX
            }
            Fl_Choice uiPrefsCacheScale {
              label Scale
              tooltip {Scale of images stored.  Smaller scale allows more images to be stored at the expense of pixelization.}
              xywh {74 114 120 25} box THIN_DOWN_BOX
            } {
              MenuItem {} {
                label {1:1}
                }
              MenuItem {} {
                label {1:2}
                }
              MenuItem {} {
                label {1:4}
                }
              MenuItem {} {
                label {1:8}
                }
            }
            Fl_Group {} {
              label {Cache Size}
              xywh {39 189 336 45} box ROUNDED_BOX
            } {
              Fl_Value_Slider uiPrefsCacheSize {
                tooltip {Size in frames of the video and audio cache.}
                xywh {14 11 246 27} align 1 minimum 30 maximum 200 step 1 value 60
                extra_code {o->activate(false);}
              }
              {fltk::LightButton} uiPrefsCacheFPS {
                label FPS
                user_data uiPrefsCacheSize user_data_type {fltk::ValueSlider*}
                callback {v->activate( !v->active() );}
                tooltip {When selected, cache is set to twice the frames per second of the movie.}
                xywh {260 8 60 30}
              }
            }
          }
          Fl_Group {} {
            label {3D Luts}
            xywh {13 25 425 358} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label Algorithm open
              tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT) and for your rendering transform of your images (RT).  These settings prioritizes choosing one over the other.}
              xywh {40 45 343 105} box ROUNDED_BOX
            } {
              Fl_Choice ODT_algorithm {
                label ODT
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {Preferences::LutAlgorithm x = (Preferences::LutAlgorithm) o->value();
uiODT_CTL->activate();
uiODT_ICC->activate();
if ( x == Preferences::kLutOnlyCTL )
    uiODT_ICC->deactivate();
if ( x == Preferences::kLutOnlyICC )
    uiODT_CTL->deactivate();
v->refresh();} open
                tooltip {mrViewer supports either ICC profiles or a CTL script for your output device transform (ODT).  This setting prioritizes choosing one over the other.
When mixing a CTL ODT script with an ICC profile in an image as rendering transform (RT), it is necessary that the CTL ODT reads data in XYZ_OCES space (ICC v4 relative colorimetric).  Also, note that ICC uses D50 white points while HDTV and CTL use D65 white points.
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).}
                xywh {95 18 195 25} box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label {Prefer CTL}
                  }
                MenuItem {} {
                  label {Always CTL}
                  }
                MenuItem {} {
                  label {Prefer ICC}
                  }
                MenuItem {} {
                  label {Always ICC}
                  }
              }
              Fl_Choice RT_algorithm {
                label RT
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {Preferences::LutAlgorithm x = (Preferences::LutAlgorithm) o->value();
uiRT_CTL->activate();
uiRT_ICC->activate();
if ( x == Preferences::kLutOnlyCTL )
    uiRT_ICC->deactivate();
if ( x == Preferences::kLutOnlyICC )
    uiRT_CTL->deactivate();
v->refresh();} open
                tooltip {mrViewer supports either ICC profiles or a CTL script for the render transform (RT) of your images.  This setting prioritizes choosing one over the other. 
When mixing a CTL RT script with an ICC profile for your output device transform (ODT) like your monitor profile, it is necessary that the CTL RT script passes data in XYZ_OCES space (ICC v4 relative colorimetric).
If unsure what this means, keep your display and images setting always using the same algorithm (CTL or ICC).
}
                xywh {95 70 195 25} box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label {Prefer CTL}
                  }
                MenuItem {} {
                  label {Always CTL}
                  }
                MenuItem {} {
                  label {Prefer ICC}
                  }
                MenuItem {} {
                  label {Always ICC}
                  }
              }
            }
            Fl_Group {} {
              label Quality
              tooltip {mrViewer supports CTL scripts and ICC profiles baked into 3D Luts.  These settings control the quality of the 3D Lut.}
              xywh {43 240 340 75} box ROUNDED_BOX
            } {
              Fl_Choice uiLUT_quality {
                label Resolution
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {v->refresh();}
                tooltip {With modern graphics cards, mrViewer emulates color transforms by baking them into a 3D Lut.  This setting controls how accurate the 3D lut is.  The bigger the lut, the longer it takes to calculate but the more accurate it is.
Note that large 3D Luts can use quite a lot of memory.  

Size     Memory    Max. Error
32        1/3 Mb     12.5%
64          3 Mb      1.6%
128       24 Mb       0.7%

It is recommended this setting is left at 64x64x64.

The "No Baking" setting performs the color correction on the image directly instead of in a 3D lut.  It is a non real-time operation whose speed depends on the image size and can only be done when not playing a movie.
}
                xywh {120 25 170 25} box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label {No Baking}
                  }
                MenuItem {} {
                  label 32x32x32
                  }
                MenuItem {} {
                  label 64x64x64
                  }
                MenuItem {} {
                  label 96x96x96
                  }
                MenuItem {} {
                  label 128x128x128
                  }
              }
            }
            Fl_Group {} {
              label {Rendering Intent}
              xywh {43 175 340 45} box ROUNDED_BOX
            } {
              Fl_Choice uiICC_intent {
                label ICC
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {v->refresh();} open
                tooltip {When using luts with ICC profiles, this setting allows you to select the ICC rendering intent.   Rendering intents are mostly used for printing to film or paper to emulate or proof the output of the output device (ODT), particularly when it does not have the same gamut (color/white range) as the linear RGB/XYZ space.
}
                xywh {120 10 170 25} box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label Perceptual
                  tooltip xxxx
                  }
                MenuItem {} {
                  label {Relative Colorimetric}
                  }
                MenuItem {} {
                  label {Absolute Colorimetric}
                  }
                MenuItem {} {
                  label Saturation
                  }
              }
            }
          }
          Fl_Group {} {
            label {CTL Paths}
            xywh {15 22 425 367} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Browser uiPrefsCTLModulePath {
              label CTL_MODULE_PATH open
              xywh {13 32 380 110}
            } {}
            Fl_Browser uiPrefsCTLScripts {
              label {CTL scripts} open
              xywh {13 177 380 190}
            } {}
          }
          Fl_Group {} {
            label {Default Output Device Transform (ODT)}
            xywh {15 22 425 367} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label Display open
              xywh {13 22 370 345} box ROUNDED_BOX
            } {
              Fl_Group uiODT_CTL {
                xywh {104 10 255 265} horizontal
              } {
                Fl_Group {} {open
                  xywh {0 0 255 35}
                } {
                  {fltk::Input} uiODT_CTL_transform {
                    label Transform
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_transform = o->text();
v->refresh();}
                    tooltip {The name of the CTL display transform
(Environment variable: MRV_ODT_CTL_TRANSFORM)}
                    xywh {15 5 185 25} box THIN_DOWN_BOX labelsize 11
                  }
                  Fl_Button {} {
                    label Pick
                    callback {std::string c = make_ctl_browser(uiODT_CTL_transform->text(), "ODT");
if (c.empty()) return;
uiODT_CTL_transform->text(c.c_str());
uiODT_CTL_transform->do_callback();}
                    xywh {200 5 55 25}
                  }
                }
                Fl_Group {} {
                  label {Chromaticities (CIE)} open
                  tooltip {The CIE x,y coordinates of the primaries and white point of the display
(like Rec. ITU-R BT.709-3)

(Environment variable: MRV_ODT_CTL_CHROMATICITIES)}
                  xywh {5 35 250 155} align 132 box ENGRAVED_BOX
                } {
                  Fl_Box {} {
                    label X
                    xywh {100 8 25 25}
                  }
                  Fl_Box {} {
                    label Y
                    xywh {175 8 25 25}
                  }
                  Fl_Group {} {
                    label Red
                    xywh {45 23 190 35} align 4 labelsize 11
                  } {
                    Fl_Value_Input uiODT_CTL_chromaticities_red_x {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.red.x = (float) o->value();}
                      tooltip {The Red CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.64
                    }
                    Fl_Value_Input uiODT_CTL_chromaticities_red_y {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.red.y = (float) o->value();}
                      tooltip {The Red CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.33
                    }
                  }
                  Fl_Group {} {
                    label Green
                    xywh {45 53 190 35} align 4 labelsize 11
                  } {
                    Fl_Value_Input uiODT_CTL_chromaticities_green_x {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                      tooltip {The Green CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.3
                    }
                    Fl_Value_Input uiODT_CTL_chromaticities_green_y {
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();}
                      tooltip {The Green CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.6
                    }
                  }
                  Fl_Group {} {
                    label Blue
                    xywh {45 83 190 35} align 4 labelsize 11
                  } {
                    Fl_Value_Input uiODT_CTL_chromaticities_blue_x {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value(); 
v->refresh();}
                      tooltip {The Blue CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.15
                    }
                    Fl_Value_Input uiODT_CTL_chromaticities_blue_y {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The Blue CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.06
                    }
                  }
                  Fl_Group {} {
                    label White
                    xywh {45 113 190 35} align 4 labelsize 11
                  } {
                    Fl_Value_Input uiODT_CTL_chromaticities_white_x {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.green.x = (float) o->value();
v->refresh();}
                      tooltip {The White CIE X coordinate of the display}
                      xywh {10 10 85 25} step 0.0001 value 0.3127
                    }
                    Fl_Value_Input uiODT_CTL_chromaticities_white_y {
                      user_data this user_data_type {mrv::PreferencesUI*}
                      callback {mrv::Preferences::ODT_CTL_chromaticities.white.y = (float) o->value();
v->refresh();}
                      tooltip {The White CIE Y coordinate of the display}
                      xywh {105 10 85 25} step 0.0001 value 0.329
                    }
                  }
                }
                Fl_Group {} {
                  label {White Luminance}
                  xywh {115 200 130 35} align 132 labelsize 11
                } {
                  Fl_Value_Input uiODT_CTL_white_luminance {
                    label {cd/m2}
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_white_luminance = (float) o->value();
v->refresh();}
                    tooltip {The luminance, in cd/m2, of the display.

(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)}
                    xywh {10 5 90 25} align 136 maximum 500 step 0.1 value 120
                  }
                }
                Fl_Group {} {
                  label {Surround Luminance}
                  tooltip {
(Environment variable:
CTL_DISPLAY_WHITE_LUMINANCE)}
                  xywh {125 230 120 35} align 132 labelsize 11
                } {
                  Fl_Value_Input uiODT_CTL_surround_luminance {
                    label {cd/m2}
                    user_data this user_data_type {mrv::PreferencesUI*}
                    callback {mrv::Preferences::ODT_CTL_surround_luminance = (float) o->value();
v->refresh();}
                    tooltip {The luminance, in cd/m2, of the background that surrounds the display.

(Environment variable:
MRV_ODT_CTL_SURROUND_LUMINANCE)}
                    xywh {0 10 90 25} align 136 maximum 500 step 0.1 value 12
                  }
                }
              }
              Fl_Group uiODT_ICC {open
                xywh {35 285 312 45}
              } {
                {fltk::Input} uiODT_ICC_profile {
                  label {ICC profile}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::Preferences::ODT_ICC_profile = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for your ODT (monitor)
(Environment variable: MRV_ODT_ICC_PROFILE)}
                  xywh {55 15 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiODT_ICC_profile->text());
uiODT_ICC_profile->text(c);
uiODT_ICC_profile->do_callback();}
                  xywh {245 15 55 25}
                }
              }
            }
          }
          Fl_Group {} {
            label {Default Rendering Transform (RT)}
            xywh {15 22 425 367} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group uiRT_CTL {
              label {Render Transforms}
              xywh {15 24 375 155} box ROUNDED_BOX
            } {
              Fl_Group {} {open
                xywh {100 15 255 30}
              } {
                {fltk::Input} uiCTL_8bits_load_transform {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_8bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_CTL_RT_8bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_8bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_8bits_load_transform->text(c.c_str());
uiCTL_8bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              Fl_Group {} {open
                xywh {100 45 255 30}
              } {
                {fltk::Input} uiCTL_16bits_load_transform {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_16bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_CTL_RT_16bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->text(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              Fl_Group {} {open
                xywh {100 75 255 30}
              } {
                {fltk::Input} uiCTL_32bits_load_transform {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_32bits = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_CTL_RT_32bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_16bits_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_16bits_load_transform->text(c.c_str());
uiCTL_16bits_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              Fl_Group {} {open
                xywh {100 105 255 30}
              } {
                {fltk::Input} uiCTL_float_load_transform {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::rendering_transform_float = o->text();
v->refresh();}
                  tooltip {The name of the CTL default image transform for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_CTL_RT_float)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Pick
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {std::string c = make_ctl_browser(uiCTL_float_load_transform->text(), "RRT");
if (c.empty()) return;
uiCTL_float_load_transform->text(c.c_str());
uiCTL_float_load_transform->do_callback();}
                  xywh {190 0 55 25}
                }
              }
            }
            Fl_Group uiRT_ICC {
              label {ICC Profiles}
              xywh {15 204 375 155} box ROUNDED_BOX
            } {
              Fl_Group {} {open
                xywh {100 15 255 30}
              } {
                {fltk::Input} uiICC_8bits_profile {
                  label {8-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_8bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 8 bit images (jpg, bmp, etc)
(Environment variable: MRV_ICC_RT_8bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_8bits_profile->text());
uiICC_8bits_profile->text(c);
uiICC_8bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              Fl_Group {} {open
                xywh {100 45 255 30}
              } {
                {fltk::Input} uiICC_16bits_profile {
                  label {16-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_16bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 16-bit images (cin, tiff, etc)
(Environment variable: MRV_ICC_RT_16bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_16bits_profile->text());
uiICC_16bits_profile->text(c);
uiICC_16bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              Fl_Group {} {open
                xywh {100 75 255 30}
              } {
                {fltk::Input} uiICC_32bits_profile {
                  label {32-bits}
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_32bits = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for 32-bit int images (openexr integers, etc)
(Environment variable: MRV_ICC_RT_32bits)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_32bits_profile->text());
uiICC_32bits_profile->text(c);
uiICC_32bits_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
              Fl_Group {} {open
                xywh {100 105 255 30}
              } {
                {fltk::Input} uiICC_float_profile {
                  label float
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {mrv::CMedia::icc_profile_float = o->text();
v->refresh();}
                  tooltip {The name of the default ICC profile for half and float images (OpenEXR, dpx, etc)
(Environment variable: MRV_ICC_RT_float)}
                  xywh {0 0 190 25} align 132 box THIN_DOWN_BOX labelsize 11
                }
                Fl_Button {} {
                  label Load
                  user_data this user_data_type {mrv::PreferencesUI*}
                  callback {const char* c = open_icc_profile(uiICC_float_profile->text());
uiICC_float_profile->text(c);
uiICC_float_profile->do_callback();}
                  xywh {190 0 55 25}
                }
              }
            }
          }
          Fl_Group {} {
            label Loading open
            xywh {15 22 425 360} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {open
              xywh {13 45 400 104} box ROUNDED_BOX
            } {
              Fl_Check_Button uiPrefsLoadSequence {
                label { Load Sequence on Drag&&Drop}
                tooltip {When dragging and dropping a frame from a sequence, make mrViewerr load the full sequence.   Otherwise it loads the frame only.}
                xywh {20 44 25 25} box UP_BOX value 1
              }
            }
          }
          Fl_Group {} {
            label Video
            xywh {15 22 425 361} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Choice VideoDriver {
              label Driver open
              xywh {78 37 290 25} box THIN_DOWN_BOX
            } {
              MenuItem {} {
                label OpenGL
                }
            }
            Fl_Group {} {
              label Stereo open
              xywh {48 97 318 65} box ROUNDED_BOX
            } {
              {fltk::LightButton} uiPrefsStereoRightEyeInverted {
                label {Right Eye Inverted}
                tooltip {This option controls stereo viewing of interlaced and checkerboard.}
                xywh {57 15 212 35}
              }
            }
            Fl_Group {} {open
              xywh {43 272 325 65} box ROUNDED_BOX
            } {
              Fl_Choice uiPrefsBlendMode {
                label {Blend Mode}
                user_data uiMain user_data_type {ViewerUI*}
                tooltip {OpenGL blend compositing mode.
Traditional:
SC x SA + DC x ( 1 - SA)
Premult:
SC + DC x ( 1 - SA )
where SC is source color, SA is source alpha, and DC is destination color.}
                xywh {132 25 167 25} box THIN_DOWN_BOX
              } {
                MenuItem {} {
                  label Traditional
                  }
                MenuItem {} {
                  label Premult
                  }
                MenuItem {} {
                  label {Traditional No Gamma}
                  }
                MenuItem {} {
                  label {Premult No Gamma}
                  }
              }
            }
          }
          Fl_Group {} {
            label Audio
            xywh {13 22 427 367} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Choice AudioDriver {
              label Driver open
              xywh {63 22 316 25} box THIN_DOWN_BOX
            } {}
            Fl_Browser uiPrefsAudioDevice {
              label Devices open
              xywh {25 70 379 107} type Multi
              extra_code {//
// Initialize an audio engine to get devices
//
mrv::AudioEngine* engine = mrv::AudioEngine::factory();
delete engine;

const mrv::AudioEngine::DeviceList& devices = mrv::AudioEngine::devices();
mrv::AudioEngine::DeviceList::const_iterator i = devices.begin();
mrv::AudioEngine::DeviceList::const_iterator e = devices.end();
for ( ; i != e; ++i )
   {
      o->add( (*i).description.c_str() );
   }}
              class Fl_Browser
            } {}
            Fl_Group {} {open
              xywh {64 189 300 60} box ROUND_DOWN_BOX
            } {
              {fltk::Slider} uiPrefsAudioVolume {
                label {Default Volume}
                tooltip {Default audio at opening mrViewer.}
                xywh {79 20 161 25} type TICK_ABOVE align 1 step 0.01 value 1
              }
              Fl_Button uiPrefsAudioMute {
                label Mute
                user_data uiPrefsAudioVolume user_data_type {fltk::Slider*}
                callback {o->value( !o->value() );
if ( o->value() )
   v->deactivate();
else
   v->activate();}
                xywh {40 20 40 25}
              }
            }
          }
          Fl_Group {} {
            label Images open
            tooltip {Options controlling the OpenEXR reader/writer}
            xywh {12 24 427 367} align 5 box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label Saving open
              xywh {54 78 330 130} box ROUNDED_BOX labelsize 15
            } {
              {fltk::LightButton} uiPrefsACESClipMetadata {
                label {ACES Clip Metadata} selected
                tooltip {Whether to save ACES clip metadata in a sidecar.}
                xywh {60 20 210 30}
              }
              {fltk::LightButton} uiPrefsAllLayers {
                label {All Layers}
                tooltip {Whether to save all layers in image file if there are several.}
                xywh {60 70 210 30}
              }
            }
          }
          Fl_Group {} {
            label OpenEXR open
            tooltip {Options controlling the OpenEXR reader/writer}
            xywh {13 23 427 367} align 5 hide box EMBOSSED_BOX labelsize 14
          } {
            Fl_Group {} {
              label Loading
              xywh {44 33 325 130} box ROUNDED_BOX labelsize 15
            } {
              Fl_Value_Input uiPrefsOpenEXRThreadCount {
                label {Thread Count}
                tooltip {Use multiple threads when loading a frame.}
                xywh {155 22 51 28} minimum 1 maximum 16 step 1 value 4
              }
              Fl_Value_Input uiPrefsOpenEXRGamma {
                label Gamma
                tooltip {Gamma to use when loading an exr.}
                xywh {160 82 51 28} minimum 0.1 maximum 16 step 0.1 value 2.2
              }
            }
            Fl_Group {} {
              label Saving open
              xywh {44 203 330 130} box ROUNDED_BOX labelsize 15
            } {
              Fl_Choice uiPrefsOpenEXRCompression {
                label Compression
                user_data this user_data_type {mrv::PreferencesUI*}
                callback {std::string compression = o->child(o->value())->label();
if ( compression == "DWAA" ||
     compression == "DWAB" )
{
v->uiPrefsOpenEXRDWACompression->activate();
}
else
{
v->uiPrefsOpenEXRDWACompression->deactivate();
}}
                tooltip {Compression to use when saving an exr.}
                xywh {100 20 180 25}
              } {
                MenuItem {} {
                  label None
                  }
                MenuItem {} {
                  label RLE
                  }
                MenuItem {} {
                  label {ZIP SCANLINE}
                  }
                MenuItem {} {
                  label ZIP
                  }
                MenuItem {} {
                  label PIZ
                  }
                MenuItem {} {
                  label PXR24
                  }
                MenuItem {} {
                  label B44
                  }
                MenuItem {} {
                  label B44A
                  }
                MenuItem {} {
                  label DWAA
                  }
                MenuItem {} {
                  label DWAB
                  }
              }
              Fl_Value_Slider uiPrefsOpenEXRDWACompression {
                label {DWA Compression}
                tooltip {DWA/DWB compression to use when saving an exr with that compression scheme.}
                xywh {130 61 138 34} align 4 deactivate minimum 1 maximum 250 step 10 value 45
              }
            }
          }
        }
        Fl_Group {} {open
          xywh {5 5 207 430}
        } {
          Fl_Browser {} {
            label Module
            user_data this user_data_type {mrv::PreferencesUI*}
            callback {o->update( v );} open
            xywh {0 20 195 410}
            class {mrv::PreferencesBrowser}
          } {
            Submenu {} {
              label {User Interface}
              value 1
            } {
              Submenu {} {
                label {View Window} open
                
              } {
                MenuItem {} {
                  label Colors
                  }
              }
              MenuItem {} {
                label {File Requester}
                }
            }
            MenuItem {} {
              label Playback
              }
            MenuItem {} {
              label Caches
              }
            Submenu {} {
              label {3D Luts}
              
            } {
              MenuItem {} {
                label Paths
                }
              MenuItem {} {
                label {Default ODT}
                }
              MenuItem {} {
                label {Default RT}
                }
            }
            MenuItem {} {
              label Loading
              }
            MenuItem {} {
              label Video
              }
            MenuItem {} {
              label Audio
              }
            MenuItem {} {
              label Images
              }
            MenuItem {} {
              label OpenEXR
              }
          }
        }
        Fl_Group {} {
          xywh {223 419 427 31}
        } {
          Fl_Button {} {
            label Revert
            user_data this user_data_type {mrv::PreferencesUI*}
            callback {// reload preferences
mrv::Preferences prefs(v);}
            tooltip {Revert settings to last saved preferences.}
            xywh {0 3 132 27}
          }
          Fl_Button {} {
            label Save
            callback {mrv::Preferences::save();}
            tooltip {Save preferences to disk as a default.}
            xywh {135 3 132 27}
          }
          Fl_Button {} {
            label OK
            user_data m user_data_type {ViewerUI*}
            callback {v->uiPrefs->uiMain->hide();
v->uiPrefs->run(v);}
            tooltip {Accept settings but don't save.}
            xywh {270 3 132 27}
          }
        }
      }
    }
    Function {PreferencesUI(ViewerUI* m)} {} {
      code {make_window(m);} {}
    }
    Function {~PreferencesUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
    Function {refresh()} {} {
      code {fltk::Window* w = fltk::Window::first();
for ( ; w ; w = w->next() )
   w->redraw();} {}
    }
    Function {run(ViewerUI* m)} {open
    } {
      code {mrv::Preferences::run( m );
fltk::Window* w = fltk::Window::first();
for ( ; w ; w = w->next() )
   w->redraw();} {}
    }
  }
  class SaveOptionsUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label {Save Options} open
        xywh {493 194 315 375} horizontal hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );} modal
      } {
        Fl_Group {} {open
          xywh {8 14 302 356} box EMBOSSED_BOX
        } {
          Fl_Group {} {
            xywh {16 16 275 45} box ENGRAVED_BOX
          } {
            Fl_Box {} {
              label Format
              xywh {10 10 75 25} box FLAT_BOX
            }
            Fl_Menu_Button uiSaveFormat {
              label {Name (.ext)}
              xywh {80 10 180 25}
            } {
              MenuItem {} {
                label {ILM OpenEXR (.exr)}
                }
              MenuItem {} {
                label {JPEG (.jpg)}
                }
              MenuItem {} {
                label {Microsoft Bitmap (.bmp)}
                }
              MenuItem {} {
                label {TIFF (.tif)}
                }
              MenuItem {} {
                label {Targa (.tga)}
                }
            }
          }
          Fl_Group {} {
            xywh {16 71 275 45} box ENGRAVED_BOX
          } {
            Fl_Box {} {
              label Compression
              xywh {25 10 90 25} box FLAT_BOX
            }
            Fl_Menu_Button uiSaveCompression {
              label None
              xywh {115 10 95 25}
            } {}
          }
          Fl_Group {} {
            xywh {16 126 275 45} box ENGRAVED_BOX
          } {
            Fl_Box {} {
              label {Render Intent}
              xywh {5 10 110 25} box FLAT_BOX
            }
            Fl_Menu_Button uiSaveRenderIntent {
              label Relative
              xywh {115 10 95 25}
            } {
              MenuItem {} {
                label Saturation
                }
              MenuItem {} {
                label Perceptual
                }
              MenuItem {} {
                label Absolute
                }
              MenuItem {} {
                label Relative
                }
            }
          }
          Fl_Group {} {
            xywh {16 181 275 45} box ENGRAVED_BOX
          } {
            Fl_Box {} {
              label Channels
              xywh {15 10 100 25} box FLAT_BOX
            }
            Fl_Menu_Button uiSaveChannels {
              label {All Possible}
              xywh {115 10 95 25}
            } {
              MenuItem {} {
                label {All Possible}
                }
              MenuItem {} {
                label RGBA
                }
              MenuItem {} {
                label RGB
                }
              MenuItem {} {
                label {Alpha Only}
                }
            }
          }
          Fl_Group {} {
            xywh {16 236 275 45} box ENGRAVED_BOX
          } {
            Fl_Box {} {
              label Frames
              xywh {15 10 100 25} box FLAT_BOX
            }
            Fl_Menu_Button uiSaveFrames {
              label Current
              xywh {115 10 95 25}
            } {
              MenuItem {} {
                label All
                }
              MenuItem {} {
                label Timeline
                }
              MenuItem {} {
                label Current
                }
            }
          }
          Fl_Group {} {
            xywh {136 321 150 25}
          } {
            {fltk::ReturnButton} {} {
              label Save
              xywh {80 0 70 25}
            }
            Fl_Button {} {
              label Cancel
              xywh {0 0 70 25}
            }
          }
        }
      }
    }
    Function {SaveOptionsUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~SaveOptionsUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class StatisticsUI {} {
    Function {make_window(ViewerUI* main)} {} {
      Fl_Window uiMain {
        label Statistics
        xywh {623 472 445 235} hide resizable
        extra_code {o->child_of( main->uiMain );}
      } {
        Fl_Group {} {open
          xywh {9 5 344 218}
        } {
          Fl_Group {} {
            label Video open
            xywh {220 15 200 75} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiVideoFramesDropped {
              label {Dropped Frames}
              xywh {110 40 80 25}
            }
            {fltk::ValueOutput} uiVideoBlocksDecoded {
              label {Decoded Blocks}
              xywh {110 10 80 25}
            }
          }
          {fltk::ValueOutput} uiAVDifference {
            label {A/V Difference}
            xywh {330 190 80 25}
          }
          Fl_Group {} {
            label Audio open
            xywh {220 110 200 75} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiAudioFramesDropped {
              label {Dropped Frames}
              xywh {110 45 80 25}
            }
            {fltk::ValueOutput} uiAudioBlocksDecoded {
              label {Decoded Blocks}
              xywh {110 15 80 25}
            }
          }
          Fl_Group {} {
            label Input open
            xywh {5 15 205 75} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiInputRead {
              label Read
              xywh {65 10 95 25}
            }
            {fltk::ValueOutput} uiInputBitrate {
              label Bitrate
              xywh {65 40 95 25}
            }
            Fl_Box {} {
              label {KB.}
              xywh {165 10 30 25} box FLAT_BOX
            }
            Fl_Box {} {
              label {kb/s}
              xywh {165 40 30 25} box FLAT_BOX
            }
          }
          Fl_Group {} {
            label Streaming open
            xywh {5 110 205 100} box BORDER_BOX
          } {
            {fltk::ValueOutput} uiStreamSent {
              label Sent
              xywh {65 40 95 25}
            }
            {fltk::ValueOutput} uiStreamBitrate {
              label Bitrate
              xywh {65 70 95 25}
            }
            Fl_Box {} {
              label {KB.}
              xywh {165 40 30 25} box FLAT_BOX
            }
            Fl_Box {} {
              label {kb/s}
              xywh {165 70 30 25} box FLAT_BOX
            }
            {fltk::ValueOutput} uiStreamPackets {
              label Packets
              xywh {65 10 95 25}
            }
          }
        }
      }
    }
    Function {StatisticsUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~StatisticsUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class LogUI {} {
    Function {make_window(ViewerUI* main)} {open
    } {
      Fl_Window uiMain {
        label {Log Messages} open
        xywh {487 205 635 250} hide resizable
        extra_code {o->child_of( main->uiMain );}
      } {
        Fl_Group {} {open
          xywh {5 5 630 240} resizable
        } {
          {fltk::TextDisplay} uiLogText {
            xywh {0 0 625 200} resizable
            class {mrv::LogDisplay}
          }
          Fl_Group {} {open
            xywh {450 200 175 40}
          } {
            Fl_Button {} {
              label Save
              user_data uiLogText user_data_type {mrv::LogDisplay*}
              callback {v->save();}
              xywh {90 5 75 30}
            }
            Fl_Button {} {
              label Clear
              user_data uiLogText user_data_type {mrv::LogDisplay*}
              callback {v->clear();}
              xywh {10 5 75 30}
            }
          }
        }
      }
    }
    Function {LogUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~LogUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class HotkeyUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label Hotkeys
        xywh {364 235 450 400} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );} modal
      } {
        Fl_Group {} {open
          xywh {5 25 445 375} 
        } {
          Fl_Browser uiFunction {
            label Function
            user_data this user_data_type {HotkeyUI*}
            callback {mrv::select_hotkey( v );} open
            xywh {20 0 415 315}
            extra_code {mrv::fill_ui_hotkeys( o );}
          } {}
          Fl_Button {} {
            label Save
            callback {mrv::Preferences::save();}
            xywh {365 330 65 30}
          }
        }
      }
    }
    Function {HotkeyUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~HotkeyUI()} {open
    } {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class PaintUI {} {
    Function {make_window( ViewerUI* m )} {open
    } {
      Fl_Window uiMain {
        label Paint open
        xywh {446 374 155 395} horizontal hide resizable
      } {
        Fl_Group {} {open
          xywh {0 9 149 376}
        } {
          Fl_Button uiSelection {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->selection_mode();
o->value(1);
uiDraw->value(0);
uiErase->value(0);
uiText->value(0);}
            tooltip {Area Select Tool}
            xywh {29 15 43 35}
            image not_inlined {../../icons/select.xpm} value 1
            extra_code {o->value(1);
o->image( select_pic );}
          }
          Fl_Button uiDraw {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->draw_mode();
o->value(1);
uiSelection->value(0);
uiErase->value(0);
uiText->value(0);}
            tooltip {Freehand Drawing Tool}
            xywh {77 15 40 35}
            image not_inlined {../../icons/draw.xpm}
            extra_code {o->image( draw );}
          }
          Fl_Button uiErase {
            user_data m user_data_type {ViewerUI*}
            callback {v->uiView->erase_mode();
o->value(1);
uiSelection->value(0);
uiDraw->value(0);
uiText->value(0);}
            tooltip {Eraser Tool}
            xywh {77 56 40 35}
            image not_inlined {../../icons/erase.xpm}
            extra_code {o->image( erase );}
          }
          Fl_Button uiText {
            label T
            user_data m user_data_type {ViewerUI*}
            callback {o->value(1);
v->uiView->text_mode();}
            tooltip {Text Tool}
            xywh {28 55 45 35} align 32 labelfont 8 labelsize 24
          }
          Fl_Value_Slider uiPenSize {
            label {Pen Size}
            tooltip {Selects the size of brush.}
            xywh {32 106 85 30} align 1 minimum 1 maximum 10 step 1 value 5
          }
          Fl_Group {} {open
            xywh {30 336 82 40}
          } {
            Fl_Button uiUndoDraw {
              user_data m user_data_type {ViewerUI*}
              callback {v->uiView->undo_draw();

if ( !v->uiView->has_undo() )
 o->deactivate();}
              tooltip {Undo Last Shape Drawn}
              xywh {5 2 34 35}
              image not_inlined {../../icons/undo.xpm}
              extra_code {o->image( undo );
if ( !m->uiView->has_undo() )
 o->deactivate();
else
 o->activate();}
            }
            Fl_Button uiRedoDraw {
              user_data m user_data_type {ViewerUI*}
              callback {v->uiView->redo_draw();
if ( !v->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
              tooltip {Redo Previous Shape Drawn}
              xywh {45 2 34 35}
              image not_inlined {../../icons/redo.xpm}
              extra_code {o->image( redo );
if ( !m->uiView->has_redo() )
   o->deactivate();
else
   o->activate();}
            }
          }
          Fl_Button uiPenColor {
            label {Pen Color}
            callback {uchar r, g, b;
fltk::split_color(o->color(),r,g,b);
if (!fltk::color_chooser("Pick Draw Color", r,g,b)) return;
if ( r == 0 && g == 0 && b == 0 )
  o->color( fltk::BLACK );
else
  o->color( fltk::color( r,g,b ) );
o->redraw();}
            tooltip {Selects the current pen color.}
            xywh {87 151 25 25} align 4 box EMBOSSED_BOX color 0x9ff0000 labelsize 11
          }
          Fl_Group {} {
            label Frames open
            xywh {25 196 95 55} box UP_BOX
          } {
            Fl_Radio_Button uiAllFrames {
              label All
              tooltip {Draw shape in all frames}
              xywh {10 5 25 25}
            }
            Fl_Radio_Button uiCurrentFrame {
              label Current
              tooltip {Draw shape in curent frame only}
              xywh {10 25 25 25} value 1
            }
          }
          Fl_Group {} {
            label Ghosting open
            xywh {25 266 95 60} box UP_BOX
          } {
            Fl_Check_Button {} {
              label Previous
              user_data m user_data_type {ViewerUI*}
              callback {v->uiView->ghost_previous( o->value() );
v->uiView->redraw();}
              tooltip {Show shapes of previous frame ghosted.}
              xywh {10 5 25 25} value 1
            }
            Fl_Check_Button {} {
              label Next
              user_data m user_data_type {ViewerUI*}
              callback {v->uiView->ghost_next( o->value() );
v->uiView->redraw();}
              tooltip {Show next frame shapes ghosted.}
              xywh {10 25 25 25} value 1
            }
          }
        }
      }
    }
    Function {PaintUI(ViewerUI* m)} {open
    } {
      code {make_window( m );} {}
    }
    Function {~PaintUI()} {open
    } {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class ConnectionUI {} {
    Function {make_window(ViewerUI* main)} {open private
    } {
      Fl_Window uiMain {
        label Connections open
        xywh {630 357 450 400} hide resizable
        extra_code {// Make the window transient
o->child_of( main->uiMain );}
      } {
        Fl_Group {} {open
          xywh {0 5 445 390} 
        } {
          Fl_Group uiServerGroup {
            label Server open
            xywh {15 10 400 75} align 5 box ROUNDED_BOX
          } {
            Fl_Value_Input uiServerPort {
              label Port
              xywh {115 25 70 25} step 1 value 4333
            }
            Fl_Button uiCreate {
              label Create
              user_data main user_data_type {ViewerUI*}
              callback {if ( strcmp( o->label(), "Create" ) == 0 )
    mrv::server::create(v);
else
    mrv::server::remove(v);}
              xywh {195 25 100 25}
            }
          }
          Fl_Group uiClientGroup {
            label Client open
            xywh {15 105 400 70} align 5 box ROUNDED_BOX
          } {
            {fltk::Input} uiClientServer {
              label Server
              xywh {65 18 115 30}
              extra_code {o->text("localhost");}
            }
            Fl_Value_Input uiClientPort {
              label Port
              xywh {235 20 70 25} step 1 value 4333
            }
            Fl_Button uiConnect {
              label Connect
              user_data main user_data_type {ViewerUI*}
              callback {if ( strcmp( o->label(), "Connect" ) == 0 )
   mrv::client::create(v);
else
   mrv::client::remove(v);}
              xywh {310 20 85 25}
            }
          }
          Fl_Group {} {open
            xywh {15 185 400 200} box ROUNDED_BOX
          } {
            {fltk::TextDisplay} uiLog {
              xywh {15 5 375 190} box FLAT_BOX
              class {mrv::LogDisplay}
            }
          }
        }
      }
    }
    Function {ConnectionUI(ViewerUI* m)} {} {
      code {make_window( m );} {}
    }
    Function {~ConnectionUI()} {} {
      code {delete uiMain; uiMain = NULL;} {}
    }
  }
  class ViewerUI {open
  } {
    decl {static PreferencesUI* uiPrefs;} {public
    }
    decl {static LogUI* uiLog;} {public
    }
    decl {static AboutUI* uiAbout;} {public
    }
    decl {static ICCProfileListUI* uiICCProfiles;} {public
    }
    decl {static HotkeyUI* uiHotkey;} {public
    }
    decl {static ConnectionUI* uiConnection;} {public
    }
    decl {ReelUI* uiReelWindow;} {public
    }
    decl {ImageInfoUI* uiImageInfo;} {public
    }
    decl {GL3dViewUI* uiGL3dView;} {public
    }
    decl {ColorAreaUI* uiColorArea;} {public
    }
    decl {HistogramUI* uiHistogram;} {public
    }
    decl {VectorscopeUI* uiVectorscope;} {public
    }
    decl {PaintUI* uiPaint;} {public
    }
    decl {EDLWindowUI* uiEDLWindow;} {public
    }
    Function {make_window()} {open private
    } {
      code {uiPrefs = new PreferencesUI(this);} {}
      Fl_Window uiMain {
        label mrViewer
        user_data this user_data_type {ViewerUI*}
        callback {delete v;}
        xywh {354 146 640 535} when CHANGED hide resizable
        extra_code {o->size_range(640, 550);
o->main( this );}
        class {mrv::MainWindow}
      } {
        Fl_Pack uiRegion {open
          xywh {0 0 640 530}
        } {
          Fl_Group uiTopBar {open
            xywh {0 0 640 28} box ENGRAVED_BOX
          } {
            Fl_Menu_Button uiWindows {
              label W
              tooltip {Opens different windows}
              xywh {5 5 20 20}
              extra_code {o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label Reels
                user_data this user_data_type {ViewerUI*}
                callback {v->uiReelWindow->uiMain->show();}
                }
              MenuItem {} {
                label {Media Info}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiImageInfo->uiMain->show();
v->uiView->update_image_info();}
                }
              MenuItem {} {
                label {Color Info}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiColorArea->uiMain->show();
v->uiView->update_color_info();}
                }
              MenuItem {} {
                label {EDL Edit}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiEDLWindow->uiMain->show();}
                }
              MenuItem {} {
                label {Paint Tools}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiPaint->uiMain->show();}
                }
              MenuItem {} {
                label 3dView
                user_data this user_data_type {ViewerUI*}
                callback {v->uiGL3dView->uiMain->show();}
                }
              MenuItem {} {
                label Histogram
                user_data this user_data_type {ViewerUI*}
                callback {v->uiHistogram->uiMain->show();}
                }
              MenuItem {} {
                label Vectorscope
                user_data this user_data_type {ViewerUI*}
                callback {v->uiVectorscope->uiMain->show();}
                }
              MenuItem {} {
                label {ICC Profiles}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiICCProfiles->fill();
v->uiICCProfiles->uiMain->show();}
                }
              MenuItem {} {
                label Connections
                user_data this user_data_type {ViewerUI*}
                callback {v->uiConnection->uiMain->child_of( v->uiMain );
v->uiConnection->uiMain->show();}
                }
              MenuItem {} {
                label Preferences
                user_data this user_data_type {ViewerUI*}
                callback {v->uiPrefs->uiMain->child_of( v->uiMain );
v->uiPrefs->uiMain->show();}
                }
              MenuItem {} {
                label Hotkeys
                user_data this user_data_type {ViewerUI*}
                callback {v->uiHotkey->uiMain->child_of( v->uiMain );
v->uiHotkey->uiMain->show();}
                }
              MenuItem {} {
                label Logs
                user_data this user_data_type {ViewerUI*}
                callback {v->uiLog->uiMain->show();}
                }
              MenuItem {} {
                label About
                user_data this user_data_type {ViewerUI*}
                callback {v->uiAbout->uiMain->show();}
                }
            }
            Fl_Group {} {open
              xywh {30 5 90 20} color 0x53535300
            } {
              Fl_Menu_Button uiColorChannel {
                label {(no image)}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiView->channel( o->get_item() );} open
                tooltip {Allows you to select different image channels or layers.}
                xywh {0 0 90 19} type normal
                class {mrv::PopupMenu}
              } {}
            }
            Fl_Group {} {
              xywh {130 5 264 20} color 0x53535300
            } {
              Fl_Group {} {open
                xywh {0 0 264 20}
              } {
                Fl_Box {} {
                  label Gain
                  xywh {0 0 28 17} align 32
                }
                Fl_Value_Input uiGainInput {
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->gain( (float) o->value() );
v->uiGain->value( (float) o->value() );}
                  tooltip {Gain image value.  A simple multiplier of the image pixel values.}
                  xywh {30 0 35 18} when CHANGED color 0x98a8a800 textcolor 0x3030300 selection_color 0xe8e8d800 labelcolor 0xababab00 minimum 0.01 maximum 1024 step 0.001 value 1
                  extra_code {o->textsize( 12 );}
                }
                {fltk::Slider} uiGain {
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->gain( (float) o->value() );
v->uiGainInput->value( (float) o->value() );}
                  tooltip {Allows you to adjust the gain or exposure of the image.}
                  xywh {65 0 70 18} type {LOG|fltk::Slider::TICK_ABOVE} minimum 0.015625 maximum 64 value 1 slider_size 10
                }
                Fl_Group {} {open
                  xywh {135 0 95 19}
                } {
                  Fl_Button {} {
                    label {@<}
                    user_data this user_data_type {ViewerUI*}
                    callback {v->uiView->exposure_change(-0.5f);}
                    tooltip {Decrease exposure by 0.5.}
                    xywh {0 0 16 19}
                  }
                  Fl_Button uiFstop {
                    label {+0.0  f/8.0}
                    user_data this user_data_type {ViewerUI*}
                    callback {static float old_gain = 1.0f;
float gain = v->uiView->gain();
if ( gain == 1.0f )
{
v->uiView->gain( old_gain );
v->uiGainInput->value( old_gain );
v->uiGain->value( old_gain );
}
else
{
old_gain = gain;
v->uiView->gain( 1.0f );
v->uiGain->value( 1.0f );
v->uiGainInput->value( 1.0f );
}}
                    tooltip {Displays gain as film exposure and fstop.
Click to toggle between current and normal exposure.}
                    xywh {15 0 64 19} labelfont 1
                    extra_code {o->labelsize( 12 );}
                  }
                  Fl_Button {} {
                    label {@>}
                    user_data this user_data_type {ViewerUI*}
                    callback {v->uiView->exposure_change(0.5f);}
                    tooltip {Increase exposure by 0.5.}
                    xywh {79 0 16 19}
                  }
                }
                Fl_Button uiNormalize {
                  label Norm
                  user_data this user_data_type {ViewerUI*}
                  callback {v->uiView->toggle_normalize();}
                  tooltip {Normalize pixel values to remain in [0,1] range.}
                  xywh {233 0 30 19} type TOGGLE
                }
              }
            }
            Fl_Group {} {
              xywh {405 5 155 20} color 0x53535300
            } {
              Fl_Group {} {open
                xywh {0 0 155 20}
              } {
                Fl_Group {} {open
                  xywh {0 0 155 20}
                } {
                  Fl_Menu_Button gammaDefaults {
                    label Gamma
                    user_data this user_data_type {ViewerUI*}
                    callback {float g = (float) atof( o->child( o->value() )->label() );
v->uiGamma->value(g);
v->uiGammaInput->value( g );
v->uiView->gamma(g);}
                    tooltip {Some default gamma settings.}
                    xywh {0 0 50 19} box UP_BOX
                    class {mrv::PopupMenu}
                  } {
                    MenuItem {} {
                      label {2.2}
                      }
                    MenuItem {} {
                      label {1.8}
                      }
                    MenuItem {} {
                      label {1.00}
                      }
                    MenuItem {} {
                      label {0.55}
                      }
                    MenuItem {} {
                      label {0.45}
                      }
                  }
                  Fl_Value_Input uiGammaInput {
                    user_data this user_data_type {ViewerUI*}
                    callback {v->uiView->gamma( (float) o->value() );
v->uiGamma->value( (float) o->value() );}
                    tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );}
                    xywh {50 0 35 18} when CHANGED color 0x98a8a800 textcolor 0x3030300 selection_color 0xe8e8d800 labelcolor 0xababab00 highlight_textcolor 56 minimum 0.015625 maximum 64 step 0.01 value 1
                    extra_code {o->textsize(12);}
                  }
                  {fltk::Slider} uiGamma {
                    user_data this user_data_type {ViewerUI*}
                    callback {v->uiView->gamma( (float) o->value() );
v->uiGammaInput->value( (float) o->value() );}
                    tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );}
                    xywh {85 0 60 18} type {LOG|fltk::Slider::TICK_ABOVE} minimum 0.25 maximum 4 step 0.01 value 0.25 slider_size 10
                  }
                }
              }
            }
            Fl_Group {} {
              xywh {550 5 80 20}
            } {
              Fl_Menu_Button uiField {
                label F
                user_data this user_data_type {ViewerUI*}
                callback {v->uiView->field( (mrv::ImageView::FieldDisplay) o->value() );} open
                tooltip {Changes frame/field display}
                xywh {0 0 20 20}
                extra_code {o->disable_glyph();}
                class {mrv::PopupMenu}
              } {
                MenuItem {} {
                  label Frame
                  }
                MenuItem {} {
                  label {Top Field}
                  }
                MenuItem {} {
                  label {Bottom Field}
                  }
              }
              Fl_Button uiPixelRatio {
                label {1:1}
                user_data this user_data_type {ViewerUI*}
                callback {v->uiView->toggle_pixel_ratio();}
                tooltip {Stretch image to compensate for image's pixel ratio.}
                xywh {20 0 30 20} type TOGGLE shortcut 0x40070
              }
              Fl_Button uiLUT {
                label LUT
                user_data this user_data_type {ViewerUI*}
                callback {v->uiView->toggle_lut();}
                tooltip {Activate viewer's 3D Lut.}
                xywh {50 0 30 20} type TOGGLE shortcut 0x74
              }
            }
          }
          Fl_Group uiViewGroup {
            xywh {0 28 640 430} resizable
            class Fl_Group
          } {
            Fl_Group uiView {
              xywh {0 0 640 430}
              extra_code {o->main(this);}
              class {mrv::ImageView}
            } {}
          }
          Fl_Group uiPixelBar {
            xywh {0 458 640 28} box FLAT_BOX color 56
          } {
            Fl_Group {} {open
              xywh {2 0 634 25}
            } {
              Fl_Menu_Button uiZoom {
                label x1
                user_data this user_data_type {ViewerUI*}
                callback {int t = o->value();
float f;
if ( t < 8 )
{
f = 1 / (float) (9-t);
}
else if ( t == 17 )
{
v->uiView->fit_image();
return;
}
else
{
f = float(t - 7);
}
v->uiView->zoom( f );
o->value(8);}
                tooltip {Image zoom setting.}
                xywh {3 3 26 20} box UP_BOX buttonbox BORDER_BOX color 0x53535300 textcolor 0xababab00 buttoncolor 0x53535300 labelcolor 0xababab00 labelsize 10 textsize 10
                extra_code {o->value(10);
o->disable_glyph();}
                class {mrv::PopupMenu}
              } {
                MenuItem {} {
                  label {1/9}
                  }
                MenuItem {} {
                  label {1/8}
                  }
                MenuItem {} {
                  label {1/7}
                  }
                MenuItem {} {
                  label {1/6}
                  }
                MenuItem {} {
                  label {1/5}
                  }
                MenuItem {} {
                  label {1/4}
                  }
                MenuItem {} {
                  label {1/3}
                  }
                MenuItem {} {
                  label {1/2}
                  }
                MenuItem {} {
                  label x1
                  }
                MenuItem {} {
                  label x2
                  }
                MenuItem {} {
                  label x3
                  }
                MenuItem {} {
                  label x4
                  }
                MenuItem {} {
                  label x5
                  }
                MenuItem {} {
                  label x6
                  }
                MenuItem {} {
                  label x7
                  }
                MenuItem {} {
                  label x8
                  }
                MenuItem {} {
                  label x9
                  }
                MenuItem {} {
                  label FIT
                  }
              }
              Fl_Group {} {
                xywh {29 0 605 25}
              } {
                {fltk::Output} uiCoord {
                  label XY
                  tooltip {Image coordinate of pixel under mouse.}
                  xywh {0 3 85 20} align 36 box NO_BOX labelfont 4 color 56 textcolor 0xababab00 labelcolor 0xababab00 labelsize 10 textsize 10
                }
                Fl_Group {} {
                  xywh {85 0 520 25}
                } {
                  Fl_Group {} {
                    xywh {0 0 520 25}
                  } {
                    Fl_Group {} {
                      xywh {0 3 230 22}
                    } {
                      Fl_Menu_Button uiAColorType {
                        label RGBA
                        user_data uiView user_data_type {mrv::ImageView*}
                        callback {int i = o->value();
if ( i < 0 ) return;
o->label( o->child(i)->label() );} open
                        tooltip {Switch RGBA display between floating point, hexadecimal (0..0xff) and decimal (0..255).}
                        xywh {0 0 30 20} labelsize 9
                        extra_code {o->value(0);
o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        MenuItem {} {
                          label RGBA
                          }
                        MenuItem {} {
                          label Hex
                          }
                        MenuItem {} {
                          label 8bit
                          }
                      }
                      {fltk::Output} uiPixelR {
                        tooltip {Red value of image pixel under mouse.}
                        xywh {30 0 50 22} align 36 box NO_BOX color 56 textcolor 0xff6a6a00 textsize 10
                      }
                      {fltk::Output} uiPixelG {
                        tooltip {Green value of image pixel under mouse.}
                        xywh {80 0 50 22} align 36 box NO_BOX color 56 textcolor 0x92ff9200 textsize 10
                      }
                      {fltk::Output} uiPixelB {
                        tooltip {Blue value of image pixel under mouse.}
                        xywh {130 0 50 22} align 36 box NO_BOX color 56 textcolor 0x42b5ff00 textsize 10
                      }
                      {fltk::Output} uiPixelA {
                        tooltip {Alpha value of image pixel under mouse.}
                        xywh {180 0 50 22} align 36 box NO_BOX color 56 textcolor 0xcccccc00 textsize 10
                      }
                    }
                    {fltk::Output} uiPixelView {
                      tooltip {8-bit sample of image pixel under mouse.}
                      xywh {249 2 20 20} box FLAT_BOX color 0x53535300
                    }
                    Fl_Group {} {
                      xywh {275 3 173 22}
                    } {
                      Fl_Menu_Button uiBColorType {
                        label HSV
                        user_data uiView user_data_type {mrv::ImageView*}
                        callback {int i = o->value();
if ( i < 0 ) return;
o->label( mrv::color::space2id( (mrv::color::Space) (i+1)) );
v->update_color_info();} open
                        tooltip {Switch pixel color space information display for the pixel under the cursor.}
                        xywh {0 0 23 20} labelsize 9
                        extra_code {o->value(0);
o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        MenuItem {} {
                          label HSV
                          }
                        MenuItem {} {
                          label HSL
                          }
                        MenuItem {} {
                          label {XYZ CIE XYZ}
                          }
                        MenuItem {} {
                          label {xyY CIE xyY}
                          }
                        MenuItem {} {
                          label {Lab CIELAB (L*a*b*)}
                          }
                        MenuItem {} {
                          label {Luv CIELUV (L*u*v*)}
                          }
                        MenuItem {} {
                          label {YUV (Analog PAL)}
                          }
                        MenuItem {} {
                          label {YDbDr (Analog SECAM/PAL-N)}
                          }
                        MenuItem {} {
                          label {YIQ (Analog NTSC)}
                          }
                        MenuItem {} {
                          label {ITU-601 (Digital PAL/NTSC YCbCr)}
                          }
                        MenuItem {} {
                          label {ITU-709 (Digital HDTV YCbCr)}
                          }
                      }
                      {fltk::Output} uiPixelH {
                        tooltip {Hue value of image pixel under mouse.}
                        xywh {23 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b20000 textsize 10
                      }
                      {fltk::Output} uiPixelS {
                        tooltip {Saturation value of image pixel under mouse.}
                        xywh {73 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b20000 textsize 10
                      }
                      {fltk::Output} uiPixelV {
                        tooltip {Value (Intensity) of image pixel under mouse.}
                        xywh {123 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b20000 textsize 10
                      }
                    }
                    Fl_Menu_Button uiPixelValue {
                      label F
                      user_data uiView user_data_type {mrv::ImageView*}
                      callback {int i = o->value();
if ( i < 0 ) return;
char t[2];
t[1] = 0;
t[0] = o->child(i)->label()[0];
o->label( strdup(t) );
v->update_color_info();}
                      tooltip {Type of pixel values to show:
+ Full:  pixel with gamma, gain and lut.
+ Gamma: pixel with gamma and gain but no lut.
+ Original: pixel without gamma, gain or lut.}
                      xywh {234 3 13 20} align 48
                      extra_code {o->value(0);
o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label Full
                        }
                      MenuItem {} {
                        label Gamma
                        }
                      MenuItem {} {
                        label Original
                        }
                    }
                    Fl_Group {} {
                      xywh {451 3 65 22}
                    } {
                      Fl_Menu_Button uiLType {
                        label Y
                        callback {int x = o->value();
const char* lbl = o->child(x)->label();
const char name[3] = { lbl[0], lbl[1], 0 };
o->copy_label( name );}
                        tooltip {Switch brightness calculation.

Y (Luminance) is the pixel value according to Rec709:
      Y = 0.2126 R + 0.7152 G + 0.0722 B

Y' (Lumma) is the weighted pixel value according to:
      Y' = ( R + G + B ) / 3.0

L (Lightness) is the human perception of luminance of the image which is non linear.
According to CIE No.15.2:
      L = (116 * Y ^ 1/3 - 16) / 100
A pixel of Y = 0.18 (L = 0.5) will appear about half as bright as Y = L = 1.0 (white).}
                        xywh {0 0 15 20}
                        extra_code {o->value(0);
o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        MenuItem {} {
                          label {Y (Luminance)}
                          }
                        MenuItem {} {
                          label {Y' (Lumma)}
                          
                        }
                        MenuItem {} {
                          label {L (Lightness)}
                          tooltip {Lightness is the human perceptual response to luminance Y, according to CIE No.15.2:

      L = 116 * (Y/Yn)^1/3 - 16

where Yn is the white reference (usually 1).
     }
                          
                        }
                      }
                      {fltk::Output} uiPixelL {
                        tooltip {Luminance of image pixel under mouse.}
                        xywh {15 0 50 22} align 36 box NO_BOX color 56 textcolor 0xb2b2b200 textsize 10
                      }
                    }
                  }
                }
              }
            }
          }
          Fl_Group uiBottomBar {
            xywh {0 486 640 49} box ENGRAVED_BOX
          } {
            Fl_Group uiTimeToolbar {open
              xywh {0 0 640 49}
            } {
              Fl_Group {} {open
                xywh {0 0 640 49}
              } {
                {fltk::Slider} uiTimeline {
                  user_data this user_data_type {ViewerUI*}
                  callback {int64_t frame = (int64_t) o->value();
v->uiView->seek( frame );}
                  tooltip {Timeline.}
                  xywh {5 3 610 21} type TICK_ABOVE resizable textfont 1 textcolor 0x2020200 textsize 12 minimum 1 maximum 50 step 1 value 1 slider_size 10
                  extra_code {o->main( this );}
                  class {mrv::Timeline}
                }
                Fl_Menu_Button uiLoopMode {
                  label {@b;L}
                  user_data this user_data_type {ViewerUI*}
                  callback {int c = o->value();
o->label(o->child(c)->label());
v->uiView->looping( (mrv::ImageView::Looping)c );} open
                  tooltip {Looping Behavior ( Stop, Loop, Ping-Pong )}
                  xywh {615 2 21 23} box UP_BOX
                  class {mrv::PopupMenu}
                } {
                  MenuItem {} {
                    label {@||}
                    }
                  MenuItem {} {
                    label {@b;L}
                    }
                  MenuItem {} {
                    label {@<->}
                    }
                }
                Fl_Group {} {open
                  xywh {0 23 640 26}
                } {
                  Fl_Group {} {open
                    xywh {4 4 94 20}
                  } {
                    Fl_Menu_Button uiTimecodeSwitch {
                      label {F:}
                      user_data this user_data_type {ViewerUI*}
                      callback {change_timeline_display(v);} open
                      tooltip {Switch between Frame, Seconds and Timecode display}
                      xywh {0 0 20 20} box DOWN_BOX
                      extra_code {o->disable_glyph();}
                      class {mrv::PopupMenu}
                    } {
                      MenuItem {} {
                        label Frames
                        }
                      MenuItem {} {
                        label Seconds
                        }
                      MenuItem {} {
                        label Time
                        }
                      MenuItem {} {
                        label {Non-Drop Frame Timecode}
                        }
                      MenuItem {} {
                        label {Drop Frame Timecode}
                        }
                    }
                    {fltk::Input} uiFrame {
                      label F
                      user_data this user_data_type {ViewerUI*}
                      callback {int64_t f = o->value();
if ( f < v->uiTimeline->minimum() )
   f = int64_t( v->uiTimeline->minimum() );
else if ( f > v->uiTimeline->maximum() )
   f = int64_t( v->uiTimeline->maximum() );
v->uiView->seek( f );}
                      tooltip {Current frame.}
                      xywh {20 0 70 20} color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                      extra_code {o->value(1);}
                      class {mrv::Timecode}
                    }
                  }
                  Fl_Group {} {open
                    xywh {95 2 360 23} resizable
                  } {
                    Fl_Group {} {open
                      xywh {0 1 215 22}
                    } {
                      Fl_Button {} {
                        label {@|<}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->first_frame();}
                        tooltip {Go to the beginning of the sequence.}
                        xywh {3 2 30 18} labelcolor 0x98a8a800
                      }
                      Fl_Button uiPlayBackwards {
                        label {@<}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->play_backwards();}
                        tooltip {Play sequence backwards.}
                        xywh {33 2 30 18} labelcolor 0x98a8a800
                      }
                      Fl_Button {} {
                        label {@<|}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->step_frame(-1);}
                        tooltip {Go back one frame.}
                        xywh {63 2 30 18} labelcolor 0x98a8a800
                      }
                      Fl_Button {} {
                        label {@||}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->stop();}
                        tooltip {Stop playback.}
                        xywh {93 2 30 18} labelcolor 0x98a8a800
                      }
                      Fl_Button {} {
                        label {@|>}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->step_frame(1);}
                        tooltip {Advance one frame.}
                        xywh {123 2 30 18} labelcolor 0x98a8a800
                      }
                      Fl_Button uiPlayForwards {
                        label {@>}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->play_forwards();}
                        tooltip {Play sequence forward.}
                        xywh {153 2 30 18} labelcolor 0x98a8a800
                      }
                      Fl_Button {} {
                        label {@>|}
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->last_frame();}
                        tooltip {Go to the end of the sequence.}
                        xywh {183 2 30 18} labelcolor 0x98a8a800
                      }
                    }
                    Fl_Group {} {open
                      xywh {220 0 65 21}
                    } {
                      Fl_Menu_Button fpsDefaults {
                        label FPS
                        user_data this user_data_type {ViewerUI*}
                        callback {int c = o->value();

double g;
mrv::media fg = v->uiView->foreground();

if ( c <= 0 && fg )
    g = fg->image()->fps();
else
    g = atof( o->child( o->value() )->label() );

v->uiView->fps( g );
v->uiFPS->value( g );} open
                        tooltip {Some default frame rate settings.}
                        xywh {0 2 30 19} box UP_BOX labelsize 10
                        extra_code {o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {
                        MenuItem {} {
                          label Default
                          }
                        MenuItem {} {
                          label 60
                          }
                        MenuItem {} {
                          label {59.94}
                          }
                        MenuItem {} {
                          label 50
                          }
                        MenuItem {} {
                          label 30
                          }
                        MenuItem {} {
                          label {29.97}
                          }
                        MenuItem {} {
                          label 25
                          }
                        MenuItem {} {
                          label 24
                          }
                        MenuItem {} {
                          label {23.97}
                          }
                        MenuItem {} {
                          label 15
                          }
                        MenuItem {} {
                          label {14.985}
                          }
                        MenuItem {} {
                          label {12.5}
                          }
                        MenuItem {} {
                          label 12
                          }
                      }
                      {fltk::Input} uiFPS {
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->fps( o->value() );}
                        tooltip {Allows you to adjust frame rate playback.}
                        xywh {29 2 35 18} when CHANGED color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                        extra_code {o->textcolor( fltk::BLACK );
o->value(24);}
                        class {fltk::ValueInput}
                      }
                    }
                    Fl_Group {} {open
                      xywh {287 2 73 19}
                    } {
                      Fl_Menu_Button uiAudioTracks {
                        label A
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->audio_stream( o->value() );}
                        tooltip {Select Audio Track}
                        xywh {0 0 18 19} when CHANGED box UP_BOX labelsize 10
                        extra_code {o->disable_glyph();}
                        class {mrv::PopupMenu}
                      } {}
                      {fltk::Slider} uiVolume {
                        user_data this user_data_type {ViewerUI*}
                        callback {v->uiView->volume((float) o->value() );}
                        tooltip {Audio Volume}
                        xywh {18 2 55 15} type TICK_ABOVE align 4 step 0.01 value 1
                      }
                    }
                  }
                  Fl_Group {} {open
                    xywh {455 0 180 24}
                  } {
                    {fltk::Input} uiStartFrame {
                      label S
                      user_data this user_data_type {ViewerUI*}
                      callback {double f = (double) o->value();
v->uiTimeline->minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      tooltip {Allows you to set starting frame for timeline.}
                      xywh {20 4 70 20} when CHANGED color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                      extra_code {o->value(1);}
                      class {mrv::Timecode}
                    }
                    {fltk::Input} uiEndFrame {
                      label E
                      user_data this user_data_type {ViewerUI*}
                      callback {boost::int64_t f = o->value();
v->uiTimeline->maximum( float(f) );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      tooltip {Allows you to set the ending frame for timeline.}
                      xywh {110 4 70 20} when CHANGED color 0x98a8a800 selection_color 0xe8e8d800 labelcolor 0xababab00
                      extra_code {o->value(50);}
                      class {mrv::Timecode}
                    }
                    Fl_Button uiStartButton {
                      label S
                      user_data this user_data_type {ViewerUI*}
                      callback {double f;
Image_ptr img = NULL;
mrv::media fg = v->uiView->foreground();
if ( fg )
{
  img = fg->image();
}


if ( !o->value() )
{
  o->value(1);
  f = (double) v->uiFrame->value();
}
else
{
  o->value(0);
  f = img->first_frame();
}

v->uiStartFrame->value( f );
v->uiTimeline->minimum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      xywh {1 4 20 20} 
                    }
                    Fl_Button uiEndButton {
                      label E
                      user_data this user_data_type {ViewerUI*}
                      callback {double f;
if ( !o->value() )
{
  o->value(1);
  f = (double) v->uiFrame->value();
}
else
{
  o->value(0);
  mrv::media fg = v->uiView->foreground();
  if ( fg )
  {
    Image_ptr img = fg->image();
    f = img->last_frame();
  }
}

v->uiEndFrame->value( f );
v->uiTimeline->maximum( f );
v->uiTimeToolbar->redraw();
v->uiTimeline->redraw();}
                      xywh {91 4 20 20} 
                    }
                  }
                }
              }
            }
          }
        }
      }
      code {uiReelWindow = new ReelUI(this);
uiImageInfo = new ImageInfoUI(this);
uiColorArea = new ColorAreaUI(this);
uiGL3dView = new GL3dViewUI(this);
uiVectorscope = new VectorscopeUI(this);
uiHistogram = new HistogramUI(this);
uiPaint = new PaintUI(this);
if (!uiLog) uiLog   = new LogUI(this);
if (!uiAbout) uiAbout = new AboutUI(this); // should be static

if (!uiConnection) uiConnection = new ConnectionUI( this );

uiHotkey = new HotkeyUI(this);
uiICCProfiles = new ICCProfileListUI(this);
uiEDLWindow = new EDLWindowUI(this);

// read and use preferences
mrv::Preferences prefs( uiPrefs );

//uiHotkey = new HotkeyUI(this);
//uiICCProfiles = new ICCProfileListUI(this);
//uiEDLWindow = new EDLWindowUI(this);} {}
    }
    Function {ViewerUI()} {} {
      code {uiMain = make_window();} {}
    }
    Function {~ViewerUI()} {open
    } {
      code {delete uiICCProfiles; uiICCProfiles = NULL;
delete uiImageInfo; uiImageInfo = NULL;
delete uiColorArea; uiColorArea = NULL;
delete uiHistogram; uiHistogram = NULL;
delete uiVectorscope; uiVectorscope = NULL;
delete uiGL3dView; uiGL3dView = NULL;
delete uiAbout; uiAbout = NULL;
delete uiLog; uiLog = NULL;
delete uiPaint; uiPaint = NULL;
delete uiEDLWindow; uiEDLWindow = NULL;
delete uiMain; uiMain = NULL;
delete uiReelWindow; uiReelWindow = NULL;} {}
    }
  }
} 
