// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "/media/Linux/code/applications/mrViewer/mrViewer/src/fl/BUILD/Linux-3.16.0-60-generic-64/Release/tmp/EXROptionsUI.h"
#include <iostream>
#include <fltk/run.h>

Fl_Menu_Item EXROptionsUI::menu_uiCompression[] = {
 {"None", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"RLE", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"ZIP SCANLINE", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"ZIP", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"PIZ", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"PXR24", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"B44", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"B44A", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"DWAA", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"DWAB", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EXROptionsUI::menu_uiPixelFormat[] = {
 {"Half", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Float", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"UInt", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void EXROptionsUI::cb_OK_i(Fl_Button*, EXROptionsUI* v) {
  v->active( true );
v->uiMain->make_exec_return(true);
}
void EXROptionsUI::cb_OK(Fl_Button* o, EXROptionsUI* v) {
  ((EXROptionsUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void EXROptionsUI::cb_Cancel_i(Fl_Button*, EXROptionsUI* v) {
  v->active( false );
v->uiMain->make_exec_return(false);
}
void EXROptionsUI::cb_Cancel(Fl_Button* o, EXROptionsUI* v) {
  ((EXROptionsUI*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

mrvDoubleWindow* EXROptionsUI::make_window(bool aces, bool all_layers) {
  { uiMain = new mrvDoubleWindow(295, 435);
    uiMain->box(FL_FLAT_BOX);
    uiMain->color(FL_BACKGROUND_COLOR);
    uiMain->selection_color(FL_BACKGROUND_COLOR);
    uiMain->labeltype(FL_NO_LABEL);
    uiMain->labelfont(0);
    uiMain->labelsize(14);
    uiMain->labelcolor(FL_FOREGROUND_COLOR);
    uiMain->user_data((void*)(this));
    uiMain->align(Fl_Align(FL_ALIGN_TOP));
    uiMain->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(25, 30, 255, 325, "OpenEXR Options");
      o->box(FL_UP_BOX);
      { uiCompression = new Fl_Choice(70, 65, 150, 30, "Compression");
        uiCompression->down_box(FL_BORDER_BOX);
        uiCompression->align(Fl_Align(FL_ALIGN_TOP));
        uiCompression->menu(menu_uiCompression);
      } // Fl_Choice* uiCompression
      { uiPixelFormat = new Fl_Choice(70, 120, 150, 30, "Pixel Format");
        uiPixelFormat->down_box(FL_BORDER_BOX);
        uiPixelFormat->align(Fl_Align(FL_ALIGN_TOP));
        uiPixelFormat->menu(menu_uiPixelFormat);
      } // Fl_Choice* uiPixelFormat
      { Fl_Value_Slider* o = uiDWACompression = new Fl_Value_Slider(170, 164, 85, 36, "DWA Compression");
        uiDWACompression->tooltip("DWAA/DWAB compression");
        uiDWACompression->type(1);
        uiDWACompression->minimum(1);
        uiDWACompression->maximum(250);
        uiDWACompression->step(10);
        uiDWACompression->value(45);
        uiDWACompression->slider_size(1);
        uiDWACompression->textsize(14);
        uiDWACompression->align(Fl_Align(FL_ALIGN_LEFT));
        uiDWACompression->deactivate();
        o->value( mrv::exrImage::_default_dwa_compression );
      } // Fl_Value_Slider* uiDWACompression
      { Fl_Light_Button* o = uiAllLayers = new Fl_Light_Button(70, 215, 150, 35, "All Layers");
        o->value( all_layers );
      } // Fl_Light_Button* uiAllLayers
      { Fl_Light_Button* o = uiACESmetadata = new Fl_Light_Button(70, 275, 150, 35, "ACES metadata");
        o->value(aces);
      } // Fl_Light_Button* uiACESmetadata
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(55, 380, 75, 30, "OK");
      o->callback((Fl_Callback*)cb_OK, (void*)(this));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(150, 380, 75, 30, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel, (void*)(this));
    } // Fl_Button* o
    uiMain->end();
  } // mrvDoubleWindow* uiMain
  return uiMain;
}

void EXROptionsUI::convert() {
  _compression = (Imf::Compression) uiCompression->value();
  _dwa_compression_level = (float) uiDWACompression->value();
  _ACESmetadata = uiACESmetadata->value();
  _all_layers = uiAllLayers->value();
  if ( pixel_type == "Half" ) _pixel_type = Imf::HALF;
  else if ( pixel_type == "Float" ) _pixel_type = Imf::FLOAT;
  else if ( pixel_type == "UInt" ) _pixel_type = Imf::UINT;
}

EXROptionsUI::EXROptionsUI( bool aces , bool all_layers ) : EXROpts( aces, all_layers ) {
  mrvDoubleWindow* w = make_window(aces, all_layers);
  if ( w->exec() ) {
  	w->hide();
  	fltk::check();
  	convert();
  }
}
