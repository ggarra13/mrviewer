// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef mrViewer_h
#define mrViewer_h
#include <FL/Fl.H>
#include "string"
#include "gui/mrvCTLBrowser.h"
#include "gui/mrvPopupMenu.h"
#include "gui/mrvGlWindow3d.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
extern mrv::CTLBrowser *browser;
#include <FL/Fl_Button.H>
std::string make_ctl_browser(std::string ctl, const char* prefix);
class Browser;
class Histogram;
class ImageBrowser;
class ImageInformation;
class ImageView;
class LogDisplay;
class MainWindow;
class PreferencesBrowser;
class Timecode;
class Timeline;
class Vectorscope;
class ViewerUI;
class ICCProfileListUI;
class ColorAreaUI;
class GL3dViewUI;
class HotkeyUI;
class PaintUI;
class ConnectionUI;
class EDLWindowUI;
#include <FL/Fl_Choice.H>

class ReelUI {
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
  mrv::ImageBrowser *uiBrowser;
private:
  inline void cb__i(Fl_Choice*, mrv::ImageBrowser*);
  static void cb_(Fl_Choice*, mrv::ImageBrowser*);
public:
  Fl_Group *uiReelOps;
private:
  inline void cb_1_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_1(Fl_Button*, mrv::ImageBrowser*);
  inline void cb_2_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_2(Fl_Button*, mrv::ImageBrowser*);
  inline void cb_3_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_3(Fl_Button*, mrv::ImageBrowser*);
public:
  Fl_Group *uiImageOps;
private:
  inline void cb_4_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_4(Fl_Button*, mrv::ImageBrowser*);
  inline void cb_5_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_5(Fl_Button*, mrv::ImageBrowser*);
  inline void cb_6_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_6(Fl_Button*, mrv::ImageBrowser*);
  inline void cb_7_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_7(Fl_Button*, mrv::ImageBrowser*);
public:
  Fl_Group *uiViewerOps;
private:
  inline void cb_CTL_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_CTL(Fl_Button*, mrv::ImageBrowser*);
public:
  Fl_Button *uiBGButton;
private:
  inline void cb_uiBGButton_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_uiBGButton(Fl_Button*, mrv::ImageBrowser*);
public:
  Fl_Button *uiEDLButton;
private:
  inline void cb_uiEDLButton_i(Fl_Button*, mrv::ImageBrowser*);
  static void cb_uiEDLButton(Fl_Button*, mrv::ImageBrowser*);
public:
  ReelUI(ViewerUI* m);
  ~ReelUI();
};

class ImageInfoUI {
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
  mrv::ImageInformation *uiInfoText;
  ImageInfoUI(ViewerUI* m);
  ~ImageInfoUI();
};
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Browser.H>

class AboutUI {
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
private:
  inline void cb_8_i(Fl_Tabs*, mrv::ViewerUI*);
  static void cb_8(Fl_Tabs*, mrv::ViewerUI*);
public:
  Fl_Text_Display *uiCPUInfo;
  mrv::Browser *uiGPUInfo;
  AboutUI(ViewerUI* m);
  ~AboutUI();
};

class GL3dViewUI {
  mrv::ViewerUI* main_; 
  mrv::GlWindow3d* make_window(ViewerUI* main);
public:
  mrv::GlWindow3d *uiMain;
private:
  inline void cb_uiMain_i(mrv::GlWindow3d*, GL3dViewUI*);
  static void cb_uiMain(mrv::GlWindow3d*, GL3dViewUI*);
public:
  GL3dViewUI(ViewerUI* m);
  ~GL3dViewUI();
  mrv::ViewerUI* main();
};

class VectorscopeUI {
  mrv::ViewerUI* main_; 
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
private:
  inline void cb_uiMain1_i(Fl_Double_Window*, VectorscopeUI*);
  static void cb_uiMain1(Fl_Double_Window*, VectorscopeUI*);
public:
  mrv::Vectorscope *uiVectorscope;
  VectorscopeUI(ViewerUI* m);
  ~VectorscopeUI();
  mrv::ViewerUI* main();
};
#include <FL/Fl_Pack.H>

class HistogramUI {
  mrv::ViewerUI* main_; 
  Fl_Double_Window* make_window(mrv::ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
private:
  inline void cb_uiMain2_i(Fl_Double_Window*, HistogramUI*);
  static void cb_uiMain2(Fl_Double_Window*, HistogramUI*);
public:
  mrv::Histogram *uiHistogram;
  HistogramUI(ViewerUI* m);
  ~HistogramUI();
  mrv::ViewerUI* main();
};
#include <FL/Fl_Wizard.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Slider.H>

class PreferencesUI {
  Fl_Double_Window* make_window(mrv::ViewerUI* m);
public:
  Fl_Double_Window *uiMain;
  Fl_Wizard *uiWizard;
  Fl_Check_Button *uiPrefsAlwaysOnTop;
  Fl_Check_Button *uiPrefsSingleInstance;
  Fl_Check_Button *uiPrefsAutoFitImage;
  Fl_Group *uiPrefsOpenMode;
  Fl_Check_Button *uiPrefsTopbar;
  Fl_Check_Button *uiPrefsPixelToolbar;
  Fl_Check_Button *uiPrefsTimeline;
  Fl_Check_Button *uiPrefsReelList;
  Fl_Check_Button *uiPrefsHistogram;
  Fl_Check_Button *uiPrefsVectorscope;
  Fl_Check_Button *uiPrefsImageInfo;
  Fl_Check_Button *uiPrefsColorArea;
  Fl_Check_Button *uiPrefsEDLEdit;
  Fl_Choice *uiPrefsTimelineDisplay;
  static Fl_Menu_Item menu_uiPrefsTimelineDisplay[];
  Fl_Value_Input *uiPrefsViewGain;
  Fl_Value_Input *uiPrefsViewGamma;
  Fl_Choice *uiPrefsCropArea;
  static Fl_Menu_Item menu_uiPrefsCropArea[];
  Fl_Check_Button *uiPrefsViewPixelRatio;
  Fl_Check_Button *uiPrefsViewLut;
  Fl_Check_Button *uiPrefsSafeAreas;
  Fl_Check_Button *uiPrefsViewDisplayWindow;
  Fl_Check_Button *uiPrefsViewDataWindow;
  Fl_Group *uiPrefsHud;
  Fl_Check_Button *uiPrefsHudFilename;
  Fl_Check_Button *uiPrefsHudDirectory;
  Fl_Check_Button *uiPrefsHudFrame;
  Fl_Check_Button *uiPrefsHudFrameRange;
  Fl_Check_Button *uiPrefsHudResolution;
  Fl_Check_Button *uiPrefsHudFPS;
  Fl_Check_Button *uiPrefsHudIPTC;
  Fl_Check_Button *uiPrefsHudAVDifference;
  Fl_Check_Button *uiPrefsHudTimecode;
  Fl_Check_Button *uiPrefsHudWipeMode;
  Fl_Check_Button *uiPrefsHudMemory;
  Fl_Check_Button *uiWindowFixedPosition;
  Fl_Value_Input *uiWindowXPosition;
  Fl_Value_Input *uiWindowYPosition;
  Fl_Button *uiPrefsUIBG;
private:
  inline void cb_uiPrefsUIBG_i(Fl_Button*, void*);
  static void cb_uiPrefsUIBG(Fl_Button*, void*);
public:
  Fl_Button *uiPrefsUIText;
private:
  inline void cb_uiPrefsUIText_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_uiPrefsUIText(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Button *uiPrefsUISelection;
private:
  inline void cb_uiPrefsUISelection_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_uiPrefsUISelection(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Button *uiPrefsUISelectionText;
private:
  inline void cb_uiPrefsUISelectionText_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_uiPrefsUISelectionText(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Button *uiPrefsViewBG;
private:
  inline void cb_uiPrefsViewBG_i(Fl_Button*, void*);
  static void cb_uiPrefsViewBG(Fl_Button*, void*);
public:
  Fl_Button *uiPrefsViewTextOverlay;
private:
  inline void cb_uiPrefsViewTextOverlay_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_uiPrefsViewTextOverlay(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Button *uiPrefsViewSelection;
private:
  inline void cb_uiPrefsViewSelection_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_uiPrefsViewSelection(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Button *uiPrefsViewHud;
private:
  inline void cb_uiPrefsViewHud_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_uiPrefsViewHud(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Check_Button *uiPrefsFileReqFolder;
  Fl_Check_Button *uiPrefsNativeFileChooser;
  Fl_Group *Playback;
  Fl_Value_Input *uiPrefsFPS;
  Fl_Choice *uiPrefsLoopMode;
  static Fl_Menu_Item menu_uiPrefsLoopMode[];
  Fl_Check_Button *uiPrefsAutoPlayback;
  Fl_Check_Button *uiPrefsCacheActive;
  Fl_Check_Button *uiPrefs8BitCaches;
  Fl_Check_Button *uiPrefsPreloadCache;
  Fl_Choice *uiPrefsCacheScale;
  static Fl_Menu_Item menu_uiPrefsCacheScale[];
  Fl_Value_Slider *uiPrefsCacheSize;
  Fl_Light_Button *uiPrefsCacheFPS;
private:
  inline void cb_uiPrefsCacheFPS_i(Fl_Light_Button*, fltk::ValueSlider*);
  static void cb_uiPrefsCacheFPS(Fl_Light_Button*, fltk::ValueSlider*);
public:
  Fl_Choice *ODT_algorithm;
private:
  inline void cb_ODT_algorithm_i(Fl_Choice*, mrv::PreferencesUI*);
  static void cb_ODT_algorithm(Fl_Choice*, mrv::PreferencesUI*);
  static Fl_Menu_Item menu_ODT_algorithm[];
public:
  Fl_Choice *RT_algorithm;
private:
  inline void cb_RT_algorithm_i(Fl_Choice*, mrv::PreferencesUI*);
  static void cb_RT_algorithm(Fl_Choice*, mrv::PreferencesUI*);
  static Fl_Menu_Item menu_RT_algorithm[];
public:
  Fl_Choice *uiLUT_quality;
private:
  inline void cb_uiLUT_quality_i(Fl_Choice*, mrv::PreferencesUI*);
  static void cb_uiLUT_quality(Fl_Choice*, mrv::PreferencesUI*);
  static Fl_Menu_Item menu_uiLUT_quality[];
public:
  Fl_Choice *uiICC_intent;
private:
  inline void cb_uiICC_intent_i(Fl_Choice*, mrv::PreferencesUI*);
  static void cb_uiICC_intent(Fl_Choice*, mrv::PreferencesUI*);
  static Fl_Menu_Item menu_uiICC_intent[];
public:
  Fl_Browser *uiPrefsCTLModulePath;
  Fl_Browser *uiPrefsCTLScripts;
  Fl_Group *uiODT_CTL;
  Fl_Input *uiODT_CTL_transform;
private:
  inline void cb_uiODT_CTL_transform_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_transform(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Pick_i(Fl_Button*, void*);
  static void cb_Pick(Fl_Button*, void*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_red_x;
private:
  inline void cb_uiODT_CTL_chromaticities_red_x_i(Fl_Value_Input*, void*);
  static void cb_uiODT_CTL_chromaticities_red_x(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_red_y;
private:
  inline void cb_uiODT_CTL_chromaticities_red_y_i(Fl_Value_Input*, void*);
  static void cb_uiODT_CTL_chromaticities_red_y(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_green_x;
private:
  inline void cb_uiODT_CTL_chromaticities_green_x_i(Fl_Value_Input*, void*);
  static void cb_uiODT_CTL_chromaticities_green_x(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_green_y;
private:
  inline void cb_uiODT_CTL_chromaticities_green_y_i(Fl_Value_Input*, void*);
  static void cb_uiODT_CTL_chromaticities_green_y(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_blue_x;
private:
  inline void cb_uiODT_CTL_chromaticities_blue_x_i(Fl_Value_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_chromaticities_blue_x(Fl_Value_Input*, mrv::PreferencesUI*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_blue_y;
private:
  inline void cb_uiODT_CTL_chromaticities_blue_y_i(Fl_Value_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_chromaticities_blue_y(Fl_Value_Input*, mrv::PreferencesUI*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_white_x;
private:
  inline void cb_uiODT_CTL_chromaticities_white_x_i(Fl_Value_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_chromaticities_white_x(Fl_Value_Input*, mrv::PreferencesUI*);
public:
  Fl_Value_Input *uiODT_CTL_chromaticities_white_y;
private:
  inline void cb_uiODT_CTL_chromaticities_white_y_i(Fl_Value_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_chromaticities_white_y(Fl_Value_Input*, mrv::PreferencesUI*);
public:
  Fl_Value_Input *uiODT_CTL_white_luminance;
private:
  inline void cb_uiODT_CTL_white_luminance_i(Fl_Value_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_white_luminance(Fl_Value_Input*, mrv::PreferencesUI*);
public:
  Fl_Value_Input *uiODT_CTL_surround_luminance;
private:
  inline void cb_uiODT_CTL_surround_luminance_i(Fl_Value_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_CTL_surround_luminance(Fl_Value_Input*, mrv::PreferencesUI*);
public:
  Fl_Group *uiODT_ICC;
  Fl_Input *uiODT_ICC_profile;
private:
  inline void cb_uiODT_ICC_profile_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiODT_ICC_profile(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Load_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Load(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Group *uiRT_CTL;
  Fl_Input *uiCTL_8bits_load_transform;
private:
  inline void cb_uiCTL_8bits_load_transform_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiCTL_8bits_load_transform(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Pick1_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Pick1(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Input *uiCTL_16bits_load_transform;
private:
  inline void cb_uiCTL_16bits_load_transform_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiCTL_16bits_load_transform(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Pick2_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Pick2(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Input *uiCTL_32bits_load_transform;
private:
  inline void cb_uiCTL_32bits_load_transform_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiCTL_32bits_load_transform(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Pick3_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Pick3(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Input *uiCTL_float_load_transform;
private:
  inline void cb_uiCTL_float_load_transform_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiCTL_float_load_transform(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Pick4_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Pick4(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Group *uiRT_ICC;
  Fl_Input *uiICC_8bits_profile;
private:
  inline void cb_uiICC_8bits_profile_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiICC_8bits_profile(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Load1_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Load1(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Input *uiICC_16bits_profile;
private:
  inline void cb_uiICC_16bits_profile_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiICC_16bits_profile(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Load2_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Load2(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Input *uiICC_32bits_profile;
private:
  inline void cb_uiICC_32bits_profile_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiICC_32bits_profile(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Load3_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Load3(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Input *uiICC_float_profile;
private:
  inline void cb_uiICC_float_profile_i(Fl_Input*, mrv::PreferencesUI*);
  static void cb_uiICC_float_profile(Fl_Input*, mrv::PreferencesUI*);
  inline void cb_Load4_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Load4(Fl_Button*, mrv::PreferencesUI*);
public:
  Fl_Check_Button *uiPrefsLoadSequence;
  Fl_Choice *VideoDriver;
  static Fl_Menu_Item menu_VideoDriver[];
  Fl_Light_Button *uiPrefsStereoRightEyeInverted;
  Fl_Choice *uiPrefsBlendMode;
  static Fl_Menu_Item menu_uiPrefsBlendMode[];
  Fl_Choice *AudioDriver;
  Fl_Browser *uiPrefsAudioDevice;
  Fl_Slider *uiPrefsAudioVolume;
  Fl_Button *uiPrefsAudioMute;
private:
  inline void cb_uiPrefsAudioMute_i(Fl_Button*, fltk::Slider*);
  static void cb_uiPrefsAudioMute(Fl_Button*, fltk::Slider*);
public:
  Fl_Light_Button *uiPrefsACESClipMetadata;
  Fl_Light_Button *uiPrefsAllLayers;
  Fl_Value_Input *uiPrefsOpenEXRThreadCount;
  Fl_Value_Input *uiPrefsOpenEXRGamma;
  Fl_Choice *uiPrefsOpenEXRCompression;
private:
  inline void cb_uiPrefsOpenEXRCompression_i(Fl_Choice*, mrv::PreferencesUI*);
  static void cb_uiPrefsOpenEXRCompression(Fl_Choice*, mrv::PreferencesUI*);
  static Fl_Menu_Item menu_uiPrefsOpenEXRCompression[];
public:
  Fl_Value_Slider *uiPrefsOpenEXRDWACompression;
private:
  inline void cb_Module_i(mrv::PreferencesBrowser*, mrv::PreferencesUI*);
  static void cb_Module(mrv::PreferencesBrowser*, mrv::PreferencesUI*);
  inline void cb_Revert_i(Fl_Button*, mrv::PreferencesUI*);
  static void cb_Revert(Fl_Button*, mrv::PreferencesUI*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_OK(Fl_Button*, mrv::ViewerUI*);
public:
  PreferencesUI(mrv::ViewerUI* m);
  ~PreferencesUI();
  void refresh();
  void run(mrv::ViewerUI* m);
};
#include <FL/Fl_Return_Button.H>

class SaveOptionsUI {
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
  SaveOptionsUI(ViewerUI* m);
  ~SaveOptionsUI();
};
#include <FL/Fl_Value_Output.H>

class StatisticsUI {
public:
  Fl_Double_Window* make_window(ViewerUI* main);
  Fl_Double_Window *uiMain;
  Fl_Value_Output *uiVideoFramesDropped;
  Fl_Value_Output *uiVideoBlocksDecoded;
  Fl_Value_Output *uiAVDifference;
  Fl_Value_Output *uiAudioFramesDropped;
  Fl_Value_Output *uiAudioBlocksDecoded;
  Fl_Value_Output *uiInputRead;
  Fl_Value_Output *uiInputBitrate;
  Fl_Value_Output *uiStreamSent;
  Fl_Value_Output *uiStreamBitrate;
  Fl_Value_Output *uiStreamPackets;
  StatisticsUI(ViewerUI* m);
  ~StatisticsUI();
};

class LogUI {
public:
  Fl_Double_Window* make_window(ViewerUI* main);
  Fl_Double_Window *uiMain;
  mrv::LogDisplay *uiLogText;
private:
  inline void cb_Save1_i(Fl_Button*, mrv::LogDisplay*);
  static void cb_Save1(Fl_Button*, mrv::LogDisplay*);
  inline void cb_Clear_i(Fl_Button*, mrv::LogDisplay*);
  static void cb_Clear(Fl_Button*, mrv::LogDisplay*);
public:
  LogUI(ViewerUI* m);
  ~LogUI();
};

class HotkeyUI {
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
  Fl_Browser *uiFunction;
private:
  inline void cb_uiFunction_i(Fl_Browser*, HotkeyUI*);
  static void cb_uiFunction(Fl_Browser*, HotkeyUI*);
  inline void cb_Save2_i(Fl_Button*, void*);
  static void cb_Save2(Fl_Button*, void*);
public:
  HotkeyUI(ViewerUI* m);
  ~HotkeyUI();
};

class PaintUI {
public:
  Fl_Double_Window* make_window( ViewerUI* m );
  Fl_Double_Window *uiMain;
  Fl_Button *uiSelection;
private:
  inline void cb_uiSelection_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiSelection(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiDraw;
private:
  inline void cb_uiDraw_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiDraw(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiErase;
private:
  inline void cb_uiErase_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiErase(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiText;
private:
  inline void cb_uiText_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiText(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Value_Slider *uiPenSize;
  Fl_Button *uiUndoDraw;
private:
  inline void cb_uiUndoDraw_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiUndoDraw(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiRedoDraw;
private:
  inline void cb_uiRedoDraw_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiRedoDraw(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiPenColor;
private:
  inline void cb_uiPenColor_i(Fl_Button*, void*);
  static void cb_uiPenColor(Fl_Button*, void*);
public:
  Fl_Round_Button *uiAllFrames;
  Fl_Round_Button *uiCurrentFrame;
private:
  inline void cb_Previous_i(Fl_Check_Button*, mrv::ViewerUI*);
  static void cb_Previous(Fl_Check_Button*, mrv::ViewerUI*);
  inline void cb_Next_i(Fl_Check_Button*, mrv::ViewerUI*);
  static void cb_Next(Fl_Check_Button*, mrv::ViewerUI*);
public:
  PaintUI(ViewerUI* m);
  ~PaintUI();
};

class ConnectionUI {
  Fl_Double_Window* make_window(ViewerUI* main);
public:
  Fl_Double_Window *uiMain;
  Fl_Group *uiServerGroup;
  Fl_Value_Input *uiServerPort;
  Fl_Button *uiCreate;
private:
  inline void cb_uiCreate_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiCreate(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Group *uiClientGroup;
  Fl_Input *uiClientServer;
  Fl_Value_Input *uiClientPort;
  Fl_Button *uiConnect;
private:
  inline void cb_uiConnect_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiConnect(Fl_Button*, mrv::ViewerUI*);
public:
  mrv::LogDisplay *uiLog;
  ConnectionUI(ViewerUI* m);
  ~ConnectionUI();
};
#include <FL/Fl_Output.H>

class ViewerUI {
public:
  static PreferencesUI* uiPrefs; 
  static LogUI* uiLog; 
  static AboutUI* uiAbout; 
  static ICCProfileListUI* uiICCProfiles; 
  static HotkeyUI* uiHotkey; 
  static ConnectionUI* uiConnection; 
  ReelUI* uiReelWindow; 
  ImageInfoUI* uiImageInfo; 
  GL3dViewUI* uiGL3dView; 
  ColorAreaUI* uiColorArea; 
  HistogramUI* uiHistogram; 
  VectorscopeUI* uiVectorscope; 
  PaintUI* uiPaint; 
  EDLWindowUI* uiEDLWindow; 
private:
  mrv::MainWindow* make_window();
public:
  mrv::MainWindow *uiMain;
private:
  inline void cb_uiMain3_i(mrv::MainWindow*, mrv::ViewerUI*);
  static void cb_uiMain3(mrv::MainWindow*, mrv::ViewerUI*);
public:
  Fl_Pack *uiRegion;
  Fl_Group *uiTopBar;
  Fl_Value_Input *uiGainInput;
private:
  inline void cb_uiGainInput_i(Fl_Value_Input*, mrv::ViewerUI*);
  static void cb_uiGainInput(Fl_Value_Input*, mrv::ViewerUI*);
public:
  Fl_Slider *uiGain;
private:
  inline void cb_uiGain_i(Fl_Slider*, mrv::ViewerUI*);
  static void cb_uiGain(Fl_Slider*, mrv::ViewerUI*);
  inline void cb_9_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_9(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiFstop;
private:
  inline void cb_uiFstop_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiFstop(Fl_Button*, mrv::ViewerUI*);
  inline void cb_a_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_a(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiNormalize;
private:
  inline void cb_uiNormalize_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiNormalize(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Value_Input *uiGammaInput;
private:
  inline void cb_uiGammaInput_i(Fl_Value_Input*, mrv::ViewerUI*);
  static void cb_uiGammaInput(Fl_Value_Input*, mrv::ViewerUI*);
public:
  Fl_Slider *uiGamma;
private:
  inline void cb_uiGamma_i(Fl_Slider*, mrv::ViewerUI*);
  static void cb_uiGamma(Fl_Slider*, mrv::ViewerUI*);
public:
  Fl_Button *uiPixelRatio;
private:
  inline void cb_uiPixelRatio_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiPixelRatio(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiLUT;
private:
  inline void cb_uiLUT_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiLUT(Fl_Button*, mrv::ViewerUI*);
public:
  fltk::Group *uiViewGroup;
  mrv::ImageView *uiView;
  Fl_Group *uiPixelBar;
  Fl_Output *uiCoord;
  Fl_Output *uiPixelR;
  Fl_Output *uiPixelG;
  Fl_Output *uiPixelB;
  Fl_Output *uiPixelA;
  Fl_Output *uiPixelView;
  Fl_Output *uiPixelH;
  Fl_Output *uiPixelS;
  Fl_Output *uiPixelV;
  Fl_Output *uiPixelL;
  Fl_Group *uiBottomBar;
  Fl_Group *uiTimeToolbar;
  mrv::Timeline *uiTimeline;
private:
  inline void cb_uiTimeline_i(mrv::Timeline*, mrv::ViewerUI*);
  static void cb_uiTimeline(mrv::Timeline*, mrv::ViewerUI*);
public:
  mrv::Timecode *uiFrame;
private:
  inline void cb_uiFrame_i(mrv::Timecode*, mrv::ViewerUI*);
  static void cb_uiFrame(mrv::Timecode*, mrv::ViewerUI*);
  inline void cb_b_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_b(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiPlayBackwards;
private:
  inline void cb_uiPlayBackwards_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiPlayBackwards(Fl_Button*, mrv::ViewerUI*);
  inline void cb_c_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_c(Fl_Button*, mrv::ViewerUI*);
  inline void cb_d_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_d(Fl_Button*, mrv::ViewerUI*);
  inline void cb_e_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_e(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiPlayForwards;
private:
  inline void cb_uiPlayForwards_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiPlayForwards(Fl_Button*, mrv::ViewerUI*);
  inline void cb_f_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_f(Fl_Button*, mrv::ViewerUI*);
public:
  fltk::ValueInput *uiFPS;
private:
  inline void cb_uiFPS_i(fltk::ValueInput*, mrv::ViewerUI*);
  static void cb_uiFPS(fltk::ValueInput*, mrv::ViewerUI*);
public:
  Fl_Slider *uiVolume;
private:
  inline void cb_uiVolume_i(Fl_Slider*, mrv::ViewerUI*);
  static void cb_uiVolume(Fl_Slider*, mrv::ViewerUI*);
public:
  mrv::Timecode *uiStartFrame;
private:
  inline void cb_uiStartFrame_i(mrv::Timecode*, mrv::ViewerUI*);
  static void cb_uiStartFrame(mrv::Timecode*, mrv::ViewerUI*);
public:
  mrv::Timecode *uiEndFrame;
private:
  inline void cb_uiEndFrame_i(mrv::Timecode*, mrv::ViewerUI*);
  static void cb_uiEndFrame(mrv::Timecode*, mrv::ViewerUI*);
public:
  Fl_Button *uiStartButton;
private:
  inline void cb_uiStartButton_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiStartButton(Fl_Button*, mrv::ViewerUI*);
public:
  Fl_Button *uiEndButton;
private:
  inline void cb_uiEndButton_i(Fl_Button*, mrv::ViewerUI*);
  static void cb_uiEndButton(Fl_Button*, mrv::ViewerUI*);
public:
  ViewerUI();
  ~ViewerUI();
};
#endif
