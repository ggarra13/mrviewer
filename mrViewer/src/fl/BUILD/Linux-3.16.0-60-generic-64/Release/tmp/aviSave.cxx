// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "/media/Linux/code/applications/mrViewer/mrViewer/src/fl/BUILD/Linux-3.16.0-60-generic-64/Release/tmp/aviSave.h"
#include <gui/mrvIO.h>

Fl_Menu_Item AviSaveUI::menu_uiVideoCodec[] = {
 {"H264", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"MPEG4", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item AviSaveUI::menu_uiVideoColor[] = {
 {"YUV420", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"YUV422", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"YUV444", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item AviSaveUI::menu_uiAudioCodec[] = {
 {"AC3", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"MP3", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"NONE", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void AviSaveUI::cb_OK_i(Fl_Button*, AviSaveUI* v) {
  video_codec = v->uiVideoCodec->text( v->uiVideoCodec->value() );
video_color = v->uiVideoColor->text( v->uiVideoColor->value() );
video_bitrate = (unsigned)v->uiVideoBitrate->value();
audio_codec = v->uiAudioCodec->text( v->uiAudioCodec->value() );
audio_bitrate = (unsigned)v->uiAudioBitrate->value();

this->uiMain->make_exec_return(true);
}
void AviSaveUI::cb_OK(Fl_Button* o, AviSaveUI* v) {
  ((AviSaveUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void AviSaveUI::cb_Cancel_i(Fl_Button*, AviSaveUI* v) {
  video_bitrate = 0;
video_codec = "";
video_color = "";

audio_codec = "";
audio_bitrate = 0;

v->uiMain->make_exec_return(false);
}
void AviSaveUI::cb_Cancel(Fl_Button* o, AviSaveUI* v) {
  ((AviSaveUI*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

mrvDoubleWindow* AviSaveUI::make_window() {
  { uiMain = new mrvDoubleWindow(320, 505, "Movie Saving Preferences");
    uiMain->box(FL_FLAT_BOX);
    uiMain->color(FL_BACKGROUND_COLOR);
    uiMain->selection_color(FL_BACKGROUND_COLOR);
    uiMain->labeltype(FL_NO_LABEL);
    uiMain->labelfont(0);
    uiMain->labelsize(14);
    uiMain->labelcolor(FL_FOREGROUND_COLOR);
    uiMain->user_data((void*)(this));
    uiMain->align(Fl_Align(FL_ALIGN_TOP));
    uiMain->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(55, 40, 190, 145, "Video Options");
      o->box(FL_UP_BOX);
      { uiVideoCodec = new Fl_Choice(125, 71, 85, 25, "Codec");
        uiVideoCodec->down_box(FL_BORDER_BOX);
        uiVideoCodec->menu(menu_uiVideoCodec);
      } // Fl_Choice* uiVideoCodec
      { uiVideoColor = new Fl_Choice(125, 105, 85, 20, "Color");
        uiVideoColor->down_box(FL_BORDER_BOX);
        uiVideoColor->menu(menu_uiVideoColor);
      } // Fl_Choice* uiVideoColor
      { uiVideoBitrate = new Fl_Value_Input(125, 135, 83, 25, "Bitrate");
        uiVideoBitrate->minimum(1000);
        uiVideoBitrate->maximum(1e+06);
        uiVideoBitrate->step(1000);
        uiVideoBitrate->value(100000);
      } // Fl_Value_Input* uiVideoBitrate
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(55, 255, 190, 130, "Audio Options");
      o->box(FL_UP_BOX);
      { uiAudioCodec = new Fl_Choice(130, 281, 85, 25, "Codec");
        uiAudioCodec->down_box(FL_BORDER_BOX);
        uiAudioCodec->menu(menu_uiAudioCodec);
      } // Fl_Choice* uiAudioCodec
      { uiAudioBitrate = new Fl_Value_Input(130, 320, 83, 25, "Bitrate");
        uiAudioBitrate->minimum(1000);
        uiAudioBitrate->maximum(1e+06);
        uiAudioBitrate->step(1000);
        uiAudioBitrate->value(128000);
      } // Fl_Value_Input* uiAudioBitrate
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(70, 425, 75, 30, "OK");
      o->callback((Fl_Callback*)cb_OK, (void*)(this));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(160, 425, 75, 30, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel, (void*)(this));
    } // Fl_Button* o
    uiMain->set_modal();
    uiMain->end();
    uiMain->resizable(uiMain);
  } // mrvDoubleWindow* uiMain
  return uiMain;
}

AviSaveUI::AviSaveUI() {
  mrvDoubleWindow* w = make_window();
  w->exec();
}
