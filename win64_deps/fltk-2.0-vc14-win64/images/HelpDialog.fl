# data file for the FLTK User Interface Designer (FLUID)
version 2.0100 
header_name {../fltk/HelpDialog.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
comment {//
// "$Id: HelpDialog.fl 4721 2005-12-19 16:52:11Z matt $"
//
// HelpDialog dialog for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2006 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//} {in_source in_header
} 

decl {\#include "flstring.h"} {} 

decl {\#include <fltk/ask.h>} {} 

namespace fltk {open
} {
  class FL_API HelpDialog {open
  } {
    decl {int index_;} {}
    decl {int max_;} {}
    decl {int line_[100];} {}
    decl {char file_[100][256];} {}
    decl {int find_pos_;} {}
    Function {HelpDialog()} {open
    } {
      {fltk::Window} window_ {
        label {Help Dialog} open
        private xywh {398 65 530 385} type Double resizable visible
      } {
        {fltk::Group} view_ {
          callback {if (view_->filename())
{
  if (view_->changed())
  {
    index_ ++;

    view_->clear_changed ();
    if (index_ >= 100)
    {
      memmove(line_, line_ + 10, sizeof(line_[0]) * 90);
      memmove(file_, file_ + 10, sizeof(file_[0]) * 90);
      index_ -= 10;
    }

    max_ = index_;

    strlcpy(file_[index_], view_->filename(),sizeof(file_[0]));
    line_[index_] = view_->topline();

    if (index_ > 0)
      back_->activate();
    else
      back_->deactivate();

    forward_->deactivate();
    window_->label(view_->title());
  }
  else // if ! view_->changed()
  {
    strlcpy(file_[index_], view_->filename(), sizeof(file_[0]));
    line_[index_] = view_->topline();
  }
} else { // if ! view_->filename()
  index_ = 0; // hitting an internal page will disable the back/fwd buffer
  file_[index_][0] = 0; // unnamed internal page
  line_[index_] = view_->topline();
  back_->deactivate();
  forward_->deactivate();
}}
          private xywh {10 10 505 330} box DOWN_BOX selection_color 15
          extra_code {\#include <fltk/HelpView.h>}
          class {fltk::HelpView}
        } {}
        {fltk::Group} {} {open
          xywh {10 348 510 27} resizable
        } {
          {fltk::Button} {} {
            label Close
            callback {window_->hide();}
            private xywh {446 2 64 25}
            extra_code {o->label("Close");}
          }
          {fltk::Button} back_ {
            label {@<-}
            callback {if (index_ > 0)
  index_ --;

if (index_ == 0)
  back_->deactivate();

forward_->activate();

int l = line_[index_];

if (strcmp(view_->filename(), file_[index_]) != 0)
  view_->load(file_[index_]);

view_->topline(l);}
            tooltip {Show the previous help page.}
            private xywh {376 2 25 25} labelcolor 2 shortcut 0xff51
          }
          {fltk::Button} forward_ {
            label {@->}
            callback {if (index_ < max_)
  index_ ++;

if (index_ >= max_)
  forward_->deactivate();

back_->activate();

int l = view_->topline();

if (strcmp(view_->filename(), file_[index_]) != 0)
  view_->load(file_[index_]);

view_->topline(l);}
            tooltip {Show the next help page.}
            private xywh {411 2 25 25} labelcolor 2 shortcut 0xff53
          }
          {fltk::Button} smaller_ {
            label F
            callback {if (view_->textsize() > 8)
  view_->textsize(view_->textsize() - 2);

if (view_->textsize() <= 8)
  smaller_->deactivate();
larger_->activate();}
            tooltip {Make the help text smaller.}
            private xywh {306 2 25 25} labelfont 1 labelsize 10
          }
          {fltk::Button} larger_ {
            label F
            callback {if (view_->textsize() < 18)
  view_->textsize(view_->textsize() + 2);

if (view_->textsize() >= 18)
  larger_->deactivate();
smaller_->activate();}
            tooltip {Make the help text larger.}
            private xywh {341 2 25 25} labelfont 1 labelsize 16
          }
          {fltk::Group} {} {open
            xywh {0 2 296 25} resizable box DOWN_BOX color 7
          } {
            {fltk::Input} find_ {
              label {@search}
              callback {find_pos_ = view_->find(find_->value(), find_pos_);}
              tooltip {find text in document}
              private xywh {25 2 268 21} when ENTER_KEY_ALWAYS resizable box FLAT_BOX labelsize 13
            }
          }
        }
      }
      code {back_->deactivate();
forward_->deactivate();

index_    = -1;
max_      = 0;
find_pos_ = 0;
window_->resizable(view_);
/*fl_register_images();*/} {selected
      }
    }
    Function {~HelpDialog()} {} {
      code {delete window_;} {}
    }
    Function {h()} {return_type int
    } {
      code {return (window_->h());} {}
    }
    Function {hide()} {return_type void
    } {
      code {window_->hide();} {}
    }
    Function {load(const char *f)} {return_type void
    } {
      code {view_->set_changed();
view_->load(f);
window_->label(view_->title());} {}
    }
    Function {position(int xx, int yy)} {return_type void
    } {
      code {window_->position(xx, yy);} {}
    }
    Function {resize(int xx, int yy, int ww, int hh)} {return_type void
    } {
      code {window_->resize(xx, yy, ww, hh);} {}
    }
    Function {show()} {return_type void
    } {
      code {window_->show();} {}
    }
    Function {show(int argc, char **argv)} {return_type void
    } {
      code {window_->show(argc, argv);} {}
    }
    Function {textsize(uchar s)} {return_type void
    } {
      code {view_->textsize(s);

if (s <= 8)
  smaller_->deactivate();
else
  smaller_->activate();

if (s >= 18)
  larger_->deactivate();
else
  larger_->activate();} {}
    }
    Function {textsize()} {return_type uchar
    } {
      code {return (view_->textsize());} {}
    }
    Function {topline(const char *n)} {return_type void
    } {
      code {view_->topline(n);} {}
    }
    Function {topline(int n)} {return_type void
    } {
      code {view_->topline(n);} {}
    }
    Function {value(const char *f)} {return_type void
    } {
      code {view_->set_changed();
view_->value(f);
window_->label(view_->title());} {}
    }
    Function {value() const} {return_type {const char *}
    } {
      code {return view_->value();} {}
    }
    Function {visible()} {return_type int
    } {
      code {return (window_->visible());} {}
    }
    Function {w()} {return_type int
    } {
      code {return (window_->w());} {}
    }
    Function {x()} {return_type int
    } {
      code {return (window_->x());} {}
    }
    Function {y()} {return_type int
    } {
      code {return (window_->y());} {}
    }
  }
} 

comment {//
// End of "$Id: HelpDialog.fl 4721 2005-12-19 16:52:11Z matt $".
//} {in_source in_header
} 
