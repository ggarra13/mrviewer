# data file for the FLTK User Interface Designer (FLUID)
version 2.0100 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
comment {//
// "$Id$"
//
// FLUID template support for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2005 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//} {in_source in_header
} 

decl {\#include <stdio.h>} {selected
} 

decl {\#include <stdlib.h>} {selected
} 

decl {\#include <errno.h>} {} 

decl {\#include <fltk/string.h>} {} 

decl {\#include <fltk/events.h>} {} 

decl {\#include <fltk/filename.h>} {} 

decl {\#include <fltk/ask.h>} {} 

decl {\#include <fltk/SharedImage.h>} {} 

decl {\#include "PrefsData.h"} {} 

declblock {\#if defined(WIN32) && !defined(__CYGWIN__)} {after {\#endif // WIN32 && !__CYGWIN__}
} {
  decl {\#include <io.h>} {}
  decl {\#else} {}
  decl {\#include <unistd.h>} {}
} 

Function {make_template_panel()} {open
} {
  {fltk::Window} template_panel {
    label {New/Save Template}
    callback {fltk::SharedImage *img = (fltk::SharedImage *)template_preview->image();
if (img) img->remove();
template_preview->image((fltk::Symbol*)0);

template_browser->deselect();
template_name->value("");
template_instance->value("");
template_panel->hide();} open
    xywh {421 186 460 355} type Double resizable modal visible
  } {
    {fltk::Browser} template_browser {
      label {Available Templates:}
      callback template_browser_cb open
      xywh {10 28 180 250} align 5 when CHANGED labelfont 1
    } {}
    {fltk::InvisibleBox} template_preview {
      xywh {200 28 250 250} align 85 resizable box THIN_DOWN_BOX
    }
    {fltk::Input} template_name {
      label {Template Name:}
      callback {if (strlen(template_name->value())) {
  template_submit->activate();
  if (fltk::event_key() == fltk::KeypadEnter || fltk::event_key() == fltk::ReturnKey) template_panel->hide();
} else template_submit->deactivate();}
      xywh {124 288 326 25} when NEVER labelfont 1 textfont 4
    }
    {fltk::Input} template_instance {
      label {Instance Name:}
      xywh {124 288 326 25} hide labelfont 1 textfont 4
    }
    {fltk::Group} {} {open
      xywh {10 323 440 25}
    } {
      {fltk::Button} template_delete {
        label {Delete Template}
        callback template_delete_cb
        xywh {0 0 133 25}
      }
      {fltk::InvisibleBox} {} {
        xywh {143 0 126 25} resizable
      }
      {fltk::Button} {} {
        label Cancel
        callback {fltk::SharedImage *img = (fltk::SharedImage *)template_preview->image();
if (img) img->remove();
template_preview->image((fltk::Symbol*)0);

template_browser->deselect();
template_name->value("");
template_instance->value("");
template_panel->hide();}
        xywh {279 0 72 25}
      }
      {fltk::ReturnButton} template_submit {
        label Save
        callback {fltk::SharedImage *img = 
	 (fltk::SharedImage *)template_preview->image();
if (img) img->remove();
template_preview->image((fltk::Symbol*)0);

template_panel->hide();}
        xywh {361 0 79 25} shortcut 0xff0d
      }
    }
  }
} 

Function {template_clear()} {open return_type void
} {
  code {// in fltk2 no need to delete label because they have the COPIED 
// internal flags set so that it will delete automatically on destruction
template_browser->deselect();
template_browser->clear();} {}
} 

Function {template_load()} {open return_type void
} {
  code {int i;
char name[1024], filename[1024], path[1024], *ptr;
struct dirent **files;
int num_files;

prefs.getUserdataPath(path, sizeof(path));
strlcat(path, "templates", sizeof(path));

num_files = fltk::filename_list(path, &files);

for (i = 0; i < num_files; i ++) {
  if (fltk::filename_match(files[i]->d_name, "*.fl")) {
    // Format the name as the filename with "_" replaced with " "
    // and without the trailing ".fl"...
    strlcpy(name, files[i]->d_name, sizeof(name));
    *strstr(name, ".fl") = '\\0';

    for (ptr = name; *ptr; ptr ++) {
      if (*ptr == '_') *ptr = ' ';
    }

    // Add the template to the browser...
    snprintf(filename, sizeof(filename), "%s/%s", path, files[i]->d_name);
    template_browser->add(name, strdup(filename));
  }

  free(files[i]);
}

if (num_files > 0) free(files);} {}
} 

comment {//
// End of "$Id$".
//} {in_source in_header
} 
